#Description
#Math for Elementary Education
#End Description

# DBsubject(Divisibility)
# DBchapter(Number Theory)
# DBsection(Definitions)
# Date(5/3/22)
# Institution(SUNY Oneonta)
# Level(2)
# KEYWORDS('divisibility')

###################################

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGchoicemacros.pl",
  "PGML.pl",
  "PGcourse.pl",
   "PGessaymacros.pl",
);

##############################################

#This subroutine returns 1 if a number belongs to an array.
sub isInArray {
   my ($num,@array) = @_;
   foreach my $item (@array) {
      if ($item==$num) {return 1;}
   }
   return 0;
} 

#This subroutine takes a number as an argument. If the input is 324, the output is a string "3+2+4", and a number $sum=9.

sub breakDigits {
   my $num = shift;
   my @digits=();
   my $sum = 0;
   do {
      $sum += $num-10*int($num/10);
      push(@digits,$num-10*int($num/10));
      $num = int($num/10);
   } while ($num!=0);
   $returnString = "";
   do {
      $returnString .= (pop @digits).'+';
   } while ((scalar @digits)!=0);
   chop $returnString;
   
   return ($returnString,$sum);
}      

##############################################
TEXT(beginproblem());

Context("Numeric");

@factors = (2, 3,4, 5,6,8, 9, 10);
@given = ();

#Create the number. Make sure at least 2 factors go into the number.
do {
   $flag = 0;
   $num = random(100000,900000,100000)+random(10000,90000,10000) + random(1000,9000,1000) + random(100,900,100) + random(10,90,10) + random(1,9,1);
   foreach my $item (@factors) {
      if ($num%$item==0) {$flag++;}
   }
} until ($flag>=3);

@canGoInto = ();

$mc = new_checkbox_multiple_choice();

Context()->texStrings;
$i=0;
foreach my $item (@factors) {
   if ($num%$item==0) {
      $canGoInto[$i++]="does";
      $mc -> qa (
      "Check the box for each number that divides evenly into \($num\). Use divisibilty tests to make your decisions.$BR",
      "\($item\)$BR",
      );
   } else {
      $canGoInto[$i++]="does not";
   }
}

$mc->makeLast(
   "\($factors[0]\)$BR",
   "\($factors[1]\)$BR",
   "\($factors[2]\)$BR",
   "\($factors[3]\)$BR",
   "\($factors[4]\)$BR",
   "\($factors[5]\)$BR",
   "\($factors[6]\)$BR",
   "\($factors[7]\)$BR"
);
Context()->normalStrings;
#$mc->qa("question","Yes"); $mc->makeLast("Yes","No","Maybe");

##############################################

BEGIN_TEXT



  \{ $mc -> print_q() \}

$SPACE $SPACE $SPACE    \{ $mc -> print_a() \}


$PAR
 


END_TEXT






##############################################
install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

ANS( checkbox_cmp( $mc->correct_ans() ) );

($output,$sum) = breakDigits($num);




##############################################



ENDDOCUMENT();
