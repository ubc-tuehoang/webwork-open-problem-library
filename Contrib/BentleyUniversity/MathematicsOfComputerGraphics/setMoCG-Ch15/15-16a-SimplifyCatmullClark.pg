##DESCRIPTION
## Derive simplified formulas for Catmull-Clark subdivision algorithm counts
##ENDDESCRIPTION

## DBsubject('Graph theory')
## DBchapter('Terminology')
## DBsection('Misc.')
## Date('04/24/2018')
## Author('Nathan Carter')
## Institution('Bentley University')
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## EditionText1('1')
## AuthorText1('Nathan Carter')
## Section1('15')
## Problem1('16a')
##KEYWORDS('mesh','vertex','edge','face')

########################################################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
);

Context("Numeric");
Context()->variables->add(n=>'Real');
Context()->variables->add(F=>'Real');
Context()->variables->add(E=>'Real');
Context()->variables->add(V=>'Real');
$showPartialCorrectAnswers = 1;

$V = random( 5, 10 );
$E = random( 5, 10 );
$F = random( 5, 10 );

$n = random( 4, 6 );
$V2 = random( 5, 10 );
$E2 = random( 5, 10 );
$F2 = random( 5, 10 );

TEXT(beginproblem());
BEGIN_PGML
Examine the equations on page 418 of the text for the sizes of a mesh produced by the Catmull-Clark subdivision algorithm.  Now assume that the mesh has no boundary (for example, it might be a sphere or a cube).  How would the formulas simplify?  Use [`V,E,F`] for the number of vertices/edges/faces in the original mesh.

[`V'=`][__________]{"V+E+F"}

[`E'=`][__________]{"4E"}

[`F'=`][__________]{"2E"}

If the original mesh had [`V=[$V],E=[$E],F=[$F]`], what would those values be for the new mesh?

[`V'=`][__________]{$V+$E+$F}

[`E'=`][__________]{4*$E}

[`F'=`][__________]{2*$E}

What if the algorithm were applied again to that new mesh, producing yet a third mesh, for which we write [`V'',E'',F''`]; what would those values be?

[`V''=`][__________]{$V+7*$E+$F}

[`E''=`][__________]{16*$E}

[`F''=`][__________]{8*$E}

What if the algorithm were applied [`n`] times to the original mesh, and we write [`V^n,E^n,F^n`] for the counts of vertices/edges/faces in the resulting mesh.  What would those values be (in terms of [`n`])?

[`V^n=`][__________]{"$V+$F+$E*(2^(2n-1)-1)"}

[`E^n=`][__________]{"$E*(4^n)"}

[`F^n=`][__________]{"2*$E*(4^(n-1))"}

In a mesh with no boundary, if [`V=[$V2],E=[$E2],F=[$F2],V^n=[$V2+$F2+$E2*(2**(2*$n-1)-1)],E^n=[$E2*(4**$n)],F^n=[$E2*2*(4**($n-1))]`], how many iterations of the midedge subdivision algorithm were applied?

[`n=`][__________]{$n}
END_PGML

BEGIN_PGML_SOLUTION
On page 418, the text says [`V'=V+E+F`], which needs no change, because it had nothing to do with the boundary.

The text also says [`E'=4E_i+3E_b`], but we know [`E_b=0`], so we can write [`E'=4E_i`], except the problem told us to use [`E`] for the number of edges in the original mesh, so we write [`E'=4E`].

The text also says [`F'=2E_i+E_b`], but we know [`E_b=0`], so we can write [`E'=2E_i`], except the problem told us to use [`E`] for the number of edges in the original mesh, so we write [`E'=2E`].

If we apply those formulas when [`V=[$V],E=[$E],F=[$F]`], we end up with [`V'=[$E],E'=[$E*2],F'=[$F+$V]`].

If we apply them again to those results, we get [`V''=[$E*2],E''=[$E*4],F''=[$F+$V+$E]`].

You can apply them several more times to find a pattern, and the result is as follows.

- [`V^n=[$E](2^{n-1})`]
- [`E^n=[$E](2^n)`]
- [`F^n=[$V+$F]+[$E](2^{n-1}-1)`]

We could iterate the equations a few times in the final part to find that [`n=[$n]`].
END_PGML_SOLUTION

ENDDOCUMENT();
