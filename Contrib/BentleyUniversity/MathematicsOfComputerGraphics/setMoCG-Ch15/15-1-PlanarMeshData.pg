##DESCRIPTION
## Given planar meshes, give the # of vertices, faces, edges, and Euler characteristic
##ENDDESCRIPTION

## DBsubject('Graph theory')
## DBchapter('Terminology')
## DBsection('Misc.')
## Date('04/22/2018')
## Author('Nathan Carter')
## Institution('Bentley University')
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## EditionText1('1')
## AuthorText1('Nathan Carter')
## Section1('15')
## Problem1('1')
##KEYWORDS('planar mesh','vertex','edge','face','Euler characteristic')

########################################################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
  "parserPopUp.pl",
  "PGgraphmacros.pl",
);

Context("Numeric");
Context()->variables->add(n=>'Real');
$showPartialCorrectAnswers = 1;

$ngon = random( 3, 6 );
$graph1 = init_graph(-1.1,-1.1,1.1,1.1,size=>[200,200]);
$graph1->new_color( 'light', 230, 230, 230 );
$pi = 3.1415926539793;
for ( my $i = 0 ; $i <= $ngon ; $i++ ) {
    my $angle = $i/$ngon*2*$pi;
    if ( $i == 0 ) {
        $graph1->moveTo( cos( $angle ), sin( $angle ) );
    } else {
        $graph1->lineTo( cos( $angle ), sin( $angle ), 'black' );
        $graph1->stamps( closed_circle( cos( $angle ), sin( $angle ),
                         'black' ) );
    }
}
$graph1->fillRegion( [ 0, 0, 'light' ] );
$graph2 = init_graph(-1.1,-1.1,1.1,1.1,size=>[200,200]);
$graph2->new_color( 'light', 230, 230, 230 );
for ( my $i = 0 ; $i <= $ngon+1 ; $i++ ) {
    my $angle = $i/($ngon+1)*2*$pi;
    if ( $i == 0 ) {
        $graph2->moveTo( cos( $angle ), sin( $angle ) );
    } else {
        $graph2->lineTo( cos( $angle ), sin( $angle ), 'black' );
        $graph2->stamps( closed_circle( cos( $angle ), sin( $angle ),
                         'black' ) );
    }
}
$graph2->fillRegion( [ 0, 0, 'light' ] );

$nboxes1 = random( 2, 4 );
$graph3 = init_graph(-1.1,-1.1,1.1,1.1,size=>[200,200]);
$graph3->new_color( 'light', 230, 230, 230 );
$graph3->moveTo( -1, 0.5 );
$graph3->lineTo( 1, 0.5 );
$graph3->moveTo( -1, -0.5 );
$graph3->lineTo( 1, -0.5 );
my $x = 0;
for ( my $i = 0 ; $i <= $nboxes1 + 1 ; $i++ ) {
    $x = $i/($nboxes1+1)*2-1;
    $graph3->moveTo( $x, -0.5 );
    $graph3->lineTo( $x, 0.5 );
    $graph3->fillRegion( [ $x-0.1, 0, 'light' ] );
    $graph3->stamps( closed_circle( $x, -0.5, 'black' ) );
    $graph3->stamps( closed_circle( $x, 0.5, 'black' ) );
}
$x = $nboxes1/($nboxes1+1)*2-1;
$graph3->moveTo( $x, 0.5 );
$graph3->lineTo( 1, 0 );
$graph3->lineTo( $x, -0.5 );
$graph3->fillRegion( [ $x + 0.1, 0.49, 'light' ] );
$graph3->fillRegion( [ $x + 0.1, -0.49, 'light' ] );
$graph3->stamps( closed_circle( 1, 0, 'black' ) );

$nboxes2 = random( 6, 9 );
$graph4 = init_graph(-1.1,-1.1,1.1,1.1,size=>[200,200]);
$graph4->new_color( 'light', 230, 230, 230 );
$graph4->moveTo( -1, 0.5 );
$graph4->lineTo( 1, 0.5 );
$graph4->moveTo( -1, -0.5 );
$graph4->lineTo( 1, -0.5 );
my $x = 0;
for ( my $i = 0 ; $i <= $nboxes2 ; $i++ ) {
    $x = $i/$nboxes2*2-1;
    $graph4->moveTo( $x, -0.5 );
    $graph4->lineTo( $x, 0.5 );
    if ( $i > 0 ) { $graph4->fillRegion( [ $x-0.1, 0, 'light' ] ); }
    $graph4->stamps( closed_circle( $x, -0.5, 'black' ) );
    $graph4->stamps( closed_circle( $x, 0.5, 'black' ) );
}

$ncells = random( 8, 10 );
$graph5 = init_graph(-1.1,-1.1,1.1,1.1,size=>[200,200]);
$graph5->new_color( 'light', 230, 230, 230 );
for ( my $i = 0 ; $i < $ncells ; $i++ ) {
    my $angle = $i/$ncells*2*$pi;
    my $c = cos( $angle );
    my $s = sin( $angle );
    my $next = ($i+1)/$ncells*2*$pi;
    my $nc = cos( $next );
    my $ns = sin( $next );
    $graph5->moveTo( $nc, $ns );
    $graph5->lineTo( $c, $s );
    $graph5->lineTo( $c/2, $s/2 );
    $graph5->lineTo( $nc/2, $ns/2 );
    $graph5->fillRegion( [ ($c/2+$nc)/2, ($s/2+$ns)/2, 'light' ] );
    $graph5->stamps( closed_circle( $c, $s, 'black' ) );
    $graph5->stamps( closed_circle( $c/2, $s/2, 'black' ) );
}

TEXT(beginproblem());
BEGIN_PGML
Consider the following planar mesh.

[@ image(insertGraph($graph1), width=>200, height=>200) @]*

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{$ngon}

[`E=`][_____]{$ngon}

[`F=`][_____]{1}

[`\chi=`][_____]{1}

-----

Consider the following planar mesh.

[@ image(insertGraph($graph2), width=>200, height=>200) @]*

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{$ngon+1}

[`E=`][_____]{$ngon+1}

[`F=`][_____]{1}

[`\chi=`][_____]{1}

-----

Consider the following planar mesh.

[@ image(insertGraph($graph3), width=>200, height=>200) @]*

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{$nboxes1*2+5}

[`E=`][_____]{$nboxes1*3+7}

[`F=`][_____]{$nboxes1+3}

[`\chi=`][_____]{1}

-----

Consider the following planar mesh.

[@ image(insertGraph($graph4), width=>200, height=>200) @]*

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{$nboxes2*2+2}

[`E=`][_____]{$nboxes2*3+1}

[`F=`][_____]{$nboxes2}

[`\chi=`][_____]{1}

-----

Consider the same planar mesh shown immediately above, but imagine it contains [`n`] boxes rather than [$nboxes2].

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{"2n+2"}

[`E=`][_____]{"3n+1"}

[`F=`][_____]{"n"}

[`\chi=`][_____]{1}

-----

Consider the following planar mesh.

[@ image(insertGraph($graph5), width=>200, height=>200) @]*

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{$ncells*2}

[`E=`][_____]{$ncells*3}

[`F=`][_____]{$ncells}

[`\chi=`][_____]{0}

-----

Consider the same planar mesh shown immediately above, but imagine it contains [`n`] regions arranged in a circle rather than [$ncells].

Give the values of [`V`], [`E`], [`F`], and [`\chi`].

[`V=`][_____]{"2n"}

[`E=`][_____]{"3n"}

[`F=`][_____]{"n"}

[`\chi=`][_____]{0}
END_PGML

BEGIN_PGML_SOLUTION
You can count the number of vertices, edges, and faces in the first graph, giving [`V=E=[$ngon]`] and [`F=1`].  Then, as always,

>> [`\chi=V-E+F=[$ngon]-[$ngon]+1=1.`] <<

You can count the number of vertices, edges, and faces in the second graph, giving [`V=E=[$ngon+1]`] and [`F=1`].  Then, as always,

>> [`\chi=V-E+F=[$ngon+1]-[$ngon+1]+1=1.`] <<

In the third graph, there are [$nboxes1+2] vertices on top and the same number on bottom, plus one on the right, for a total of [`V=[$nboxes1*2+5]`].  Counting the edges gives [`E=[$nboxes1*3+7]`].  Counting the faces gives [`F=[$nboxes1+3]`].  Thus

>> [`\chi=V-E+F=[$nboxes1*2+5]-[$nboxes1*3+7]+[$nboxes1+3]=1.`] <<

In the fourth graph, there are [$nboxes2+1] vertices on top and bottom, for a total of [`V=[$nboxes2*2+2]`].  There are [$nboxes2+1] vertical edges and [$nboxes2] horizontal edges on top, and the same number on bottom, for a total of [`E=[$nboxes2*3+1]`].  Straightforward counting gives [`F=[$nboxes2]`].  Thus

>> [`\chi=V-E+F=[$nboxes2*2+2]-[$nboxes2*3+1]+[$nboxes2]=1`] <<

If that graph had had [`n`] boxes, then there would be [`n+1`] vertices on top and bottom, so that [`V=2n+2`].  And there would have been [`n+1`] vertical edges, plus [`n`] edges on each of top and bottom, giving [`E=3n+1`].  Obviously we would have [`F=n`].  Thus

>> [`\chi=V-E+F=2n+2-(3n+1)+n=1.`] <<

In the fifth graph, there are [$ncells] vertices on the inside and [$ncells] vertices on the outside, so that [`V=[$ncells*2]`].  There are [$ncells] edges on the inside, [$ncells] edges on the outside, and [$ncells] edges that run like spokes on a wheel, from inside to outside.  Thus [`E=[$ncells*3]`].  Straightforward counting gives [`F=[$ncells]`].  Thus

>> [`\chi=V-E+F=[$ncells*2]-[$ncells*3]+[$ncells]=0`] <<

If that graph had had [`n`] regions, then there would be [`n`] vertices on the outside and inside, so that [`V=2n`].  And there would have been [`n`] edges on the outside, [`n`] on the inside, and [`n`] like spokes on a wheel, making [`E=3n`].  Obviously we would have [`F=n`].  Thus

>> [`\chi=V-E+F=2n-3n+n=0.`] <<
END_PGML_SOLUTION

ENDDOCUMENT();
