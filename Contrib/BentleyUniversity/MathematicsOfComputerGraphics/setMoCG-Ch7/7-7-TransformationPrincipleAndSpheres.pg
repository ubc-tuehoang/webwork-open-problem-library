## DESCRIPTION
## Transformation Principle and POV spheres
## ENDDESCRIPTION

## DBsubject(Geometry)
## DBchapter(Shapes)
## DBsection(Properties of Shapes)
## Date(02/22/2018)
## Institution(Bentley University)
## Author(Nathan Carter)
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## AuthorText1('Nathan Carter')
## EditionText1('1')
## Section1('7')
## Problem1('7')
## KEYWORDS('sphere','equation','affine transformations')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
);

Context("Matrix");
$showPartialCorrectAnswers = 1;
#Context()->variables->add(y => 'Real');
#Context()->variables->add(z => 'Real');
Context('Matrix')->variables->add(t => 'Real');
$c1 = random( -10, 10 );
$c2 = random( -10, 10 );
$c3 = random( -10, 10 );
$r = random( 1, 10 );
$camx = $c1 + $r + random( 4, 6 );
$camy = $c2;
$camz = $c3;
$pixx = $c1 + $r + random( 1, 3 );
$xdist2center = $camx - $c1;
$xdist2pixel = $camx - $pixx;
$ratio = $xdist2pixel / ( $xdist2pixel + $xdist2center );
$pixy = $c2 + $r * non_zero_random( -0.7, 0.7, 0.1 ) * $ratio;
$pixz = $c3 + $r * non_zero_random( -0.7, 0.7, 0.1 ) * $ratio;
$pixxstr = sprintf( "%0.2f", $pixx );
$pixystr = sprintf( "%0.2f", $pixy );
$pixzstr = sprintf( "%0.2f", $pixz );
$v1 = round( ( $pixx - $camx ) * 100 ) / 100;
$v2 = round( ( $pixy - $camy ) * 100 ) / 100;
$v3 = round( ( $pixz - $camz ) * 100 ) / 100;
$v1str = sprintf( "%0.2f", $v1 );
$v2str = sprintf( "%0.2f", $v2 );
$v3str = sprintf( "%0.2f", $v3 );
$sx = random( 1, 3 );
$sy = random( 2, 3 );
$sz = random( 1, 3 );
$tx = non_zero_random( -9, 9 );
$ty = non_zero_random( -9, 9 );
$tz = non_zero_random( -9, 9 );
$Smatrix = Matrix( [
    [ $sx, 0, 0, 0 ], [ 0, $sy, 0, 0 ], [ 0, 0, $sz, 0 ], [ 0, 0, 0, 1 ]
] );
$Tmatrix = Matrix( [
    [ 1, 0, 0, $tx ], [ 0, 1, 0, $ty ], [ 0, 0, 1, $tz ], [ 0, 0, 0, 1 ]
] );
$Amatrix = $Tmatrix * $Smatrix;
$Ainverse = $Amatrix->inverse;
$Colvec = Matrix( [ [ Formula( "$camx+t*$v1" ) ],
                    [ Formula( "$camy+t*$v2" ) ],
                    [ Formula( "$camz+t*$v3" ) ],
                    [ 1 ] ] );
$P1 = $camx/$sx-$tx/$sx;
$P2 = $camy/$sy-$ty/$sy;
$P3 = $camz/$sz-$tz/$sz;
$V1 = $v1/$sx;
$V2 = $v2/$sy;
$V3 = $v3/$sz;
$XfmColvec = Matrix( [ [ Formula( "$P1+t*$V1" ) ],
                       [ Formula( "$P2+t*$V2" ) ],
                       [ Formula( "$P3+t*$V3" ) ],
                       [ 1 ] ] );
$A = $V1**2 + $V2**2 + $V3**2;
$B = 2*($V1*($P1-$c1) + $V2*($P2-$c2) + $V3*($P3-$c3));
$C = (($P1-$c1)**2 + ($P2-$c2)**2 + ($P3-$c3)**2) - $r**2;
$lowert = (-$B-sqrt($B**2-4*$A*$C))/(2*$A);
$highert = (-$B+sqrt($B**2-4*$A*$C))/(2*$A);

TEXT(beginproblem());
BEGIN_PGML
Suppose we wish to figure out when a line of sight intersects the
sphere given by the following POV code.

[|sphere { |]

[`\hspace{1em}`][|  <|][$c1][|,|][$c2][|,|][$c3][|>, |][$r]

[`\hspace{1em}`][|  scale <|][$sx][|,|][$sy][|,|][$sz][|>|]

[`\hspace{1em}`][|  translate <|][$tx][|,|][$ty][|,|][$tz][|>|]

[| }|]

Assume the camera is at position [`([$camx],[$camy],[$camz])`] and the line of sight we're interested in passes through the pixel at [`([$pixxstr],[$pixystr],[$pixzstr])`].

The sphere undergoes the transformation [`T_{[$tx],[$ty],[$tz]}S_{[$sx],[$sy],[$sz]}`].  Call this transformation [`A`].

Create the matrix for the transformation [`A`].

Answer: [__]*{$Amatrix}

Create the matrix for the transformation [`A^{-1}`].

Answer: [__]*{$Ainverse}

Write the parametric equations for the line of sight as a column vector.

Answer: [__]*{$Colvec}

Apply the transformation [`A^{-1}`] to that column vector.

Answer: [__]*{$XfmColvec}

What is the equation of the (unaltered) sphere?  (Place the radius portion on the right hand side and the rest of the equation on the left, as in the text.)

Answer:
[_______________________________________]{"(x-$c1)^2+(y-$c2)^2+(z-$c3)^2"}
=
[_____]{$r**2}

Solve for when the transformed line of sight intersects the unaltered sphere.

Lower [`t`] value = [________]{$lowert}

Higher [`t`] value = [________]{$highert}

For what [`t`] values does the original line of sight intersect the transformed sphere?

Lower [`t`] value = [________]{$lowert}

Higher [`t`] value = [________]{$highert}
END_PGML

BEGIN_PGML_SOLUTION
We form [`A`] by multiplying the translation and scaling.

[`[$Tmatrix][$Smatrix]=[$Amatrix]`]

We form [`A^{-1}`] by multiplying the inverses of those matrices in the other order.

[`[$Smatrix->inverse][$Tmatrix->inverse]=[$Ainverse]`]

The column vector for the line of sight:

[`[$Colvec]`]

We therefore multiply as follows.

[`[$Ainverse][$Colvec]=[$XfmColvec]`]

The sphere equation is [`(x-[$c1])^2+(y-[$c2])^2+(z-[$c3])^2=[$r]^2`].

We can substitute into it as follows:

[`([$P1]+[$V1]t-[$c1])^2+([$P2]+[$V2]t-[$c2])^2+([$P3]+[$V3]t-[$c3])^2=[$r]^2`]

After many steps of simplification, we have this:

[`[$A]t^2+[$B]t+[$C]=0`]

Using the quadratic formula gives [`t=[$lowert],[$highert]`].

Those are the [`t`] values for the inverse-transformed line of sight intersecting the untransformed sphere.  The Transformation Principle says they're the same [`t`] values for the original line of sight intersecting the transformed sphere.
END_PGML_SOLUTION

ENDDOCUMENT();
