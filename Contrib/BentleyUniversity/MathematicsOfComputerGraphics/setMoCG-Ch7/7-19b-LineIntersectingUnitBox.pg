## DESCRIPTION
## Intervals of t values for lines of sight and objects made using CSG
## ENDDESCRIPTION

## DBsubject(Geometry)
## DBchapter(Shapes)
## DBsection(Properties of Shapes)
## Date(02/22/2018)
## Institution(Bentley University)
## Author(Nathan Carter)
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## AuthorText1('Nathan Carter')
## EditionText1('1')
## Section1('7')
## Problem1('19b')
## KEYWORDS('lines','intersection','unit box')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
);

Context("Numeric");
$showPartialCorrectAnswers = 1;

$innerx = random( 0.1, 0.9, 0.1 );
$innery = random( 0.1, 0.9, 0.1 );
$innerz = random( 0.1, 0.9, 0.1 );

$v1 = random( 1, 2, 0.1 );
$v2 = random( 1, 2, 0.1 );
$v3 = random( 1, 2, 0.1 );

$s = random( 1, 4 );

$pixx = $innerx - $s * $v1;
$pixy = $innery - $s * $v2;
$pixz = $innerz - $s * $v3;

$p1 = $pixx - $v1;
$p2 = $pixy - $v2;
$p3 = $pixz - $v3;

$xmin = min( -$p1/$v1, (1-$p1)/$v1 );
$xmax = max( -$p1/$v1, (1-$p1)/$v1 );
$ymin = min( -$p2/$v2, (1-$p2)/$v2 );
$ymax = max( -$p2/$v2, (1-$p2)/$v2 );
$zmin = min( -$p3/$v3, (1-$p3)/$v3 );
$zmax = max( -$p3/$v3, (1-$p3)/$v3 );

$min = max( $xmin, $ymin, $zmin );
$max = min( $xmax, $ymax, $zmax );

TEXT(beginproblem());
BEGIN_PGML
Assume the camera is at [`([$p1],[$p2],[$p3])`] and is looking through a pixel at the point [`([$pixx],[$pixy],[$pixz])`].  There is a box in the scene that measures 1 unit on each side, stretching from [`(0,0,0)`] to [`(1,1,1)`].

Come up with a way to determine the [`t`] values for when the line of sight enters and exits that box.  Use your method to compute those [`t`] values.

Answers: [______]{$min} (lower value) and [______]{$max} (higher value)
END_PGML

BEGIN_PGML_SOLUTION
The line of sight has direction vector [`([$pixx],[$pixy],[$pixz])-([$p1],[$p2],[$p3])=\langle [$v1],[$v2],[$v3] \rangle`] and thus its equations are:

[`x=[$p1]+[$v1]t`]

[`y=[$p2]+[$v2]t`]

[`z=[$p3]+[$v3]t`]

One way to find where this intersects the box is to consider separately the questions: When does the line have its [`x`] coordinate between 0 and 1?  When does it have its [`y`] coordinate between 0 and 1?  When does it have its [`z`] coordinate between 0 and 1?  These questions are easy to solve from the parametric equations:

[`0\leq x\leq 1`] means [`0\leq [$p1]+[$v1]t\leq 1`], so we can set [`0=[$p1]+[$v1]t`] to find the one end and [`[$p1]+[$v1]t=1`] to find the other.  Solving those two simple equations gives [`t=\frac{[$p1*-1]}{[$v1]}`] and [`t=\frac{1-[$p1]}{[$v1]}`], or [`[$xmin]\leq t \leq[$xmax]`].

Repeating the same exercise for [`0\leq y\leq 1`] gives [`0\leq [$p2]+[$v2]t\leq 1`], which simplifies to [`[$ymin]\leq t\leq [$ymax]`].

Repeating the same exercise for [`0\leq z\leq 1`] gives [`0\leq [$p3]+[$v3]t\leq 1`], which simplifies to [`[$zmin]\leq t\leq [$zmax]`].

Since all three of these must be true for the line to be inside the box, we take the intersection of all three intervals, giving [`[$min]\leq t\leq [$max]`].
END_PGML_SOLUTION

ENDDOCUMENT();
