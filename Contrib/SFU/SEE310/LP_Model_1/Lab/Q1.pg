# DESCRIPTION
# Solve a Linear Programming Model  
# ENDDESCRIPTION

## DBsubject(Sustainable Energy Engineering)
## DBchapter(Energy System Modelling)
## DBsection(Linear Programming Models)
## Level(5)
## KEYWORDS('problem setup', 'objective function', 'constraints')
## Institution(Simon Fraser University)
## Author(Taco Niet and Sheena Tan and Jonn Axsen)
## Resources()

# This work is licensed under
# Creative Commons Attribution 4.0 International 
# CC-BY-4.0 (https://creativecommons.org/licenses/by/4.0/)

# Question based on original problem developed in REM 658 by Jonn Axsen, 
# Mark Jaccard, Paulus Mau and Rose Murphy at Simon Fraser University

#########################################################

DOCUMENT();
## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGanswermacros.pl",
  "parserPopUp.pl",
  "compoundProblem5.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "contextInequalities.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGcourse.pl",
  "niceTables.pl"
);

#  Setup

###Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
##warn("seed: " . $seed);

####Call R server
rserve_eval("set.seed($seed)"); ## can not combine with the rest

rserve_eval('
# Load R Libraries
library(lpSolve)
library(plyr)

# Fixed Cost of Hydro
HydroCost <- round_any(runif(1,1000,2000),50)

# Variable Cost of Natural Gas
NatGasCost <- round_any(runif(1,3,12),0.5)

# Variable Cost of Renewables
RenewCost <- round_any(runif(1,15,30),1)

# Variable Cost of Albertan imports
AlbImportCost <- round_any(runif(1,7,14),1)

# Variable Cost of Exports
ExportCost <- round_any(runif(1,-30,-10),1)

# Emissions of Natural Gas
NatGasEmis <- round_any(runif(1,50,70),1)

# Emissions of Albertan imports
AlbImportEmis <- round_any(runif(1,75,95),1)

# Demand
Demand <- round_any(runif(1,80,120),5)

# Capacity of Hyrdo
HydroCap <- round_any(runif(1,60,100),5)

# Capacity of Natural Gas
NatGasCap <- round_any(runif(1,40,80),5)

# Capacity of Renewables
RenewCap <- round_any(runif(1,10,50),5)

# Carbon Emissions Level
CarbonEmis <- round_any(runif(1,2.5,3.5),0.1)

# Set coefficients of the objective function
f.obj <- c(0, NatGasCost, RenewCost, AlbImportCost, ExportCost)

# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- matrix(c(1, 1, 1, 1, -1,
                  0, NatGasEmis, 0, AlbImportEmis, 0,
                  1, 0, 0, 0, 0,
                  0, 1, 0, 0, 0,
                  0, 0, 1, 0, 0
                  ), nrow = 5, byrow = TRUE)

# Set unequality signs
f.dir <- c(">=",
           "<=",
           "<=",
           "<=",
           "<="
           )

# Set right hand side coefficients
f.rhs <- c(Demand,
           CarbonEmis*1000,
           HydroCap,
           NatGasCap,
           RenewCap)

# Final value (z)
lp("min", f.obj, f.con, f.dir, f.rhs)

lp("min", f.obj, f.con, f.dir, f.rhs)$objval

# Variables final values
lp("min", f.obj, f.con, f.dir, f.rhs)$solution

finalcost <- lp("min", f.obj, f.con, f.dir, f.rhs)$objval + HydroCost

');

@finalvalues = rserve_eval('lp("min", f.obj, f.con, f.dir, f.rhs)$solution');
@finalcost = rserve_eval('finalcost');

@HydroCost = rserve_eval('HydroCost');
@NatGasCost = rserve_eval('NatGasCost');
@RenewCost = rserve_eval('RenewCost');
@AlbImportCost = rserve_eval('AlbImportCost');
@ExportCost = rserve_eval('ExportCost');
@NatGasEmis = rserve_eval('NatGasEmis');
@AlbImportEmis = rserve_eval('AlbImportEmis');
@Demand = rserve_eval('Demand');
@HydroCap = rserve_eval('HydroCap');
@NatGasCap = rserve_eval('NatGasCap');
@RenewCap = rserve_eval('RenewCap');
@CarbonEmis = rserve_eval('CarbonEmis');
$AbsExportCost = -$ExportCost[0];
$CarbonEmisMega = 1000*$CarbonEmis[0];

TEXT(beginproblem());
# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

#########################################################
## Main Text: where all text goes (Required)
Context()->texStrings;
BEGIN_TEXT

In a fictitious future British Columbia the Ministry of Energy has asked you to come up with an electricity strategy for BC Hydro that will maximize profits (to pay for other government initiatives) by minimizing its costs while at the same time meeting specified environmental conditions.
$BR
$BR
The expected demand is @Demand PJ, which can be satisfied with a mix of hydro, natural gas, renewables and imports.  Exports at peak times are permitted.  Each option has different costs and emissions as summarised in the following table.

$BR
$BR

$PAR
\{
DataTable(
  [
    [['Generation Source', headerrow => 1],'Fixed Cost', 'Variable Cost', 'Emissions'],
    [['Hydro', b=>1],'M$ @HydroCost', '', '0 kt CO2 / PJ'],
    [['Natural Gas', b=>1],'', 'M$ @NatGasCost / PJ', '@NatGasEmis kt CO2 / PJ'], 
    [['Renewables', b=>1], '', 'M$ @RenewCost / PJ', '0 kt CO2 / PJ'],
    [['Albertan Imports', b=>1], '', 'M$ @AlbImportCost / PJ', '@AlbImportEmis kt CO2 / PJ'],
    [['Exports',b=>1], '', 'M$ @ExportCost / PJ', 'Not applicable']],
  caption => 'Table of Costs and Emissions',
  midrules => 1,
  align => '| X | p{1in} | p{1in} | p{1in} |',
);
\}

$BR
$BR
For the purpose of tracking emissions, we will consider the emissions intensity of imports in the model as emitted by BC Hydro but, due to the difficulty of tracking the emissions level, no credit will be given for exported emissions.

$BR
$BR

The government is not considering changing the regulations that exist restricting BC Hydro from exporting more than one third of hydro generation and importing more than one quarter of total generation.

$BR
$BR

In addition, the maximum installed capacity of hydro is @HydroCap PJ, natural gas is @NatGasCap PJ and renewables is @RenewCap PJ due to construction times and resource availability.
Finally, the government wants to freeze carbon emissions from the electricity sector at the 2005 level of @CarbonEmis mega tonnes.

$BR
$BR

This is the partial problem set up from your prelab: 
\{
DataTable(
  [
    [['Minimize', b => 1],'@HydroCost', '+', '', '', '@NatGasCost \(x_2\)', '+' , '@RenewCost \(x_3\)', '+', '@AlbImportCost \(x_4\)', '-', '$AbsExportCost \(x_5\)', '', ''],
    [['Demand Constraint', b=>1], '', '', '\(x_1\)', '+', '\(x_2\)', '+', '\(x_3\)', '+', '\(x_4\)', '-', '\(x_5\)', '\(\geq\)',  '@Demand'],
    [['Hydro Capacity Constraint', b=>1], '','', '\(x_1\)', '', '', '', '', '', '', '', '', '\(\leq\)', '@HydroCap'],
    [['Natural Gas Capacity Constraint', b=>1], '','', '', '', '\(x_2\)', '', '', '', '', '', '', '\(\leq\)', '@NatGasCap'],
    [['Renewables Capacity Constraint', b=>1], '','', '', '', '', '', '\(x_3\)', '', '', '', '', '\(\leq\)', '@RenewCap'],
    [['Greenhouse Gas Constraint', b=>1], '','', '', '', '@NatGasEmis\(x_2\)', '+', '', '', '@AlbImportEmis\(x_4\)', '', '', '\(\leq\)', '$CarbonEmisMega']
       ],
  caption => 'Problem Setup',
  align => 'r X r p{2cm} r p{1cm} r p{2cm} r p{2cm} r p{2cm} r p{2cm} r p{2cm} r p{2cm} r p{2cm} r p{1cm} r p{2cm} r p{2cm}',
);
\}

$PAR
Determine the appropriate generation mix. (Give your answer to 2 decimal place)
$PAR

Hydro: \{ ans_rule(5) \} PJ
$PAR
Natural Gas: \{ ans_rule(5) \} PJ
$PAR
Renewables: \{ ans_rule(5) \} PJ
$PAR
Albertan Imports: \{ ans_rule(5) \} PJ
$PAR
Exports: \{ ans_rule(5) \} PJ
$PAR
Total Cost: M$ \{ ans_rule(5) \}
$PAR
END_TEXT

ANS(num_cmp(@finalvalues[0]));
ANS(num_cmp(@finalvalues[1]));
ANS(num_cmp(@finalvalues[2]));
ANS(num_cmp(@finalvalues[3]));
ANS(num_cmp(@finalvalues[4]));
ANS(num_cmp(@finalcost));

#########################################################


$HydroValue = sprintf("%0.2f", @finalvalues[0]);
$NaturalGasValue = sprintf("%0.2f", @finalvalues[1]);
$RenewablesValue = sprintf("%0.2f", @finalvalues[2]);
$AlbertanImportsValue = sprintf("%0.2f", @finalvalues[3]);
$ExportsValue = sprintf("%0.2f", @finalvalues[4]);
$FinalCost = sprintf("%0.2f", @finalcost); 


BEGIN_SOLUTION
Hydro: $HydroValue PJ
$PAR
Natural Gas: $NaturalGasValue PJ
$PAR
Renewables: $RenewablesValue PJ
$PAR
Albertan Imports: $AlbertanImportsValue PJ
$PAR
Exports: $ExportsValue PJ
$PAR
Total Cost: M$ $FinalCost 
END_SOLUTION

ENDDOCUMENT();       

 
       
