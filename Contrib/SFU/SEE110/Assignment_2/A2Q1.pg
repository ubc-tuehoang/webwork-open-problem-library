# DESCRIPTION
# Find per capita energy use and emissions
# ENDDESCRIPTION

## DBsubject(Sustainable Energy Engineering)
## DBchapter(Energy System)
## DBsection(Energy Demand)
## Level(5)
## KEYWORDS('energy', 'demand', 'emissions')
## Institution(Simon Fraser University)
## Author(Taco Niet and Trevor Barnes)
## Resources()

# This work is licensed under
# Creative Commons Attribution 4.0 International 
# CC-BY-4.0 (https://creativecommons.org/licenses/by/4.0/)

##########################################
# Initialization 
##########################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "PGcourse.pl",
  "scaffold.pl"
);

TEXT(beginproblem());

Context("Numeric");
Context()->flags->set(tolerance => .02);

##########################################
# Problem Setup 
##########################################

$energy = Real(1882.10); #PJ
$population = Real(38.32); #million
$energyPerCapitaGJ = sprintf("%0.2f",$energy/$population);
$energyPerCapitaMWh = sprintf("%0.2f",$energy*1000/3600/$population);
$energyPerCapitaWh = sprintf("%0.2f",$energyPerCapitaMWh/8760*1000*1000);
$energyPerCapitakJ = sprintf("%0.2f",$energyPerCapitaGJ/8760*1000*1000);
$emissionRate = random(450,500,2); #g CO2/kWh
$emissionPerCapita = sprintf("%0.2f",$emissionRate/1000/1000*1000*$energyPerCapitaMWh); #T
$carbonTax2020 = Real(30); #$/T
$taxPerCapita = sprintf("%0.2f",$emissionPerCapita*$carbonTax2020); #$
$percentReduction = random(40,60,2);
$emissions2030 = sprintf("%0.2f",$energy/3600*1000*$emissionRate/1000/1000*1000*1000*1000/1000000*(1-$percentReduction/100)); #MT
$carbonTax = random(40,80,5); #$/T
$taxes2030 = sprintf("%0.2f",$emissions2030*$carbonTax); #M$
$DOLLARSIGN = '\$';

##########################################
# Problem Statement  
##########################################

Scaffold::Begin(
);

BEGIN_TEXT
$PAR
Canada's total electricity demand in 2020 was $energy \(\text{PJ}\) 
\{htmlLink( "https://apps.cer-rec.gc.ca/ftrppndc/dflt.aspx?GoCTemplateCulture=en-CA", "(Reference)" ) \}, 
distributed across a population of $population million people.  
\{htmlLink( "https://www150.statcan.gc.ca/n1/pub/71-607-x/71-607-x2018005-eng.htm", "(Reference)" ) \}
$PAR
END_TEXT

##########################################
# Problem One  
##########################################

Section::Begin("Part 1: Yearly Energy Consumption",
    is_open => "always",);

BEGIN_PGML

What is the *yearly* energy demand per capita in Canada? 

[__________]{$energyPerCapitaMWh}[`\text{MWh}`]

[__________]{$energyPerCapitaGJ}[`\text{GJ}`]

END_PGML

BEGIN_PGML_SOLUTION

[``[$energy]\text{ PJ} \cdot 
\frac{\text{1 hr}}{\text{3600 sec}} \cdot 
\frac{\text{1}}{[$population]\text{ M People}} \cdot 
\frac{\text{1000 TWh}}{\text{1 PWh}} \cdot 
\frac{\text{1000 GWh}}{\text{1 TWh}} \cdot 
\frac{\text{1000 MWh}}{\text{1 GWh}} = 
[$energyPerCapitaMWh]\text{ MWh}``]

[``[$energy]\text{ PJ} \cdot 
\frac{\text{1}}{[$population]\text{ M People}} \cdot 
\frac{\text{1000 TJ}}{\text{1 PJ}} \cdot 
\frac{\text{1000 GJ}}{\text{1 TJ}} = 
[$energyPerCapitaGJ]\text{ GJ}``]

END_PGML_SOLUTION
Section::End();

##########################################
# Problem Two  
##########################################

Section::Begin("Part 2: Hourly Energy Consumption",
    can_open => "when_previous_correct",);

BEGIN_PGML

What is the *hourly* energy demand per capita in Canada? 

[__________]{$energyPerCapitaWh}[`\text{Wh}`]

END_PGML

BEGIN_PGML_SOLUTION

[``[$energyPerCapitaMWh]\text{ MWh} \cdot 
\frac{\text{1 year}}{\text{8760 hrs}} \cdot 
\frac{\text{1000 kWh}}{\text{1 MWh}} \cdot 
\frac{\text{1000 Wh}}{\text{1 kWh}} = 
[$energyPerCapitaWh]\text{ Wh}``]

END_PGML_SOLUTION
Section::End();

##########################################
# Problem Three  
##########################################

Section::Begin("Part 3: Per Capita Emissions",
    can_open => "when_previous_correct",);

BEGIN_PGML

If the average emission rate to generate electricity is [$emissionRate]
[`\frac{\text{g CO2}}{\text{kWh}}`], how much CO2 does each Canadian 
generate a year?

[__________]{$emissionPerCapita}[`\text{Tonnes}`]

The 2020 Canadian Carbon Tax was [$carbonTax2020]
[`\frac{[$DOLLARSIGN]}{\text{Tonne}}`], how much did each Canadian pay in 
taxes to generate their electricity? 

*$* [__________]{$taxPerCapita}

END_PGML

BEGIN_PGML_SOLUTION

[``[$emissionRate]\frac{\text{g CO2}}{\text{kWh}} \cdot 
\frac{\text{1 g}}{\text{1000 kg}} \cdot 
\frac{\text{1 T}}{\text{1000 kg}} \cdot 
\frac{\text{1000 kWh}}{\text{1 MWh}} \cdot 
\frac{[$energyPerCapitaMWh]\text{ MWh}}{\text{Person}} = 
[$emissionPerCapita]\text{Tonnes}``]

[``[$emissionPerCapita]\text{Tonnes} \cdot 
\frac{[$DOLLARSIGN][$carbonTax2020]}{\text{Tonne}} = 
[$DOLLARSIGN][$taxPerCapita]``]

END_PGML_SOLUTION
Section::End();

##########################################
# Problem Four  
##########################################

Section::Begin("Part 4: Emission Reductions",
    can_open => "when_previous_correct",);

BEGIN_PGML

If in 2030 the Canadian government wants to reduce CO2 emissions by 
[$percentReduction]% from 2020 levels, what would Canada's CO2 emissions to 
generate electricity be in 2030?

[__________]{$emissions2030}[`\text{Million Tonnes}`]

How much would Canada pay in taxes if the 2030 carbon tax is [$carbonTax]
[`\frac{[$DOLLARSIGN]}{\text{Tonne}}`]?

[__________]{$taxes2030}[`\text{M}`]$

END_PGML

BEGIN_PGML_SOLUTION

[``[$energy]\text{ PJ} \cdot 
\frac{\text{1 hr}}{\text{3600 sec}} \cdot 
\frac{\text{1000 TWh}}{\text{1 PWh}} \cdot 
\frac{[$emissionRate]\text{ g CO2}}{\text{kWh}} \cdot 
\frac{\text{1000 kWh}}{\text{1 MWh}} \cdot 
\frac{\text{1000 MWh}}{\text{1 GWh}} \cdot 
\frac{\text{1000 GWh}}{\text{1 TWh}} \cdot 
\frac{\text{1 kg}}{\text{1000 g}} \cdot 
\frac{\text{1 T}}{\text{1000 kg}} \cdot 
\frac{\text{1 MT}}{\text{1,000,000 Tonne}} \cdot 
(100%-[$percentReduction]%) = 
[$emissions2030]\text{ MT}``]

[``[$emissions2030]\text{ MT} \cdot 
\frac{[$DOLLARSIGN][$carbonTax]}{\text{Tonne}} = 
[$taxes2030]\text{ M}[$DOLLARSIGN]``]

END_PGML_SOLUTION
Section::End();

###########################################

Scaffold::End();
ENDDOCUMENT();