## BEGIN_DESCRIPTION
## Chi-squared confidence intervals
## END_DESCRIPTION
##
##############################################
## DBsubject(Statistics)
## DBchapter(Confidence intervals)
## DBsection(Variance)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(3)
## Language(en)
## MO(1)
## Static(0)
## KEYWORDS('R', 'confidence interval', 'sample standard deviation', 'chi-squared test')
###############################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextArbitraryString.pl",
   "RserveClient.pl",
   "PGcourse.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

COMMENT('Requires integrated R server (Rserve.pm)');

#  Setup
Context("Numeric");


$Rframe = MODES(
 HTML=>
  "<iframe width='90%' height='400' src='https://rdrr.io/snippets/embed/?code=' frameborder='0'></iframe>", 
 TeX=>
  "Embedded R window."
);

$sdev = random(6,20,1);
$n    = random(5,40,1);
$nm   = $n-1;
$a    = random(.005,.05,.005);  
$b    = 1-$a;
$p    = 100 - $a*200;


Context("ArbitraryString");

$L = String("$sdev*sqrt($nm/qchisq($b,$nm))");
$R = String("$sdev*sqrt($nm/qchisq($a,$nm))");

Context("Numeric");

#  Text
Context()->texStrings;
BEGIN_TEXT
$BITALIC
For the problems below, you may either enter a numeric answer 
(accurate to 3 significant digits), or the R code
which generates the answer. $BR $SPACE (Your answer will be checked by R.)
$EITALIC

$PAR $HR $PAR

A normal random variable is sampled \($n\) times yielding 
sample standard deviation \(s = $sdev\).
$PAR

Give the \($p \%\) confidence interval for \(\sigma\).
$BR
\(\quad \Bigl( \)
   \{ans_rule(30)\} 
\(,\ \)
   \{ans_rule(30)\} 
\(\Bigr) \)

$PAR

$PAR
$HR
$PAR
You may use the embedded R window below to check your code and perform computations.$BR
${BCENTER}
$Rframe
${ECENTER}
$PAR
Recall that if \(X\sim \chi^2(n)\) 
("Chi-squared with \(n\) degrees of freedom")
then the critical values of \(X\) are computed in R by the command:
$BR 
\(\qquad \chi_\alpha \  =\!= \   \) 
    ${BTT}qchisq\(\bigl(\alpha,n\bigr)\)${ETT}
$BR
For example 
$BR $SPACE $SPACE $SPACE ${BTT}qchisq\((.05,\;9)\)${ETT} $SPACE $SPACE $SPACE 
computes the critical value \(\chi_{5\%}\) where 
\(\mathrm{P}\bigl(X < \chi_{5\%}\bigr) =\!= 5\%\),
and \(X\) has 9 degrees of freedom.


END_TEXT

Context()->normalStrings;

#  Answers

$Rchecker = sub {
  my ($c, $s, $ansHash) = @_;
  my $c_ans = Real(rserve_eval($c->value));
  if (($s->value =~ tr/(//) != ($s->value =~ tr/)//)) {
    Value->Error("Missing parenthesis!");
  } 
  my @s_ans = rserve_eval($s->value);
  my $m_ans = Real(rserve_eval(String($ansHash->{m})));;
  if (String($s_ans[0]) == String("NaN")) {
    Value->Error("R code does not return a number!");
  }
  $s_ans = Real($s_ans[0]);
  if ( abs($m_ans - $s_ans) < .005*abs($m_ans) ) {
    Value->Error("Endpoints are reversed!");
  }
  if (abs($c_ans) > .001) {
    return ( (abs($c_ans - $s_ans) < .005*abs($c_ans)) ? 1 : 0);
  } else {
    return ( (abs($c_ans - $s_ans) < .001) ? 1 : 0);
  }
};

ANS($L->cmp(checker=>$Rchecker, m=>$R));
ANS($R->cmp(checker=>$Rchecker, m=>$L));


ENDDOCUMENT();
