## BEGIN_DESCRIPTION
## Computing P(a<Z<b) for normal distribution with graphs given.
## END_DESCRIPTION
##
##############################################
## DBsubject(Probability)
## DBchapter(Continuous distributions)
## DBsection(Gaussian normal)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(2)
## Language(en)
## MO(1)
## Static(0)
## KEYWORDS('R', 'normal distribution')
###############################################

DOCUMENT();

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextArbitraryString.pl",
   "RserveClient.pl",
   "PGcourse.pl",
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

COMMENT('Requires integrated R server (Rserve.pm)');

#  Setup
Context("Numeric");

$context = Context("Numeric");
$context->strings->{patterns}{'^.*$'} = [-20,'str'];
$context->update;

rserve_start();

$Rframe1 = MODES(
 HTML=>
  "<iframe width='90%' height='400' src='https://rdrr.io/snippets/embed/?code=' frameborder='0'></iframe>", 
 TeX=>
  "Embedded R window."
);
$Rframe2 = MODES(
 HTML=>
  "<iframe width='90%' height='200' src='http://www.compileonline.com/execute_r_online.php' frameborder='0'></iframe>", 
 TeX=>
  "Embedded R window."
);

$mu = non_zero_random(-2,2,1);
$var = random(1,4,1);

@i = (random(0,1),random(0,1),random(0,1),random(0,1),random(0,1));

@ineq = (" \ge ", " \le ");

@x = ([random($mu-2*$var,$mu,   .2), random($mu,   $mu+2*$var,.2)],
      [random($mu-2*$var,$mu-.4,.2), random($mu+.4,$mu+2*$var,.2)],
       random(.4, 2*$var, .2));

@p = (random(.05,.95,.05), random(.05,.45,.05)); 

Context("ArbitraryString");

@A = ([String("1-pnorm($x[0][0],$mu,$var)"),String("pnorm($x[0][1],$mu,$var)")],
       String("pnorm($x[1][1],$mu,$var) - pnorm($x[1][0],$mu,$var)"),
      [String("2*pnorm(-$x[2],0,$var)"),    String("2*(pnorm($x[2],0,$var) - .5)")],
      [String("qnorm(1-$p[0],$mu,$var)"),   String("qnorm($p[0],$mu,$var)")],
      [String("qnorm(1-$p[1]/2,0,$var)"),   String("qnorm(.5+$p[1]/2,0,$var)")] 
     );

@P = ();

my @plot;
my $a = $mu-3*$var;  my $b = $mu+3*$var;

$plot[0] = rserve_start_plot('png');
if ($i[0] == 1) {
 rserve_eval("cord.x<-c($a,seq($a,$x[0][1],.1),        $x[0][1])");
 rserve_eval("cord.y<-c(0,dnorm(seq($a,$x[0][1],.1),$mu,$var),0)");
} else {
 rserve_eval("cord.x<-c($x[0][0],seq($x[0][0],$b,.1),        $b)");
 rserve_eval("cord.y<-c(0,dnorm(seq($x[0][0],$b,.1),$mu,$var),0)");
}
 rserve_eval("curve(dnorm(x,$mu,$var),xlim=c($a,$b),main='',xlab='',ylab='')");
 rserve_eval("polygon(cord.x,cord.y,col='skyblue')");
$P[0] = rserve_finish_plot($plot[0]);

$plot[1] = rserve_start_plot('png');
 rserve_eval("cord.x<-c($x[1][0],seq($x[1][0],$x[1][1],.1),  $x[1][1])");
 rserve_eval("cord.y<-c(0,dnorm(seq($x[1][0],$x[1][1],.1),$mu,$var),0)");
 rserve_eval("curve(dnorm(x,$mu,$var),xlim=c($a,$b),main='',xlab='',ylab='')");
 rserve_eval("polygon(cord.x,cord.y,col='skyblue')");
$P[1] = rserve_finish_plot($plot[1]);


$plot[2] = rserve_start_plot('png');
if ($i[2] == 1) {
 rserve_eval("cord.x<-c(-$x[2]+$mu,seq(-$x[2]+$mu,$x[2]+$mu,.1),$x[2]+$mu)");
 rserve_eval("cord.y<-c(0,dnorm(seq(-$x[2]+$mu,$x[2]+$mu,.1),$mu,$var),0)");
} else {
 rserve_eval("cord.x<-c($a,seq($a,-$x[2]+$mu,.1),-$x[2]+$mu,$x[2]+$mu,seq($x[2]+$mu,$b,.1),$b)");
 rserve_eval("cord.y<-c(0,dnorm(seq($a,-$x[2]+$mu,.1),$mu,$var),0,0,dnorm(seq($x[2]+$mu,$b,.1),$mu,$var),0)");
}
 rserve_eval("curve(dnorm(x,$mu,$var),xlim=c($a,$b),main='',xlab='',ylab='')");
 rserve_eval("polygon(cord.x,cord.y,col='skyblue')");
$P[2] = rserve_finish_plot($plot[2]);


$plot[3] = rserve_start_plot('png');
 rserve_eval("x.crit<-$A[3][$i[3]]");
if ($i[3] == 1) {
 rserve_eval("cord.x<-c($a,seq($a,x.crit,.1),          x.crit)");
 rserve_eval("cord.y<-c(0,dnorm(seq($a,x.crit,.1),$mu,$var),0)");
} else {
 rserve_eval("cord.x<-c(x.crit,seq(x.crit,$b,.1),          $b)");
 rserve_eval("cord.y<-c(0,dnorm(seq(x.crit,$b,.1),$mu,$var),0)");
}
 rserve_eval("curve(dnorm(x,$mu,$var),xlim=c($a,$b),main='',xlab='',ylab='')");
 rserve_eval("polygon(cord.x,cord.y,col='skyblue')");
$P[3] = rserve_finish_plot($plot[3]);


$plot[4] = rserve_start_plot('png');
 rserve_eval("x.crit<-$A[4][$i[4]]");
if ($i[4] == 1) {
 rserve_eval("cord.x<-c(-x.crit+$mu,seq(-x.crit+$mu,x.crit+$mu,.1),x.crit+$mu)");
 rserve_eval("cord.y<-c(0,dnorm(seq(-x.crit+$mu,x.crit+$mu,.1),$mu,$var),0)");
} else {
 rserve_eval("cord.x<-c($a,seq($a,-x.crit+$mu,.1),-x.crit+$mu,x.crit+$mu,seq(x.crit+$mu,$b,.1),$b)");
 rserve_eval("cord.y<-c(0,dnorm(seq($a,-x.crit+$mu,.1),$mu,$var),0,0,dnorm(seq(x.crit+$mu,$b,.1),$mu,$var),0)");
}
 rserve_eval("curve(dnorm(x,$mu,$var),xlim=c($a,$b),main='',xlab='',ylab='')");
 rserve_eval("polygon(cord.x,cord.y,col='skyblue')");
$P[4] = rserve_finish_plot($plot[4]);




#  Text
Context()->texStrings;
BEGIN_TEXT

$SPACE $SPACE
$BITALIC
For the problems below, you may either enter a numeric answer
(accurate to 3 significant digits), or the R code
which generates the answer. $BR $SPACE (Your answer will be checked by R.)
$EITALIC

$PAR
$HR
$PAR


In the parts below, let \(X\) be a normally distributed random variable 
\(X \ \sim \ \text{Normal}(\mu = $mu,\; \sigma = $var)\).
$PAR

${BBOLD}(i)${EBOLD} $SPACE $SPACE
\(\mathrm{P}\bigl(X\; $ineq[$i[0]]\; $x[0][$i[0]]\bigr) \ =\!= \  \) 
\{$A[0][$i[0]]->ans_rule(30);\}
$BR $SPACE $SPACE $SPACE $SPACE 
\{image($P[0], height=>50, width=>150, tex_size=>300, extra_html_tags=>'Graph of probability');\}

$PAR

${BBOLD}(ii)${EBOLD} $SPACE $SPACE
\(\mathrm{P}\bigl($x[1][0]\; \le\; X\; \le\; $x[1][1]\bigr) \ =\!= \  \) 
\{$A[1]->ans_rule(30);\}
$BR $SPACE $SPACE $SPACE $SPACE 
\{image($P[1], height=>50, width=>150, tex_size=>300, extra_html_tags=>'Graph of probability');\}

$PAR

${BBOLD}(iii)${EBOLD} $SPACE $SPACE
\(\mathrm{P}\bigl( \Bigl|X-$mu\Bigr|\; $ineq[$i[2]]\; $x[2]\bigr) \ =\!= \  \) 
\{$A[2][$i[2]]->ans_rule(30);\}
$BR $SPACE $SPACE $SPACE $SPACE 
\{image($P[2], height=>50, width=>150, tex_size=>300, extra_html_tags=>'Graph of probability');\}
$BR $SPACE $SPACE
${BITALIC}\(\Bigl(\)Experts will use symmetry and \((X-\mu)\sim\text{Normal}(0,\;\sigma)\) $SPACE \(\Bigr)\)${EITALIC}

$PAR
$HR
$PAR

${BBOLD}(iv)${EBOLD} $SPACE $SPACE
The critical \(x\) value so that 
\(\mathrm{P}\bigl( X $ineq[$i[3]] x\bigr) \ =\!= \  $p[0]\) 
$BR $SPACE $SPACE $SPACE $SPACE 
\{image($P[3], height=>50, width=>150, tex_size=>300, extra_html_tags=>'Graph of probability');\}
$SPACE $SPACE  \(x = \)  
\{$A[3][$i[3]]->ans_rule(30);\}

$PAR

${BBOLD}(v)${EBOLD} $SPACE $SPACE
The critical \(x\) value so that 
\(\mathrm{P}\bigl( \Bigl|X-$mu\Bigr| $ineq[$i[4]] x\bigr) \ =\!= \  $p[1]\) 
$BR $SPACE $SPACE $SPACE $SPACE 
\{image($P[4], height=>50, width=>150, tex_size=>300, extra_html_tags=>'Graph of probability');\}
$SPACE $SPACE  \(x = \)  
\{$A[4][$i[4]]->ans_rule(30);\}
$BR $SPACE $SPACE
${BITALIC}\(\Bigl(\)Hint:  Use symmetry!  Also note that \((X-\mu)\sim\text{Normal}(0,\;\sigma)\) $SPACE \(\Bigr)\)${EITALIC}


$PAR
$HR
$PAR

You may use the embedded R window below to check your code and perform computations.$BR
${BCENTER}
$Rframe1
${ECENTER}

Recall that if \(X\sim \mathrm{Normal}(\mu,\sigma)\) then the cdf and critical values of \(X\) are
computed in R by the commands:
$BR $SPACE $SPACE
${BBOLD}${BTT}pnorm(x, \(\mu\), \(\sigma\))${ETT}${EBOLD}
     \( \ =\!= \ \mathrm{P}(X\le x) \)
$BR $SPACE $SPACE
${BBOLD}${BTT}qnorm(p, \(\mu\), \(\sigma\))${ETT}${EBOLD}
    \( \ =\!= \ \Bigl(\text{critical } x_p
                      \text{ so that }\mathrm{P}(X\le x_p) = p \Bigr) \)
$PAR
For example
    $BR $SPACE $SPACE 
${BBOLD}${BTT}pnorm(2, 0, 1)${ETT}${EBOLD} 
    $SPACE \(\hspace{.8cm}\)
computes \(\mathrm{P}(X\le 2)\) for \(X \ \sim \ \mathrm{Normal}(0,1)\).
    $BR $SPACE $SPACE
${BBOLD}${BTT}qnorm(.05, 0, 1)${ETT}${EBOLD} 
    $SPACE \(\hspace{.45cm}\)
computes the critical \(x\) value where \(\mathrm{P}(X\le x) = 0.05\).
    $BR $SPACE $SPACE
${BBOLD}${BTT}qnorm(1-.05, 0, 1)${ETT}${EBOLD} 
    $SPACE $SPACE
computes the critical \(x\) value where \(\mathrm{P}(X\; \pmb{\ge}\; x) = 0.05\). 
    $BR \(\hspace{7.65cm}\) 
(at this value \(\mathrm{P}(X\; \pmb{\le}\; x) = 1-0.05\))


END_TEXT

Context()->normalStrings;

#  Answers


$Rchecker = sub {
  my ($c, $s, $ansHash) = @_;
  my $c_ans = Real(rserve_eval($c->value));
  if (($s->value =~ tr/(//) != ($s->value =~ tr/)//)) {
    Value->Error("Missing parenthesis!");
  } 
  my @s_ans = rserve_eval($s->value);
  if (String($s_ans[0]) == String("NaN")) {
    Value->Error("R code does not return a number!");
  }
  $s_ans = Real($s_ans[0]);
  if (abs($c_ans) > .001) {
    return ( (abs($c_ans - $s_ans) < .005*abs($c_ans)) ? 1 : 0);
  } else {
    return ( (abs($c_ans - $s_ans) < .001) ? 1 : 0);
  }
};

ANS($A[0][$i[0]]->cmp(checker=>$Rchecker,format=>rserve_eval(%s)));
ANS($A[1]->cmp(checker=>$Rchecker));
ANS($A[2][$i[2]]->cmp(checker=>$Rchecker));
ANS($A[3][$i[3]]->cmp(checker=>$Rchecker));
ANS($A[4][$i[4]]->cmp(checker=>$Rchecker));




ENDDOCUMENT();
