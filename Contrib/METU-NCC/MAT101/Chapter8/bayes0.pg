## BEGIN_DESCRIPTION
##  Select definitions of test terms
## END_DESCRIPTION
##
##############################################
## DBsubject(Probability)
## DBchapter(Sample Space)
## DBsection(Bayes theorem -- inverse probability)
## Author(Benjamin Walter)
## Institution(METU-NCC)
## Language(en)
## MO(1)
## Static(0)
## Level(4)
## KEYWORDS('Bayes', 'False Positive', 'Test')
###############################################

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGcourse.pl",
"parserPopUp.pl",
"MathObjects.pl",
);

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  @out;
};

TEXT(beginproblem());

Context("Numeric");

my @Qlist = ("",
  "Prior probability of event happening",
  "Prior probability of event not happening",
  "Probability of positive test result",
  "Probability of negative test result",
  "Posterior probability of event happening if test result is positive",
  "Posterior probability of event happening if test result is negative",
  "Posterior probability of event not happening if test result is positive",
  "Posterior probability of event not happening if test result is negative",
  "False positive rate",
  "False negative rate",
  "True positive rate",
  "True negative rate"); 
my @Alist = (["?",
  "Yes","No","Test ⊕","Test ⊖",
  "Yes | Test ⊕","Yes | Test ⊖","No | Test ⊕","No | Test ⊖",
  "Test ⊕ | No","Test ⊖ | Yes","Test ⊕ | Yes","Test ⊖ | No"]);

my @choice = (random(1,2),random(3,4),random(5,6),random(7,8),random(9,10),random(11,12));

@choice = @choice[pick($#choice+1,(0..$#choice))];

@Q = @Qlist[@choice]; 

@A =  map { PopUp(@Alist, $_) } @{$Alist[0]}[@choice];


@INDEX = ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q");


Context()->texStrings;
BEGIN_TEXT

Identify the following rates and probabilities.

END_TEXT
for ($i=0;$i<=$#Q;$i++) {
BEGIN_TEXT

$PAR
$SPACE $BBOLD ($INDEX[$i]) $EBOLD $SPACE $SPACE
\(P\Bigl(\)\{$A[$i]->menu()\}\(\Bigr) = \) $Q[$i] 

END_TEXT
}

Context()->normalStrings;

foreach my $i (0..$#A) {
  ANS($A[$i]->cmp() );
}

ENDDOCUMENT();        # This should be the last executable line in the problem.
