## BEGIN_DESCRIPTION
##  3 paired linear substitution problems (deriv and integral)
## END_DESCRIPTION
##
##############################################
## DBsubject(Calculus - single variable)
## DBchapter(Techniques of integration)
## DBsection(Substitution (without trigonometric functions))
## Institution(METU-NCC)
## Author(Benjamin Walter)
## MO(1)
## Static(0)
## Level(2)
## Language(en)
###############################################



DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"MathObjects.pl",
"niceTables.pl",
"contextFraction.pl"
);

TEXT(beginproblem());

Context("Numeric");
Context()->variables->are(x=>'Real',C=>'Real',c=>'Real');


###########
#
# Dchecker checks answers by computing derivative
#
#  cmp( checker=>$Dchecker, deriv=>$f )
#
$Dchecker = sub {  
  my ($c, $s, $ansHash) = @_;
  my $deriv = $ansHash->{deriv};
  $ansHash->{prev_ans}='';

  $s = Formula($s);

  if (!($s->usesOneOf("c","C"))) {
    Value->Error("Don't forget the  + C !!!");
    return 0;
  }

  return ($deriv == $s->D('x'));
};


Context("Fraction");
Context()->variables->are(x=>'Real',C=>'Real',c=>'Real');


my @c; my @p; my $u; 


# f1 = (linear)^n 
# f2 = sqrt[q](linear) 
# f3 = 1/(linear)^n

#
 do { foreach my $i (0..1) { $c[$i] = random(-1,1,2)*random(2,8); } } 
 until (($c[0]!=$c[1]) && (!(($c[0]<0) && ($c[1]<0))));
 $u  = Formula("($c[0]*x+$c[1])")->reduce;
#
$p[0] = random(2,8);
$f1 = Formula("($u)^($p[0])")->reduce;
$df1 = Formula("$p[0]*$c[0]*($u)^($p[0]-1)")->reduce;
$int1= Formula("1/($c[0]*($p[0]+1)) * ($u)^($p[0]+1) ")->reduce;


#
 do { foreach my $i (0..1) { $c[$i] = random(-1,1,2)*random(2,8); } } 
 until (($c[0]!=$c[1]) && (!(($c[0]<0) && ($c[1]<0))));
 $u  = Formula("($c[0]*x+$c[1])")->reduce;
 $u->{limits} = ($c[0]>0) ? [(1-$c[1])/$c[0], 3+(1-$c[1])/$c[0]]
                          : [-3-(1+$c[1])/$c[0], -(1+$c[1])/$c[0]];
#
$p[0] = random(2,8);
$f2 = Formula("($u)^(1/$p[0])")->reduce;
$f2->{limits}  = $u->{limits};

my $pow = (1-$p[0])/($p[0]);
$df2  = Formula("($c[0]/$p[0])*($u)^($pow)");
$df2->{limits} = $u->{limits};

$int2 = Formula("($p[0]/($c[0]*($p[0]+1)))*($u)^(1+1/$p[0])")->reduce;
if ($p[0]==2) { $p[0]=""; }
$f2_t = $u->TeX;  $f2_t = "\sqrt[$p[0]]{$f2_t}";  

#
 do { foreach my $i (0..1) { $c[$i] = random(-1,1,2)*random(2,8); } } 
 until (($c[0]!=$c[1]) && (!(($c[0]<0) && ($c[1]<0))));
 $u  = Formula("($c[0]*x+$c[1])")->reduce;
 $u->{limits} = [(1-$c[1])/$c[0],(1-$c[1])/$c[0]+3];
#
$p[0] = random(2,8);
$f3 = Formula("1/($u)^($p[0])")->reduce;
$df3  = Formula("-$p[0]*$c[0]*1/($u)^($p[0]+1)")->reduce; 
$f3->{limits}  = $u->{limits};
$df3->{limits} = $u->{limits};
$int3 = Formula("1/($c[0]*(1-$p[0]))*1/($u)^($p[0]-1)")->reduce; 

Context()->texStrings;

BEGIN_TEXT

Compute derivatives and anti-derivatives of the following 
(using linear substitution).
$PAR

$BBOLD A.$EBOLD 
\(\quad\displaystyle f(x) = $f1\) 
\{
LayoutTable([[
['\(\displaystyle \frac{d}{dx}\Bigl[ $f1 \Bigr] =\ \)' . ans_rule(15)],
['\(\displaystyle \int\; $f1\;dx  =\ \)' . ans_rule(18) ]]],
tablecss=>"width:90%;",datacss=>"width:45%;",align=>"ll",center=>0,midrules=>0);
\}

$PAR

$BBOLD B.$EBOLD 
\(\quad\displaystyle f(x) = $f2_t\) 
\{
LayoutTable([[
['\(\displaystyle \frac{d}{dx}\Bigl[ $f2_t \Bigr] =\ \)' . ans_rule(15)],
['\(\displaystyle \int\; $f2_t\;dx  =\ \)' . ans_rule(18) ]]],
tablecss=>"width:90%;",datacss=>"width:45%;",align=>"ll",center=>0,midrules=>0);
\}


$PAR


$BBOLD C.$EBOLD 
\(\quad\displaystyle f(x) = $f3\) 
\{
LayoutTable([[
['\(\displaystyle \frac{d}{dx}\Biggl[ $f3 \Biggr] =\ \)' . ans_rule(15)],
['\(\displaystyle \int\; $f3\;dx  =\ \)' . ans_rule(18) ]]],
tablecss=>"width:90%;",datacss=>"width:45%;",align=>"ll",center=>0,midrules=>0);
\}


END_TEXT
Context()->normalStrings;
Context()->variables->are(x=>'Real',C=>'Real',c=>'Real');

my $C = Formula("C");
my $int_cmp; 

ANS( $df1->inContext(Context("Numeric"))->cmp() ); 
 $int_cmp = ($int1+$C)->cmp(checker=>$Dchecker,deriv=>$f1);
 pop(@{$int_cmp->{post_filters}});
 ANS( $int_cmp );

ANS( $df2->inContext(Context("Numeric"))->cmp() );
 $int_cmp = ($int2+$C)->cmp(checker=>$Dchecker,deriv=>$f2);
 pop(@{$int_cmp->{post_filters}});
 ANS( $int_cmp );

ANS( $df3->inContext(Context("Numeric"))->cmp() ); 
 $int_cmp = ($int3+$C)->cmp(checker=>$Dchecker,deriv=>$f3);
 pop(@{$int_cmp->{post_filters}});
 ANS( $int_cmp );


ENDDOCUMENT();        # This should be the last executable line in the problem.
