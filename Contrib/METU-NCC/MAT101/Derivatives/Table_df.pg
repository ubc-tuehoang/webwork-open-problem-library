## BEGIN_DESCRIPTION
##  Complete sign table for f' and draw conclusions
## END_DESCRIPTION
##
##############################################
## DBsubject(Calculus - single variable)
## DBchapter(Applications of differentiation)
## DBsection(Global extrema)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## MO(1)
## Static(0)
## Level(2)
## Language(en)
###############################################



DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"MathObjects.pl",
"parserPopUp.pl",
"niceTables.pl"
);

TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');

$dne = "~~x{2205}";
#$dne = "X";
$inc = "~~x{2571}";  $dec = "~~x{2572}";
#$inc = "inc";  $dec = "dec";
$max = "max"; $min = "min"; $not = "X";

@popPN = (PopUp([" ","+","-"],"+"), 
          PopUp([" ","+","-"],"-")); 
@popD  = (PopUp([" ","$inc","$dec"],"$inc"),
          PopUp([" ","$inc","$dec"],"$dec"));
@popZer =(PopUp([" ","0","$dne"],"0"), 
          PopUp([" ","0","$dne"],"$dne"));
@popM  = (PopUp([" ","$max","$min","$not"],"$max"),
          PopUp([" ","$max","$min","$not"],"$min"),
          PopUp([" ","$max","$min","$not"],"$not"));

@c = ([non_zero_random(-3,3),non_zero_random(-3,3)],
      [non_zero_random(-3,3),non_zero_random( 1,3)]);

my @S;
$S[0] = non_zero_random(-1,1);
$S[1] = ($S[0]==1) ? -1 : 1;

@f = (Formula("$S[0]*3*x^4 - $S[0]*4*$c[0][0]*x^3 + $c[0][1]")->reduce,
      Formula("($S[1]*x^2 + $c[1][0]*x + $S[1]*$c[1][1]**2)/x")->reduce);

@c = ([PGsort(sub{$_[0] < $_[1]}, ($c[0][0],0))],
      [-$c[1][1], 0, $c[1][1]]);

$s[0][2] = ($S[0]==1) ? 0 : 1;
$s[1][3] = ($S[1]==1) ? 0 : 1;
foreach my $i (1..2) {
  $s[0][2-$i] = ($c[0][2-$i]!=0) ? ($s[0][3-$i]+1)%2 :  $s[0][3-$i];
  $s[1][3-$i] = ($c[1][3-$i]!=0) ? ($s[1][4-$i]+1)%2 :  $s[1][4-$i];
}
$s[1][0] = ($c[1][0]!=0) ? ($s[1][1]+1)%2 : $s[1][1];


foreach my $i (0..2) {
  $pop_df[0][$i] = $popPN[$s[0][$i]];
   $pop_f[0][$i] =  $popD[$s[0][$i]];
  $pop_df[1][$i] = $popPN[$s[1][$i]];
   $pop_f[1][$i] =  $popD[$s[1][$i]];
}
$pop_df[1][3] = $popPN[$s[1][3]];
 $pop_f[1][3] =  $popD[$s[1][3]];

foreach my $i (0..1) {
  $pop_dz[0][$i] = $popZer[0];
  $pop_fz[0][$i] = ($c[0][$i]==0) ? $popM[2] : $popM[$s[0][$i]];
  $pop_dz[1][$i] = ($c[1][$i]!=0) ? $popZer[0] : $popZer[1]; 
  $pop_fz[1][$i] = ($c[1][$i]!=0) ? $popM[$s[1][$i]] : $popM[2];
}
$pop_dz[1][2] = ($c[1][2]!=0) ? $popZer[0] : $popZer[1]; 
$pop_fz[1][2] = ($c[1][2]!=0) ? $popM[$s[1][2]] : $popM[2];


$br = "border-right: 3px solid;";
$bb = "border-bottom: 3px solid; height: 2px;";
$ht = "height:4px;";

Context()->texStrings;
BEGIN_TEXT

Fill in the sign tables for the functions below.
$PAR
$BBOLD (A) $EBOLD \(\displaystyle \ \ f(x) = $f[0]\).

$PAR
\{DataTable(
[
  ["\(x\)","",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"" ],
  [ ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb] ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(f'\)",$pop_df[0][0]->menu(),[$pop_dz[0][0]->menu(),colspan=>2],
            $pop_df[0][1]->menu(),[$pop_dz[0][1]->menu(),colspan=>2],
	    $pop_df[0][2]->menu() ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(f\)",$pop_f[0][0]->menu(),[$pop_fz[0][0]->menu(),colspan=>2],
           $pop_f[0][1]->menu(),[$pop_fz[0][1]->menu(),colspan=>2],
	   $pop_f[0][2]->menu() ],
], 'align =>ccc|ccc|cc', midrules=>1
);\}
$PAR
$BBOLD (B) $EBOLD \(\displaystyle \ \ f(x) = $f[1]\).
\{DataTable(
[
  ["\(x\)","",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"" ],
  [ ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb] ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(f'\)",$pop_df[1][0]->menu(),[$pop_dz[1][0]->menu(),colspan=>2],
            $pop_df[1][1]->menu(),[$pop_dz[1][1]->menu(),colspan=>2],
            $pop_df[1][2]->menu(),[$pop_dz[1][2]->menu(),colspan=>2],
	    $pop_df[1][3]->menu() ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(f\)",$pop_f[1][0]->menu(),[$pop_fz[1][0]->menu(),colspan=>2],
           $pop_f[1][1]->menu(),[$pop_fz[1][1]->menu(),colspan=>2],
           $pop_f[1][2]->menu(),[$pop_fz[1][2]->menu(),colspan=>2],
	   $pop_f[1][3]->menu() ],
], 'align =>ccc|ccc|cc', midrules=>1
);\}
$PAR

In the row for \(x\):
$BR\(\quad \bullet\ \) 
fill in \(x\)-values on number line where \(f'\) is zero or does not exist.
$BR
In the row for \(f'\):
$BR\(\quad \bullet\ \) 
mark ${BBOLD}intervals${EBOLD} as "\(+\)" or "\(-\)" 
  to indicate \(f'\) is ${BBOLD}positive${EBOLD} or ${BBOLD}negative${EBOLD}; and
$BR\(\quad \bullet\ \) 
mark ${BBOLD}points${EBOLD} as "\(0\)" or "${BTT}$dne${ETT}" 
  to indicate \(f'\) is ${BBOLD}zero${EBOLD} or does ${BBOLD}not exist${EBOLD}.
$BR
In the row for \(f\):
$BR\(\quad \bullet\ \) 
mark ${BBOLD}intervals${EBOLD} as "${BTT}$inc${ETT}" or "${BTT}$dec${ETT}"
  to indicate \(f\) is ${BBOLD}increasing${EBOLD} or ${BBOLD}decreasing${EBOLD}; and
$BR\(\quad \bullet\ \) 
mark ${BBOLD}points${EBOLD} as "${BTT}$max${ETT}" or "${BTT}$min${ETT}" or "${BTT}$not${ETT}" (if neither max nor min)





END_TEXT
Context()->normalStrings;

ANS( Real($c[0][0])->cmp() );
ANS( Real($c[0][1])->cmp() );

ANS( $pop_df[0][0]->cmp() ); ANS( $pop_dz[0][0]->cmp() ); 
ANS( $pop_df[0][1]->cmp() ); ANS( $pop_dz[0][1]->cmp() ); 
ANS( $pop_df[0][2]->cmp() ); 

ANS( $pop_f[0][0]->cmp() ); ANS( $pop_fz[0][0]->cmp() ); 
ANS( $pop_f[0][1]->cmp() ); ANS( $pop_fz[0][1]->cmp() ); 
ANS( $pop_f[0][2]->cmp() ); 

##########################################

ANS( Real($c[1][0])->cmp() );
ANS( Real($c[1][1])->cmp() );
ANS( Real($c[1][2])->cmp() );

ANS( $pop_df[1][0]->cmp() ); ANS( $pop_dz[1][0]->cmp() ); 
ANS( $pop_df[1][1]->cmp() ); ANS( $pop_dz[1][1]->cmp() ); 
ANS( $pop_df[1][2]->cmp() ); ANS( $pop_dz[1][2]->cmp() ); 
ANS( $pop_df[1][3]->cmp() ); 

ANS( $pop_f[1][0]->cmp() ); ANS( $pop_fz[1][0]->cmp() ); 
ANS( $pop_f[1][1]->cmp() ); ANS( $pop_fz[1][1]->cmp() ); 
ANS( $pop_f[1][2]->cmp() ); ANS( $pop_fz[1][2]->cmp() ); 
ANS( $pop_f[1][3]->cmp() ); 



ENDDOCUMENT();        # This should be the last executable line in the problem.
       
