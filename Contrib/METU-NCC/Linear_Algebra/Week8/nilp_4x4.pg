## DESCRIPTION
##  Compute nilpotency index of four matrices
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Matrices)
## DBsection(Matrix algebra)
## Date(15/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(3)
## MO(1)
## Static(0)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PG.pl",
"PGcourse.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGmatrixmacros.pl",
"parserPopUp.pl"
);

TEXT(beginproblem());

COMMENT('Nilpotency indices are 2,3,3,4 (in random order)');

sub zeroArray{
  my $n = shift;
  my @zero;
  foreach my $i (0..$n-1) {   
    foreach my $j (0 ..$n-1) {
      $zero[$i][$j] = 0; 
    }
  }
  return @zero;
};

Context('Matrix');

@p = shuffle(4); 
my @M1 = zeroArray(4);
   $M1[$p[0]][$p[1]] = 1;
   $M1[$p[2]][$p[3]] = 1;
my $M1 = Matrix(@M1);

@p = shuffle(4); 
my @M2 = zeroArray(4);
   $M2[$p[0]][$p[1]] = 1;
   $M2[$p[1]][$p[2]] = 1;
my $M2 = Matrix(@M2);

@p = shuffle(4); 
my @M3 = zeroArray(4);
   $M3[$p[0]][$p[1]] = 1;
   $M3[$p[0]][$p[2]] = 1;
   $M3[$p[1]][$p[2]] = 1;
my $M3 = Matrix(@M3);

@p = shuffle(4); 
my @M4 = zeroArray(4);
   $M4[$p[0]][$p[1]] = 1;  
   $M4[$p[1]][$p[2]] = 1;
   $M4[$p[2]][$p[3]] = 1;
my $M4 = Matrix(@M4);

@Matrix = ($M1, $M2, $M3, $M4);

my @ind = (2,3,3,4);
@index = ();
foreach my $i (0..3) {
 $index[$i] = PopUp(["index","1","2","3","4"],$ind[$i]);
}


@p = shuffle(4);

Context()->texStrings;

BEGIN_TEXT

Give the nilpotency index of the following matrices:

$PAR
$BBOLD (A) $EBOLD
\(\quad $Matrix[$p[0]] \)  
Nilpotency index = \{$index[$p[0]]->menu()\}

$PAR

$BBOLD (B) $EBOLD
\(\quad $Matrix[$p[1]] \)  
Nilpotency index = \{$index[$p[1]]->menu()\}

$PAR

$BBOLD (C) $EBOLD
\(\quad $Matrix[$p[2]] \)  
Nilpotency index = \{$index[$p[2]]->menu()\}

$PAR

$BBOLD (D) $EBOLD
\(\quad $Matrix[$p[3]] \)  
Nilpotency index = \{$index[$p[3]]->menu()\}



END_TEXT

Context()->normalStrings;

ANS( $index[$p[0]]->cmp() );
ANS( $index[$p[1]]->cmp() );
ANS( $index[$p[2]]->cmp() );
ANS( $index[$p[3]]->cmp() );


ENDDOCUMENT();        # This should be the last executable line in the problem.
