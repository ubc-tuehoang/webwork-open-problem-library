## DESCRIPTION
##  Given two generating vectors, convert span to equation
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection(Subspaces)
## Date(22/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(3)
## Static(0)
## MO(1)




##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
);


TEXT(beginproblem());

COMMENT('cross prod or nullspace');

#####################################
#  Setup

Context("Vector");
Context()->lists->set(Vector=>{open=>"(",close=>")"});

my $correct = random(1,4,1);        # number of correct answers in list

do {
 $v1 = Vector(random(-3,3,1),       # generating vectors
              random(-3,3,1),
              random(-3,3,1));
 $v2 = Vector(random(-3,3,1),
              random(-3,3,1),       # should be non-parallel
	      random(-3,3,1));      # and non-zero
} until (!(areParallel $v1 $v2) && !($v1->isZero()) && !($v2->isZero()));  

$perp = $v1 x $v2;                  # perpendicular direction 
@c = ($perp->extract(1),$perp->extract(2),$perp->extract(3));

Context("Numeric");
Context()->variables->are(x=>'Real',y=>'Real',z=>'Real');

$plane = Formula("$c[0]*x+$c[1]*y+$c[2]*z")->reduce;


#####################################
#  Main text

Context()->texStrings;
BEGIN_TEXT

Write a linear equation defining the subspace of \(\mathbb{R}^3\)
spanned by \(v_1 = $v1\) and \(v_2 = $v2\).
$PAR
\{$plane->ans_rule(10) \} \( = 0\)
$PAR
(Write your answer in the form \(ax+by+cz\). 
For example "\(2x+3y-4z\)")

END_TEXT
Context()->normalStrings;

#####################################
#  Answer evaluation

$showPartialCorrectAnswers = 0;

ANS( $plane->cmp(checker=>sub{
  my ($correct,$student,$ansHash) = @_;
  my $c = Formula($correct->value);
  my $s = Formula($student->value);    

  my @c_vect = ($c->D('x'),$c->D('y'),$c->D('z'));
  my @s_vect = ($s->D('x'),$s->D('y'),$s->D('z'));

  my $mult = ($c_vect[0] != 0) ? $s_vect[0]/$c_vect[0] : 
             ($c_vect[1] != 0) ? $s_vect[1]/$c_vect[1] :
	                         $s_vect[2]/$c_vect[2];

  return (($mult*$c_vect[0] == $s_vect[0]) && 
          ($mult*$c_vect[1] == $s_vect[1]) &&
          ($mult*$c_vect[2] == $s_vect[2]))
}) );


ENDDOCUMENT(); 
