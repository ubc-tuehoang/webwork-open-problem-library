## DESCRIPTION
##  Basis for kernel and image of T:Fun{1,2,3}-->R^4
##  --hard version--
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Linear transformations)
## DBsection(Kernel and image)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(4)
## Static(0)
## MO(1)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGcourse.pl",
"MathObjects.pl",
"MatrixCheckers.pl",
);

TEXT(beginproblem());

COMMENT('hard version');

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  if ($k>1) {
    while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  } elsif ($k==1) {
    @out = ($in[random(0,$#in)]);
  }
  @out;
}
sub gcd {
  my $a = abs(shift); my $b = abs(shift);
  ($a,$b) = ($b,$a) if $a < $b;
  return $a if $b == 0;
  my $r = $a % $b;
  while ($r != 0) {
    ($a,$b) = ($b,$r);
    $r = $a % $b;
  }
  return $b;
}



Context('Vector');
Context()->variables->are(x=>'Real');
Context()->lists->set(Vector=>{open=>"(",close=>")"});
Context()->{cmpDefaults}{Vector} = {promotePoints=>1};
Context()->noreduce('(-x)-y');

my ($a,$b,$c) = pick(3,(-4..-1,1..4));
my ($ab,$bc,$ac) = (gcd($a,$b),gcd($b,$c),gcd($a,$c));
my $abc = gcd($ab,$c)**2;

Context()->variables->add(
 f1 => ["Real",TeX=>"f(1)"],
 f2 => ["Real",TeX=>"f(2)"],
 f3 => ["Real",TeX=>"f(3)"],
 x1 => ["Real",TeX=>"\chi_1"],
 x2 => ["Real",TeX=>"\chi_2"],
 x3 => ["Real",TeX=>"\chi_3"],
);

@expr = (Formula("$a/$ab f1 + $b/$ab f2")->reduce,
         Formula("$b/$bc f2 + $c/$bc f3")->reduce,
         Formula("$a/$ac f1 - $c/$ac f3")->reduce);

my @d = pick(2,(1..3)); 
if (abs(($d[0]+$d[1])*$b) > 8) {
if (random(0,1)==1) { $d[0] = -$d[0]; }
else                { $d[1] = -$d[1]; }}
$expr[3] = Formula("$d[0]*$a/$ab f1 + ($d[0]/$ab+$d[1]/$bc)*$b f2 + $d[1]*$c/$bc f3")->reduce;

# note to self:  figure out how to do this with 'adaptive parameters'

@expr = @expr[(pick(3,(0..2)),3)];

$ker = List(Formula("$b*$c/$abc x1 - $a*$c/$abc x2 + $a*$b/$abc x3")->reduce);
$im  = List(
  Vector($expr[0]->eval(f1=>1,f2=>0,f3=>0),
         $expr[1]->eval(f1=>1,f2=>0,f3=>0), 
         $expr[2]->eval(f1=>1,f2=>0,f3=>0),
         $expr[3]->eval(f1=>1,f2=>0,f3=>0)), 
  Vector($expr[0]->eval(f1=>0,f2=>1,f3=>0),
         $expr[1]->eval(f1=>0,f2=>1,f3=>0), 
         $expr[2]->eval(f1=>0,f2=>1,f3=>0),
         $expr[3]->eval(f1=>0,f2=>1,f3=>0))
); 

Context()->texStrings;
BEGIN_TEXT
Let \(S=\lbrace 1,2,3\rbrace\) and \(T:\mathrm{Fun}(S)\to \mathbb{R}^4\) be the linear
transformation defined by 
\[
 T\bigl(f(x)\bigr) = \Bigl($expr[0],\ $expr[1],\ $expr[2],\ $expr[3]\Bigr)
\]
Find bases for \(\mathrm{Ker}(T)\) and \(\mathrm{Im}(T)\).

$PAR
\(\qquad \text{Basis of Ker}(T)  = \Bigl\lbrace\) 
  \{ ans_rule(20) \} 
\(\Bigr\rbrace\)

$PAR
\(\qquad \text{Basis of Im}(T)  = \Bigl\lbrace\) 
  \{ ans_rule(20) \} 
\(\Bigr\rbrace\)


$PAR $SPACE $SPACE $BITALIC
Enter functions using characteristic funtions, writing \(\fbox{x1}\) for \(\chi_1\)
etc.
$EITALIC


END_TEXT

Context()->normalStrings;

$listBasis = sub { 
  my ($correct,$student,$ansHash,$value) = @_;
  my @C = @{$correct};
  my @S = @{$student};

  $t = $ansHash->{text};

  if ($t eq "kernel") {
    foreach (0..$#C) {
      $C[$_] = Vector($C[$_]->eval(x1=>1,x2=>0,x3=>0),
                      $C[$_]->eval(x1=>0,x2=>1,x3=>0),
                      $C[$_]->eval(x1=>0,x2=>0,x3=>1));
    }
    foreach (0..$#S) {
      $S[$_] = Vector($S[$_]->eval(x1=>1,x2=>0,x3=>0),
                      $S[$_]->eval(x1=>0,x2=>1,x3=>0),
                      $S[$_]->eval(x1=>0,x2=>0,x3=>1));
      Value->Error("Vector not in $t!") 
         if (! $C[0]->isParallel($S[$_]));
      Value->Error("No zero vectors in basis, fool!")
         if ($S[$_]->isZero);
    }
  } else {
    foreach (0..$#C) {
      $C[$_] = Matrix($C[$_])->transpose;
    }
    foreach (0..$#S) {
      Value->Error("No variables in vectors!") 
        if (!Formula($S[$_])->isConstant);
      Value->Error("No zero vectors in basis, fool!")
         if ($S[$_]->isZero);
      $S[$_] = Matrix($S[$_])->transpose;
    }
    my $Sm = concatenate_columns_into_matrix(@S);
    my $Cm = concatenate_columns_into_matrix(@C);

    my $CTC = $Cm->transpose * $Cm;
    warn "Correct answer is a linearly dependent set." if ($CTC->det == 0);

    Value->Error("Not independent!")
       if ( ($Sm->transpose * $Sm)->det == 0); 
    
     my $X = ($CTC->inverse) * ($Cm->transpose * $Sm);

     Value->Error("Wrong span") if ($Sm != $Cm * $X);
  }

  Value->Error("Not independent!") if ($#S > $#C);

  return ($#C+1,());
};



ANS( $ker->cmp(list_checker=>$listBasis,text=>"kernel") );
ANS( $im->cmp( list_checker=>$listBasis,text=>"image") );


ENDDOCUMENT();        # This should be the last executable line in the problem.
