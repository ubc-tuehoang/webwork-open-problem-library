## DESCRIPTION
##  Select independent subsets of Fun{1,2}
##  --Easy version--
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Abstract vector spaces)
## DBsection(Linear independence)
## Date(07/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(1)
## Static(0)
## MO(1)

DOCUMENT();  

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGcourse.pl",
"MathObjects.pl"
);

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  @out;
}

TEXT(beginproblem());

COMMENT('Easy version');

Context("Vector");
Context()->lists->set(Vector=>{open=>"(",close=>")"});
Context()->variables->are(
 x1=>['Real',TeX=>"\chi_1"],
 x2=>['Real',TeX=>"\chi_2"],
 x3=>['Real',TeX=>"\chi_3"],
 x4=>['Real',TeX=>"\chi_4"]
);

my @chi = (Formula("x1"),Formula("x2"),Formula("x3"),Formula("x4"));


sub Function {
  my @v = @_;
  my $F = Formula("0");
  foreach (0..$#v) { $F = $F + Formula("$v[$_] * $chi[$_]")->reduce; }

  return $F->reduce->TeX;
};

$S = "\bigl\lbrace 1,2\bigr\rbrace";

my @indep = ();  my @not = ();   my @c;

## 1 nonzero vector

$c[0] = Function(pick(2,(-4..4))); 

push(@indep,
 "\(\Bigl\lbrace $c[0] \Bigr\rbrace\)"
);

## zero vector, zero vector + nonzero 

@c = (Vector(pick(2,(-4..4))), Vector(0,0)); 
@c = @c[pick(2,(0,1))];

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

my @not = (
 "\(\Bigl\lbrace 0 \Bigr\rbrace\)",
 "\(\Bigl\lbrace $c[0],\ $c[1] \Bigr\rbrace\)",
);

## repeated vector

@c = (Vector(pick(2,(-4..-1,1..4))));
$c[1] = $c[0];

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

push (@not, 
 "\(\Bigl\lbrace $c[0],\ $c[1] \Bigr\rbrace\)"
); 

## one vector is a multiple of another

$c[0] = Vector(pick(2,(-4..-1,1..4)));
$c[1] = (-3,-2,2,3)[random(0,3)] * $c[0];

@c = @c[pick(2,(0,1))];

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

push (@not, 
 "\(\Bigl\lbrace $c[0],\ $c[1] \Bigr\rbrace\)"
); 

## both vectors are multiple of single vector

$c[0] = Vector(pick(2,(-3..-1,1..3)));
$c[1] = random(-1,1,2)*2* $c[0];
$c[0] = random(-1,1,2)*3* $c[0];

@c = @c[pick(2,(0,1))];

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

push (@not, 
 "\(\Bigl\lbrace $c[0],\ $c[1] \Bigr\rbrace\)"
); 

## 3 vectors

foreach (0..2) { $c[$_] = Vector(pick(2,(-4..4))); }

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

push (@not, 
 "\(\Bigl\lbrace $c[0],\ $c[1],\ $c[2] \Bigr\rbrace\)"
);

## 2 vectors, indep
@c = ();

do { foreach (0..1) { $c[$_] = Vector(pick(2,(-4..4))); } }
until ( ! $c[0]->isParallel($c[1]) );

foreach (0..$#c) { $c[$_] = Function($c[$_]->value); }

push (@indep, 
 "\(\Bigl\lbrace $c[0],\ $c[1] \Bigr\rbrace\)"
); 

##


$mc = new_checkbox_multiple_choice();
$mc -> qa (
 "Let \(S = $S\).  $BR
  Select all linearly independent subsets of \(\mathrm{Fun}(S)\).",
 @indep
);
$mc -> extra(
  @not
);


Context()->texStrings;
BEGIN_TEXT

\{ $mc -> print_q() \}
\{ $mc -> print_a() \}


END_TEXT
Context()->normalStrings;

install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

ANS( checkbox_cmp( $mc->correct_ans() ) );


ENDDOCUMENT();
