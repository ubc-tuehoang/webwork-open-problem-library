## DESCRIPTION
##  Find a basis in Fun{1,2,3,4}
##   Code can also work for dim = 5, maybe?
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Abstract vector spaces)
## DBsection(Basis and dimension)
## Date(14/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(2)
## MO(1)
## Static(0)

DOCUMENT();  

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGcourse.pl",
"MathObjects.pl",
"MatrixCheckers.pl",
);

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  @out;
}

TEXT(beginproblem());

COMMENT('Coefficients and evaluation points are randomized.');

Context("Numeric");
Context()->variables->are(
 x1=>['Real',TeX=>"\chi_1"],
 x2=>['Real',TeX=>"\chi_2"],
 x3=>['Real',TeX=>"\chi_3"],
 x4=>['Real',TeX=>"\chi_4"],
 x5=>['Real',TeX=>"\chi_5"],
 f=>'Real'
);

@chi = (
  Formula("x1"),
  Formula("x2"),
  Formula("x3"),
  Formula("x4"),
  Formula("x5")
);

sub Function {
  my @v = @_;
  my $F = Formula("0");
  foreach (0..$#v) { $F = $F + Formula("$v[$_] * $chi[$_]")->reduce; }

  return $F->reduce;
};


@v = (); 
$n = 4;

$S = "1";
foreach (2..$n) { $S = $S . ",$_"; }

@x = pick(3,(1..$n));
@x[0,1] = PGsort(sub{$_[0] < $_[1]}, @x[0,1]);

do { @c = (non_zero_random(-3,3),non_zero_random(-3,3)); }
until ((($c[0]>0) || ($c[1]>0)) && (abs($c[0]) != abs($c[1])));

$expr = ($c[1]>0) ? 
 Formula("$c[0] f")->reduce->TeX . "($x[0]) + " .
 Formula("$c[1] f")->reduce->TeX . "($x[1])"          :
 Formula("$c[0] f")->reduce->TeX . "($x[0])" .
 Formula("$c[1] f")->reduce->TeX . "($x[1])"          ;

my @y = PGsort(sub{$_[0] < $_[1]}, @x);
my $i = 0;
foreach (1..$n) {
  if ($_ == $y[$i]) {
    $i += 1;
  } else {
    @tmp = ((0)x($n)); $tmp[$_-1] = 1;
    push(@v, Vector(@tmp));
  }
}
{
  my @tmp = ((0)x($n));  
  $tmp[$x[0]-1] =  $c[1];
  $tmp[$x[1]-1] = -$c[0];
  push(@v, Vector(@tmp));
}

@f = ();  foreach (0..$#v) { $f[$_] = Function($v[$_]->value); }

$listAns = List(@f);

$listBasis = sub {
  my ($correct,$student,$ansHash,$value) = @_;
  my @correct = @{$correct};
  my @student = @{$student};

 
  @Ans = ();

  foreach (0..$#student) {
    if ($correct[0]->typeMatch($student[$_])) {
      my @V = ($student[$_]->eval(x1=>1,x2=>0,x3=>0,x4=>0,x5=>0,f=>0),
               $student[$_]->eval(x1=>0,x2=>1,x3=>0,x4=>0,x5=>0,f=>0),
               $student[$_]->eval(x1=>0,x2=>0,x3=>1,x4=>0,x5=>0,f=>0),
               $student[$_]->eval(x1=>0,x2=>0,x3=>0,x4=>1,x5=>0,f=>0),
               $student[$_]->eval(x1=>0,x2=>0,x3=>0,x4=>0,x5=>1,f=>0));
      if (($V[$x[2]-1] != 0) 
       || ($c[0]*$V[$x[0]-1] + $c[1]*$V[$x[1]-1] != 0)) {
        Value->Error("One of your vectors is not in \(U\)!");
      } else {
        push(@Ans, Matrix(@V)->transpose);
      }
    } else { Value->Error("One of these doesn't look like a vector!"); }
  }

  if ($#Ans > 0) { 
    Value->Error("Not independent!") if ($#student > $#correct);
    Value->Error("Not spanning!")    if ($#student < $#correct);

    $Sm = concatenate_columns_into_matrix(@Ans);
    if ( ($Sm->transpose * $Sm)->det == 0) {
      Value->Error("Not independent!");
    }
  }

  return ($#correct + 1,());
};


Context()->texStrings;
BEGIN_TEXT

Let \(S=\lbrace $S \rbrace\) and 
\( \displaystyle 
  U = \Bigl\lbrace f\in \mathrm{Fun}(S)\ 
	  \Big|\ $expr=0,\ f($x[2])=0 \Bigr\rbrace\)
$PAR
Find a basis of \(U\).
$PAR

\(\qquad \mathrm{Basis}(U) = \Bigl\lbrace\)
  \{ans_rule(30);\}
\(\Bigr\rbrace\)

$PAR $SPACE $SPACE $BITALIC
Write your basis using characteristic functions, with 
\(\fbox{x1}\) for \(\chi_1\), and \(\fbox{x2}\) for \(\chi_2\), etc.
$EITALIC


END_TEXT
Context()->normalStrings;


ANS( $listAns->cmp(list_checker=>$listBasis) );


ENDDOCUMENT();
