## DESCRIPTION
##  Find dimension of a few simple spaces
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Abstract vector spaces)
## DBsection(Basis and dimension)
## Date(14/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(1)
## MO(1)
## Static(0)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl",
  "MathObjects.pl",
  "contextFraction.pl"
);

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  @out; 
};

TEXT(beginproblem());

COMMENT('random dimensions, random ordering');

Context("Fraction");
Context()->variables->are(x=>"Real",y=>"Real",z=>"Real",t=>"Real");
Context()->noreduce('(-x)-y');
Context()->strings->add(infinite=>{caseSensitive=>0,infinite=>1});
Context()->lists->set(Vector=>{open=>"(",close=>")"});

my @c; my @d; my @i;  

## (1)

foreach (0..3) { $c[$_] = random(1,4); }
@i = pick(random(1,2),(0..3)); @c[@i] = -@c[@i];

$expr[0] = "\(U=\Bigl\lbrace (x,y,z,t)\ \Big|\ "  .
  Formula("$c[0]x+$c[1]y+$c[2]z+$c[3]t")->reduce->TeX .
  " = 0\Bigr\rbrace\)";
$ans[0]  = Real(3);

## (2) 

  foreach (0..3) { $c[$_] = random(1,4); }
  if (random(0,1)==1) { 
    @i = pick(2,(0..3)); 
    @c[@i] = map {-$_} @c[@i];
  } else { 
    @i = (random(0,3));
    $c[$i[0]] = -$c[$i[0]];
  }

do { 
  foreach (0..3) { $d[$_] = random(1,4); }
  if (random(0,1)==1) { 
    @i = pick(2,(0..3)); 
    @d[@i] = map {-$_} @d[@i];
  } else { 
    @i = (random(0,3));
    $d[$i[0]] = -$d[$i[0]];
  }
} until !(Vector(@c)->isParallel(Vector(@d)));

$expr[1] = "\(U=\Bigl\lbrace (x,y,z,t)\ \Big|\ \begin{aligned}"  .
  Formula("$c[0]x+$c[1]y+$c[2]z+$c[3]t")->reduce->TeX . " &= 0 \\" . 
  Formula("$d[0]x+$d[1]y+$d[2]z+$d[3]t")->reduce->TeX . 
  " &= 0 \end{aligned} \Bigr\rbrace\)"; 
$ans[1]  = Real(2); 

## (3)

@c = pick(3,(0..6));

$expr[2] = "\(U=\Bigl\lbrace p(x)\in\mathcal{P}_4(\mathbb{R})\ \Big|\ " .
  ( (random(0,1)==1) ? "p($c[0]) = p($c[1]) - p($c[2])" 
                     : "p($c[0]) - p($c[1]) = p($c[2])" ) 
  . " = 0\Bigr\rbrace\)";
$ans[2]  = Real(3);

## (4)

@c = PGsort(sub{$_[0] < $_[1]}, pick(3,(-3..5)));

$expr[3] = "All continuous functions whose domain is " . 
  ( (random(0,1)==1) ? "\( [$c[0],$c[1]) \cup \lbrace $c[2]\rbrace\)."
                     : "\( \lbrace $c[0] \rbrace \cup [$c[1],$c[2])\)." ); 
$ans[3] = String("infinity");

## (5)

@c = (random(20,98,2)) ;

$expr[4] = "All functions whose domain is \(\lbrace 0,2,4,6,\ldots,$c[0]\rbrace\).";
$ans[4]  = Real($c[0]/2+1);

## (6)
@c = PGsort(sub{$_[0] < $_[1]}, pick(2,(-3..5)));

@i = (random(0,3));
if    ($i[0]==0) { $expr[5] = "\( [$c[0],$c[1])\).";}
elsif ($i[0]==1) { $expr[5] = "\( ($c[0],$c[1]]\).";}
elsif ($i[0]==2) { $expr[5] = "\( [$c[0],$c[1]]\).";}
else             { $expr[5] = "\( ($c[0],$c[1])\).";} 

$expr[5] = "All differentiable functions whose domain is $expr[5]";
$ans[5] = String("infinity");

## (7)

@c = (random(100,300));

$expr[6] = "\(\mathbb{R}^{$c[0]}\)";
$ans[6] = Real($c[0]);

## (8)

@c = (random(100,300));

$expr[7] = "\(\mathcal{P}_{$c[0]}(\mathbb{R})\)";
$ans[7] = Real($c[0]+1);

## (9)

@c = (random(100,300),random(-3,3));

$expr[8] = "\(U = \bigl\lbrace p(x)\in\mathcal{P}_{$c[0]}(\mathbb{R})\ \big|\ 
              p($c[1])=0\bigr\rbrace.\)";
$ans[8] = Real($c[0]);

## (10)

@i = (random(3,6)); @c = ();
foreach (0..($i[0]-1)) { $c[$_] = 0; } @c = (Vector(@c));

$expr[8] = "\(U = \bigl\lbrace " . @c[0]->TeX . " \in \mathbb{R}^{$i[0]}\bigr\rbrace.\)";
$ans[8] = Real(0);


##  resort 

@i = pick($#expr,(0..$#expr));
@expr = @expr[@i]; @ans = @ans[@i];

##

@index = ("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O");

Context()->texStrings;
BEGIN_TEXT

Compute the dimension.  Write \(\fbox{infinite}\) if infinite dimensional.
END_TEXT
for ($i=0;$i<=$#expr;$i++) {
BEGIN_TEXT

$PAR
$BBOLD ($index[$i]) $EBOLD  $SPACE $SPACE 
 $expr[$i] $BR
 \(\qquad\)  dimension \( = \)
   \{ans_rule(5);\}

END_TEXT
}

Context()->normalStrings;

$showPartialCorrectAnswers = 1;

for ($i=0;$i<=$#ans;$i++) {
  ANS( $ans[$i]->cmp() );
}


ENDDOCUMENT();        # This should be the last executable line in the problem.

