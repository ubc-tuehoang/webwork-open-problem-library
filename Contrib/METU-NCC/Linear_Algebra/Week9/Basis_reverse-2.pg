## DESCRIPTION
##  Given matrix for transform wrt stated bases, compute formula 
##   Code for generic matrix size and basis type 
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Linear transformations)
## DBsection(Associated matrices)
## Date(31/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(4)
## Static(0)
## MO(1)




##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"PGchoicemacros.pl",  # needed for shuffle
"MathObjects.pl",
"rand_Array.pl"       # local library file
);


TEXT(beginproblem());

COMMENT('Random 3x3; random source; standard target');

Context("Matrix");
Context()->lists->set(Vector=>{open=>"(",close=>")"});
Context()->{cmpDefaults}{Vector} = {promotePoints=>1};

####################
# from rand_Array.pl:
#
#   rand_Array_2nonzero (n, m, size)    -- 2 nonzero in each row
#   rand_Array_triangle (n, m, size)    -- permuation of triangular
#   rand_Array_En       (n, m, size, k) -- product of k elementary
#   rand_Array_perm     (n, m)          -- permuation
#   ident_Array         (n, m)          -- identity
#
#####################

$problem_type = 2;
@Matrix =  (
  "\mathrm{M}_{E}^{E}",   # problem_type 0
  "\mathrm{M}_{F}^{E}",   # problem_type 1
  "\mathrm{M}_{E}^{G}",   # problem_type 2
  "\mathrm{M}_{F}^{G}"    # problem_type 3
);


my ($n, $m) = (3, 3); 
my @T; my @V; my @W; my @E_dom; my @E_ran;

@T = rand_Array_En($n,$m,2,2);      # linear transformation

do {
  @V = rand_Array_2nonzero($m);     #  input basis
} until (Matrix(@V)->det != 0);
@W = rand_Array_triangle($n);       # output basis

@E_dom = ident_Array($m);
@E_ran = ident_Array($n);


my $M1 =                       Matrix(@T);
my $M2 =                       Matrix(@T) * Matrix(@V);
my $M3 = Matrix(@W)->inverse * Matrix(@T);
my $M4 = Matrix(@W)->inverse * Matrix(@T) * Matrix(@V);

@M = ($M1,$M2,$M3,$M4);

#######################
#
# Generate T input and output
#          V and W
#
Context()->variables->are(
  x=> 'Real',
  y=> 'Real',
  z=> 'Real',
  t=> 'Real'
);

my @var = (Formula("x"),Formula("y"),Formula("z"),Formula("t"));

Context()->texStrings;

##########
#
# T  input and output for display
#
foreach my $j (0..($m-1)) {
  $in = (defined($in)) ? $in . ",\,$var[$j]" : "$var[$j]";
}

{
my @out;
foreach my $i (0..($n-1)) {
  my $f = Formula(0);
  foreach my $j (0..($m-1)) {
    $f = $f + Formula("$T[$i][$j]*$var[$j]");
  }
  $out[$i] = $f->reduce;
}
$out = List(@out);
}

$dom = "\mathbb{R}^$m";
$range = "\mathbb{R}^$n";

##########
#
# V  -- basis of domain
#
my $V = Matrix(@V);
my $E_dom = Matrix(@E_dom);
foreach my $j (0..($m-1)) {
  $V_basis = (defined($V_basis)) ? $V_basis . ",\ " . Vector($V->column($j+1)) : 
                                   Vector($V->column(1)); 
  $E_dom_b = (defined($E_dom_b)) ? $E_dom_b . ",\ " . Vector($E_dom->column($j+1)) : 
                                   Vector($E_dom->column(1)); 
}

##########
#
# W  -- basis of range
#
my $W = Matrix(@W);
my $E_ran = Matrix(@E_ran);
foreach my $i (0..($n-1)) {
  $W_basis = (defined($W_basis)) ? $W_basis . ",\ " . Vector($W->column($i+1)) : 
                                   Vector($W->column(1)); 
  $E_ran_b = (defined($E_ran_b)) ? $E_ran_b . ",\ " . Vector($E_ran->column($i+1)) : 
                                   Vector($E_ran->column(1)); 
}

#####################################
#  Main text

$bases = ($problem_type==0) ? "basis" : "bases";


BEGIN_TEXT

Suppose \(T:$dom\to $range\) is a transformation whose matrix relative to the 
ordered $bases 
$PAR

END_TEXT
   if ( $problem_type != 3) {
BEGIN_TEXT
\(\qquad \displaystyle {E} = \Bigl\lbrace $E_dom_b\Bigr\rbrace\), the standard basis of \($dom\) $BR
END_TEXT
   }  if ( $problem_type % 2 == 1) {
BEGIN_TEXT
\(\qquad \displaystyle {F} = \Bigl\lbrace $V_basis\Bigr\rbrace\), a basis of source \($dom\) $BR
END_TEXT
   }  if ( $problem_type > 1) {
BEGIN_TEXT
\(\qquad \displaystyle {G} = \Bigl\lbrace $W_basis\Bigr\rbrace\), a basis of target \($range\) $BR
END_TEXT
  }  
BEGIN_TEXT

$PAR
    \(\quad \text{is } $Matrix[$problem_type](T) = $M[$problem_type] \)
$PAR
END_TEXT
   if ($problem_type > 0) {
BEGIN_TEXT
In this case, \(\mathrm{M}^E_E(T) = \)\{$M[0]->ans_array(2);\}
$PAR 
\(\quad\) and \(T($in) = \Bigl(\)\{ $out->ans_rule(); \}\(\Bigr)\)
END_TEXT
   } else {
BEGIN_TEXT
In this case, \(T($in) = \Bigl(\)\{ $out->ans_rule(); \}\(\Bigr)\)
END_TEXT
   }

Context()->normalStrings;

#####################################
#  Answer evaluation


if ($problem_type > 0) {
  ANS ( $M[0]->cmp() );
}
ANS( $out->cmp(ordered=>1) );



COMMENT('');

ENDDOCUMENT(); 
