##DESCRIPTION
##ENDDESCRIPTION
## DBsubject(Linear algebra)
## DBchapter(Matrices)
## DBsection(Matrix algebra)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(3)
## KEYWORDS('algebra')
## MO(1)
## Static(0)

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"PG.pl",
"PGcourse.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGmatrixmacros.pl",
"MatrixCheckers.pl",
"parserVectorUtils.pl",
);

TEXT(beginproblem());


Context('Matrix');

$L = Matrix([
  [                      1,                       0, 0],
  [non_zero_random(-3,3,1),                       1, 0],
  [non_zero_random(-3,3,1), non_zero_random(-3,3,1), 1]
]);

@Uarray = ([0,0,0,0,0],
           [0,0,0,0,0],
           [0,0,0,0,0]); 

$p1 = random(1,2,1);  $p2 = random($p1+1,4,1);  # locations of pivots

for (my $i=$p1-1; $i<5; $i++) {
  $Uarray[0][$i] = non_zero_random(-3,3,1);
}
for (my $i=$p2-1; $i<5; $i++) {
  $Uarray[1][$i] = non_zero_random(-3,3,1);
}

$U = Matrix(@Uarray);

$A = $L * $U;

$Col1 = $A->column($p1);
$Col2 = $A->column($p2);

@Narray = ([0,0,0],
           [0,0,0],
           [0,0,0],
           [0,0,0],
           [0,0,0]);
my $j=0;
for(my $i=0; $i<5; $i++) {
  if (($i != $p1-1) && ($i != $p2-1)) {
    if ($i < $p1-1) {
      $Narray[$i][$j] = 1;
    } elsif ($i < $p2-1) {
      $Narray[$p1-1][$j] =  $Uarray[0][ $i  ];
      $Narray[ $i  ][$j] = -$Uarray[0][$p1-1];
    } else {
      $Narray[$p1-1][$j] =  $Uarray[0][ $i  ]*$Uarray[1][$p2-1] -
                            $Uarray[0][$p2-1]*$Uarray[1][ $i  ]; 
      $Narray[$p2-1][$j] =  $Uarray[1][ $i  ]*$Uarray[0][$p1-1];
      $Narray[ $i  ][$j] = -$Uarray[1][$p2-1]*$Uarray[0][$p1-1];
    }
    $j = $j+1;
  }
}

$Null = Matrix(@Narray);


$RowSp = MultiAnswer($U->row(1), $U->row(2))->with(
  singleResult => 1,
  separator => ',',
  tex_separator => ',',
  allowBlankAnswers => 0,
  checker => ~~&basis_checker_rows
);

$ColSp = MultiAnswer($A->column($p1), $A->column($p2))->with(
  singleResult => 1,
  separator => ',',
  tex_separator => ',',
  allowBlankAnswers => 0,
  checker => ~~&basis_checker_columns
);

$NullSp = MultiAnswer($Null->column(1), 
                      $Null->column(2),
                      $Null->column(3))->with(
  singleResult => 1,
  separator => ',',
  tex_separator => ',',
  allowBlankAnswers => 0,
  checker => ~~&basis_checker_columns
);


Context()->texStrings;

BEGIN_TEXT

The matrix \($A\) reduces to \($U\). 

$BR

Give bases for the following.

$PAR

\{ mbox( 
  'Row Space = Span \(\Biggl\lbrace\)',
   $RowSp->ans_array(1),  ', ',
) \} 
\{  mbox(
  '\(\phantom{"Row Space = Sp"}\)',
   $RowSp->ans_array(1), ' ',
  '\(\Biggr\rbrace\)'
) \}

$PAR

\{ mbox( 
  'Column Space = Span \(\Biggl\lbrace\)',
   $ColSp->ans_array(1),  ', ',
   $ColSp->ans_array(1), 
  '\(\Biggr\rbrace\)'
) \}

$PAR

\{ mbox( 
  'Nullspace = Span \(\Biggl\lbrace\)',
   $NullSp->ans_array,  ', ',
   $NullSp->ans_array,  ', ',
   $NullSp->ans_array, 
  '\(\Biggr\rbrace\)'
) \}



END_TEXT

Context()->normalStrings;

ANS( $RowSp->cmp );
ANS( $ColSp->cmp );
ANS( $NullSp->cmp );






ENDDOCUMENT();        # This should be the last executable line in the problem.



