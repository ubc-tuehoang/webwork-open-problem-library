## DESCRIPTION
##  Compute Jordan blocks for nilpotent transformation
##   Problem size is hard-coded, not generic. 
## ENDDESCRIPTION


## DBsubject(Linear algebra)
## DBchapter(Matrix factorizations)
## DBsection(Jordan form)
## Date(31/03/2020)
## Institution(METU-NCC)
## Author(Benjamin Walter & Satoshi Kondo)
## Level(4)
## Static(0)
## MO(1)




##################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGmatrixmacros.pl",
"MatrixCheckers.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"scaffold.pl",
"niceTables.pl"
);


TEXT(beginproblem());

COMMENT('Compute Jordan form given the block sizes.');

sub pick {
  my ($k, @in) = @_;
  if ($k==1) {
    return $in[random(0,$#in)];
  } 
  my @out = ();
  while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }

  return @out;
}

Context("Matrix");
Context()->variables->are(
 x1=>['Real',TeX=>'x_1'],
 x2=>['Real',TeX=>'x_2'],
 x3=>['Real',TeX=>'x_3'],
 x4=>['Real',TeX=>'x_4'],
 x5=>['Real',TeX=>'x_5'],
 x6=>['Real',TeX=>'x_6'],
);
Context()->lists->set(Vector=>{open=>"(",close=>")"});
Context()->{cmpDefaults}{Vector} = {promotePoints=>1};
Context()->noreduce('(-x)-y');

my $debug = 0;

my @var = ("x1","x2","x3","x4","x5","x6"); 

($n, $nil) = (5, 2);   # n = dimension,  nil = nilpotency index
@dim = (0,3,5);
@board = (2,2,1);

##
# Build nilpotent matrix M  from Jacobi blocks J  and vectors P
#
my $M; my @M; my @J; my @P; my $P;  
foreach my $i (0..($n-1)) { $J[$i] = [(0)x$n]; }
foreach my $i (0,2)       { $J[$i+1][$i] = 1;  }
$J = Matrix(@J);

##
# After having trouble coming up with a good method to ensure a nice problem,
# I eventually just decided to loop over nice answers until the question is 
# also reasonable.
# There's got to be a better way to do this....
#
if ($debug==1) {$search=0;}
do {
  foreach my $i (0..($n-1)) {
    $P[$i] = [(0)x$n];
  }

  my @p = pick($n,(0..($n-1)));
  my @q = pick($n,(0..($n-1)));

  # P will be permuation of upper triangular matrix with +-1 entries...
  $P[$p[0]][$q[0]]=1;

  $P[$p[1]][$q[1]]=1; 
  $P[$p[0]][$q[1]]=non_zero_random(-1,1);

  $P[$p[2]][$q[2]]=1; 
  $P[$p[pick(1,(0..1))]][$q[2]]=non_zero_random(-1,1);

  $P[$p[3]][$q[3]]=1; 
  $P[$p[pick(2,(0..2))]][$q[3]]=(non_zero_random(-1,1),non_zero_random(-1,1));

  $P[$p[4]][$q[4]]=1; 
  $P[$p[pick(3,(0..3))]][$q[4]]=(non_zero_random(-1,1),random(-1,1,2),random(-1,1,2));

  $P = Matrix(@P);

  $M = $P * $J * $P->inverse;
  @M = $M->value;

  $nonzero = 0;
  foreach my $i (0..($n-1)) { foreach my $j (0..($n-1)) {
    if ($M[$i][$j] != 0) { $nonzero++; }
  } }
  if ($debug==1) {$search++;}
} until (($nonzero > 4) && ($nonzero < 9));


##
# Convert to Transformation form
#
sub MtoT {
  my @M = @_;
  my @T;

#  foreach my $i (0..$#{$M}) {    # ugh.. can't figure out syntax for this
  foreach my $i (0..($n-1)) {     # oh well.. $n is a global variable
    my $f = Formula(0);
#    foreach my $j (0..$#{$M[0]}) { $f = $f + $M[$i][$j]*Formula("$var[$j]"); }
    foreach my $j (0..($n-1)) { $f = Formula("$f + $M[$i][$j]*$var[$j]"); }
  push (@T, $f->reduce);
  }
  return Vector(@T);
}; 

$Tin = Vector(@var[0..($n-1)]);
$Tout = MtoT(@M);

##
#  Answer checker for vectors and T(v)
#
$Mn[0] = Value::Matrix->I($n);
$Mn[1] = $M;
foreach (2..($nil-1)) { $Mn[$_] = $M*$Mn[$_-1]; }


##
#  This answer checker is actually pretty specific to the board shape....
#    answer is (v1, T(v1), 0, v2, T(v2), 0, v3, 0)
#
$Vchecker = sub {   
  my ($c, $s, $ansHash) = @_;
  my @s = @{$s};
  my @c = @{$c};  

  my @result = ((0)x($#c+1));


  # check the 0 vectors first.
  #
  if ($s[$board[0]] == Vector(((0)x($n)))) 
    { $result[$board[0]] = 1; }
  if ($s[$board[0]+$board[1]+1] == Vector(((0)x($n)))) 
    { $result[$board[0]+$board[1]+1] = 1; }
  if ($s[$#c] == Vector(((0)x($n))))       
    { $result[$#c] = 1; }

  # for this board, v1 and v2 (positions 0 and 3) are a pair 
  # because board[0]==board[1]
  #   I'll try to keep the code as general as possible for paired v1,v2
  #
  my $exit = 0; 

  # first check that vectors are entered an not in ker(T)
  #
  if (!Point($c[0])->typeMatch($s[0])) {$exit = 1;}
  elsif (($Mn[$board[0]-1]*Vector($s[0]))->isZero) { 
    $ansHash->setMessage(1,"in Ker\((T)\)");
    $exit = 1; 
  } else { $result[0] = 1; }

  if (!Point($c[$board[0]+1])->typeMatch($s[$board[0]+1])) {$exit = 1;}
  elsif (($Mn[$board[1]-1]*Vector($s[$board[0]+1]))->isZero) { 
    $ansHash->setMessage($board[0]+2,"in Ker\((T)\)");
    $exit = 1; 
  } else { $result[$board[0]+1] = 1; }
 
  if ($exit == 1) {return [@result];}    
 
  # now check independence of v1, v2 modulo ker(T)
  #  use modification of basis_checker_columns from MatrixCheckers.pl
  #  det (A^T A) = 0 iff columns of A are not independent 
  {
   my @S = (); 
   foreach (0,$board[0]+1) {
     push(@S , Matrix($s[$_])->transpose);   # v1 and v2 
   }
   foreach (1..($board[0]-1),
            ($board[0]+2)..($board[0]+$board[1]),
	    ($board[0]+$board[1]+2)..($#c-1)) { 
     push(@S , Matrix($c[$_])->transpose);   # basis of ker(T)
   }

   my $S = concatenate_columns_into_matrix(@S);
   if (($S->transpose * $S)->det == 0) { 
    $ansHash->setMessage($board[0]+2,"not independent of$BR \(v_1\) over ker\((T)\)");
    $result[$board[0]+1] = 0;  return [@result];
   }
  }

  # now check T(v1) and T(v2)  
  $exit = 0;
  foreach my $j (1..($board[0]-1)) {  # this code would check higher powers too 
    foreach my $i (0,$board[0]+1) {
      if (!(Point($c[$i+$j])->typeMatch($s[$i+$j]))) { $exit = 1; } 
      elsif (Vector($Mn[$j]*Vector($s[$i])) == Vector($s[$i+$j])) 
      { $result[$i+$j] = 1; } 
    }
  }
  if ($exit == 1) { return [@result]; }

  # now check v3 (position 6 = board[0]+board[1]+2)
  #  first check that it is entered and in ker(T)
  if (!Point($c[$board[0]+$board[1]+2])->typeMatch($s[$board[0]+$board[1]+2])) 
    { return [@result]; }
  if (!($Mn[$board[2]]*Vector($s[$board[0]+$board[1]+2]))->isZero) {
    $ansHash->setMessage($board[0]+$board[1]+3,"not in Ker\((T)\)");
    return [@result];
  }

  # need to check independent from T(v1) and T(v2) 
  #  use modification of basis_checker_columns from MatrixCheckers.pl
  #  det (A^T A) = 0 iff columns of A are not independent 
  {
   my @S = ();
   foreach (1,$board[0]+2,$board[0]+$board[1]+2) { 
     push(@S , Matrix($s[$_])->transpose);
   }
   my $S = concatenate_columns_into_matrix(@S);
   if (($S->transpose * $S)->det == 0) { 
     $ansHash->setMessage($board[0]+$board[1]+3,"not independent of$BR \(T(v_1)\) and \(T(v_2)\)");
     return [@result]; 
   }
  }
  $result[$board[0]+$board[1]+2] = 1;

  # For this board there are no further checks
  #  since T(v3) = 0.
  # add more stuff here if the board changes....
  #

  return [@result]; 
}; 

##
#  Hard-coded vector answers from J
#

my @v1 = (Vector($P->column(1)));
foreach (2..2) { push (@v1, (Vector($P->column($_)))); }
push (@v1, (Vector((0)x($n))));
my @v2 = (Vector($P->column(3)));
foreach (4..4) { push (@v2, (Vector($P->column($_)))); }
push (@v2, (Vector((0)x($n))));
my @v3 = (Vector($P->column(5)));
push (@v3, (Vector((0)x($n))));

$v = MultiAnswer(@v1,@v2,@v3)->with(
 singleResult=>0,
 allowBlankAnswers=>1,
 checkTypes=>0,
 checker=>$Vchecker
);


$board = "board-221.png";

%imagestyle = (
  width=>100, tex_size=>100
);

   

####
# DEBUG STUFF
#
if ($debug == 1) {
 $Pmat = $P;

 $Tout[0] = $Tout;
 foreach (2..($#Mn)) { $Tout[$_-1] = MtoT($Mn[$_]->value); }
}
$Tout[$#Mn] = MtoT(($M*$Mn[$#Mn])->value);

Context()->texStrings;

#####################################
#  Main text
#
if ($debug == 1) {
BEGIN_TEXT
DEBUG DATA $BR
\(P = $Pmat\) $BR 
\(T = $Tout[0]\) $BR
\(T^2 = $Tout[1]\) $BR
Search Length = $search $BR
DEBUG END
$PAR
END_TEXT
}
BEGIN_TEXT


The linear transformation \(T:\mathbb{R}^$n\to\mathbb{R}^$n\) below is nilpotent of
nilpotency index $nil.
\[T $Tin = $Tout\]
$BR
The dimensions of the kernels of \(T^n\) are $BR
 \(\bullet \quad \mathrm{dim}\bigl(\mathrm{Ker}(T)\bigr)\phantom{{}^1} = $dim[1]\)$BR
END_TEXT
foreach $pow (2..$#dim) {
BEGIN_TEXT
 \(\bullet \quad \mathrm{dim}\bigl(\mathrm{Ker}(T^$pow)\bigr) = $dim[$pow]\)$BR
END_TEXT
}
BEGIN_TEXT
$BR
Thus it's V-board looks like \{image($board,%imagestyle);\}
$PAR
Compute the following. $BITALIC (Click to open and close sections below).$EITALIC

END_TEXT
#####################
# Begin Scaffold
Scaffold::Begin(can_open=>"always",is_open=>"first_incorrect");
#####################
Section::Begin("$BBOLD(A) Basis vectors \(v_1, v_2\)$EBOLD");
#####################
BEGIN_TEXT


Find \(v_1\) and \(v_2\) so that \(\lbrace v_1,\; v_2\rbrace\) is a basis of
\(\mathrm{Ker}(T^2)\) over 
\(\mathrm{Ker}(T)\) and then compute their images under \(T^m\)$BR

\(\quad   \phantom{T()^1}v_1 = \) \{$v->ans_rule(10)\} $BR
\(\quad \phantom{{}^1}T(v_1) = \) \{$v->ans_rule(10)\} $BR
\(\quad             T^2(v_1) = \) \{$v->ans_rule(10)\} $PAR

\(\quad   \phantom{T()^1}v_2 = \) \{$v->ans_rule(10)\} $BR
\(\quad \phantom{{}^1}T(v_2) = \) \{$v->ans_rule(10)\} $BR
\(\quad             T^2(v_2) = \) \{$v->ans_rule(10)\} $PAR


END_TEXT
#####################
Section::End();
Section::Begin("$BBOLD(B) Basis vector \(v_3\) $EBOLD");
#####################
BEGIN_TEXT

Find \(v_3\) so that \(\lbrace T(v_1),\; T(v_2),\; v_3\rbrace\) is a basis of
\(\mathrm{Ker}(T)\) and then compute its image under \(T^m\)$BR
\(\quad   \phantom{T()^1}v_3 = \) \{$v->ans_rule(10)\} $BR
\(\quad \phantom{{}^1}T(v_3) = \) \{$v->ans_rule(10)\} $BR

END_TEXT
#####################
Section::End();
Section::Begin("$BBOLD(C) Matrix \(J\)$EBOLD");
#####################
BEGIN_TEXT

\(F = \lbrace v_1,\;T(v_1),\;v_2,\;T(v_2),\;v_3\rbrace\)
is a Jordan Basis for \(T\).  Write the matrix \(M_F^F(T)\).

$BR
\(\quad M_F^F(T) = \)\{$J->ans_array(1) \}

END_TEXT
#####################
Section::End();
Scaffold::End();
#####################################
Context()->normalStrings;

#####################################
#  Answer evaluation
Context()->{cmpDefaults}{Vector} = {promotePoints=>1};


ANS( $v->cmp() );
ANS( $J->cmp() );



ENDDOCUMENT(); 
