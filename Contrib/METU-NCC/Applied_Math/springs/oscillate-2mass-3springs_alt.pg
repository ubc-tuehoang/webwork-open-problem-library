## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## KEYWORDS('linear algebra','spring system')

## Date('April 2014')
## Author('Benjamin Walter')
## Institution('METU NCC')

######################################
#  Initialization

DOCUMENT() ;        
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserVectorUtils.pl",
  "contextFraction.pl",
  "problemRandomize.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());

#######################################
#  Setup

Context('Fraction');

$showPartialCorrectAnswers = 0;
$showPartialCredit = 0;

$pr = ProblemRandomize(onlyAfterDue=>0,style=>"Button");


$c = random(1,5,1);
$a = random($c+1,$c+7,1);
$b = random(1,7,1);
$disc = $a*$a-2*$a*$b+$b*$b+4*$b*$c;

while(($disc < 0 ) || (floor(sqrt($disc)) != sqrt($disc))) {
$c = random(1,5,1);
$a = random($c+1,$c+7,1);
while($b == $c) {$b = random(1,7,1);}
$disc = $a*$a-2*$a*$b+$b*$b+4*$b*$c;
}

$eval1=Compute("($a+$b-sqrt($disc))/2")->reduce;
$eval2=Compute("($a+$b+sqrt($disc))/2")->reduce;

$freq1=Compute("sqrt($eval1)"); $freq1b = $freq1;
$freq2=Compute("sqrt($eval2)"); $freq2b = $freq2;


$m1=random(2,5,1);
$m2f=Compute("$m1*$c/$b");
$m2=$m1*$c/$b;

$c3=$b*$m2;
$c1=random(1,$m1*($a-$c)-1,1);
$c2=$m1*($a-$c)-$c1;


Context('Matrix');

$K = Matrix([[$a*$m1, -$c3],[-$c*$m1, $c3]]);
$A = Matrix([[$a, -$b],[-$c, $b]])->transpose;
$evec1 = Matrix([[2*$c],[$a-$b+sqrt($disc)]]);
$evec2 = Matrix([[2*$c],[$a-$b-sqrt($disc)]]);
$evec1b = Matrix([[2*$c],[$a-$b+sqrt($disc)]]);
$evec2b = Matrix([[2*$c],[$a-$b-sqrt($disc)]]);

$u0 = Matrix([[non_zero_random(-2,2,1)],[random(-2,2,1)]]);
$du0 = Matrix([[0],[0]]);

$V = Matrix([$evec1->transpose->row(1),$evec2->transpose->row(1)])->transpose; 
($dim,$acoeff,$B) = $V->solve_LR($u0);
$fV = $V*Matrix([[$freq1,0],[0,$freq2]]);
($dim,$bcoeff,$B) = $fV->solve_LR($du0);

$acoeff1=$acoeff->element(1);   $acoeff2=$acoeff->element(2);
$bcoeff1=$bcoeff->element(1);   $bcoeff2=$bcoeff->element(2);
$evec11=$evec1->element(1,1);   $evec21=$evec2->element(1,1);
$evec12=$evec1->element(2,1);   $evec22=$evec2->element(2,1);


Context('Numeric');
Context()->variables->add(t=>'Real');

$f1 = Formula("$acoeff1*$evec11*cos(sqrt($eval1)*t) + $acoeff2*$evec21*cos(sqrt($eval2)*t) +
               $bcoeff1*$evec11*sin(sqrt($eval1)*t) + $bcoeff2*$evec21*sin(sqrt($eval2)*t)");
$f2 = Formula("$acoeff1*$evec12*cos(sqrt($eval1)*t) + $acoeff2*$evec22*cos(sqrt($eval2)*t) +
               $bcoeff1*$evec12*sin(sqrt($eval1)*t) + $bcoeff2*$evec22*sin(sqrt($eval2)*t)");



#######################################
#  Main text

Context()->texStrings;

BEGIN_TEXT

$PAR

Consider the following spring system.

$BR

\{ image( "spring-2mass-3springs_alt.png", width=>170, height=>220,  
tex_size=>900, extra_html_tags=>'alt="Spring System"' ) \}

\(c_1 = $c1,\quad c_2 = $c2,\quad c_3 = $c3 \\
  m_1 = $m1,\quad m_2 = $m2f \)

$BR
$HR
$BR

Write the stiffness matrix \(K = \)\{ $K->ans_array() \}

$BR

Write the matrix \(M^{-1}K = \) \{ $A->ans_array() \}

$BR
$HR
$BR

Find the eigenvalues and eigenvectors of \(M^{-1}K\)

$BR

\(\qquad \bullet\) Smaller eigenvalue = \{ $eval1->ans_rule(5) \}  
with eigenvector \{ $evec1->ans_array() \} 

$BR

\(\qquad \bullet\) Larger eigenvalue = \{ $eval2->ans_rule(5) \}
with eigenvector \{ $evec2->ans_array() \}

$BR
$HR
$BR

If this spring system oscillates without any external forces present, then
the position of each mass satisfies the following general formula:
$BCENTER
\( 
\mathbf{u}(t) = 
\Bigl(a_1 \cos\bigl(\) \{ans_rule(5)\}\(\ t\bigr) + 
      b_1 \sin\bigl(\) \{ans_rule(5)\}\(\ t\bigr) \Bigr)\) 
  \{ $evec1b->ans_array() \}
$BR
\( {\ }\qquad \quad + 
\Bigl(a_2 \cos\bigl(\) \{ans_rule(5)\}\(\ t\bigr) + 
      b_2 \sin\bigl(\) \{ans_rule(5)\}\(\ t\bigr) \Bigr)\) 
  \{ $evec2b->ans_array() \}
$ECENTER

If the system begins oscillation with initial position
 \(\mathbf{u}(0) = $u0 \) and initial velocity \(\mathbf{u}'(0) = $du0\) 
then the position of the masses at time \(t\) is given by 
$BCENTER
\(u_1(t) = \) \{ans_rule(70) \} $BR
\(u_2(t) = \) \{ans_rule(70) \}
$ECENTER


END_TEXT

Context()->normalStrings;

#######################################
#  Answer evaluation

$showPartialCorrectAnswers = 1 ;

ANS( $K->cmp() );
ANS( $A->cmp() );


ANS( $eval1->cmp() );
ANS( $evec1->cmp( checker=>sub {
 my ($correct, $student, $ansHash) = @_;
 return !(($student->isZero) || ($student->element(1)*$correct->element(2) != $student->element(2)*$correct->element(1))); 
}) );

ANS( $eval2->cmp() );
ANS( $evec2->cmp( checker=>sub {
 my ($correct, $student, $ansHash) = @_;
 return !(($student->isZero) || ($student->element(1)*$correct->element(2) != $student->element(2)*$correct->element(1))); 
}) );


ANS( $freq1->cmp() );
ANS( $freq1b->cmp() );
ANS( $evec1b->cmp( checker=>sub {
 my ($correct, $student, $ansHash) = @_;
 return !(($student->isZero) || ($student->element(1,1)*$correct->element(2,1) != $student->element(2,1)*$correct->element(1,1))); 
}) );

ANS( $freq2->cmp() );
ANS( $freq2b->cmp() );
ANS( $evec2b->cmp( checker=>sub {
 my ($correct, $student, $ansHash) = @_;
 return !(($student->isZero) || ($student->element(1)*$correct->element(2) != $student->element(2)*$correct->element(1))); 
}) );


ANS( $f1->cmp() );
ANS( $f2->cmp() );


COMMENT('Integer Eigenvectors, Initial velocity = 0');

ENDDOCUMENT();
