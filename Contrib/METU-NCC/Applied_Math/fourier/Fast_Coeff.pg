# DESCRIPTION
# Fourier Series
# ENDDESCRIPTION

## KEYWORDS('integral', 'fourier', 'series')

## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection('Fourier series')
## Author('Benjamin Walter')
## Institution('METU-NCC')



#################################
#  Initialization

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGbasicmacros.pl",
"MathObjects.pl",
"unionTables.pl",
"PGunion.pl",
"PGcourse.pl"
);

TEXT(beginproblem());


################################
#  Setup

Context("Numeric");


$N   = list_random(3,4,6);
$len = 2*$N;

($N==6) ?  $k = random(1,2) : $k = 1;

$j = $N+$k;
$kn = $len-$k;
$jn = $len-$j;

Context("Complex");

$cek = Complex(non_zero_random(-3,3,1), non_zero_random(-3,3,1));
$cok = Complex(non_zero_random(-3,3,1), non_zero_random(-3,3,1));

$ck  = ($cek + $cok*Complex(cos($k*2*pi/$len),-sin($k*2*pi/$len)))/2; 
$cj  = ($cek - $cok*Complex(cos($k*2*pi/$len),-sin($k*2*pi/$len)))/2; 
$ckn = conj($ck);
$cjn = conj($cj);

Context("Numeric");
Context()->variables->are('i'=>"Real");
Context()->functions->disable('Trig');

$ck  = Formula($ck->string );
$cj  = Formula($cj->string );
$ckn = Formula($ckn->string);
$cjn = Formula($cjn->string);

Context()->texStrings;

BEGIN_TEXT

Suppose that \(\mathbf{f}\) is a vector of length $len with 
\(\mathcal{F}_{$k} \bigl\lbrace\mathbf{f_{even}}\bigr\rbrace = $cek\) and 
\(\mathcal{F}_{$k} \bigl\lbrace\mathbf{f_{odd}} \bigr\rbrace = $cok\).

$PAR

Compute the following.

$BR

\(\bullet\quad \mathcal{F}_{$k}\bigl\lbrace\mathbf{f}\bigr\rbrace =  \) 
\{ ans_rule(30)\}

$PAR
\(\bullet\quad \mathcal{F}_{$jn}\bigl\lbrace\mathbf{f}\bigr\rbrace = \)
\{ ans_rule(30)\}

$PAR
\(\bullet\quad \mathcal{F}_{$j}\bigl\lbrace\mathbf{f}\bigr\rbrace =  \)
\{ ans_rule(30)\}

$PAR
\(\bullet\quad \mathcal{F}_{$kn}\bigl\lbrace\mathbf{f}\bigr\rbrace = \)
\{ ans_rule(30)\}

$PAR

$BITALIC
 (Your answer cannot use complex multiplication, powers, or trig functions.)
$EITALIC


END_TEXT

Context()->normalStrings;

$showPartialCorrectAnswers = 1;

sub mycheck {
  my ($correct,$student,$ansHash) = @_;
  if (Formula($student->value)->D('i','i') != Formula("0")) {
    Value->Error("Complex multiplication not allowed in answer!");
  }  
  return $student->value == $correct->value; 
}

ANS( $ck->cmp( checker=>~~&mycheck ) );
ANS( $cjn->cmp(checker=>~~&mycheck ) );
ANS( $cj->cmp( checker=>~~&mycheck ) );
ANS( $ckn->cmp(checker=>~~&mycheck ) );


COMMENT('MathObject version');
ENDDOCUMENT();
