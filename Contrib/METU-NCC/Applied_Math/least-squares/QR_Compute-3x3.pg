##DESCRIPTION
##ENDDESCRIPTION
## DBsubject(Linear algebra)
## DBchapter(Matrices)
## DBsection(Matrix algebra)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## Level(3)
## KEYWORDS('algebra')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"parserMultiAnswer.pl",
"PGcourse.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"parserVectorUtils.pl",
"parserPopUp.pl",
);

TEXT(beginproblem());

$showPartialCorrectAnswers = 0;
$showPartialCredit = 0;

Context('Matrix');

#
# scaled orthogonal matrix will chosen from eight 
# families of orthogonal matrices
#
my @q = (
  [[1, 1, 1],
   [1,-1, 1],
   [1, 0,-2]],
  [[1, 2, 2],
   [2,-2, 1],
   [2, 1,-2]],
  [[0,-2, 3],
   [1, 1, 3],
   [1,-1,-3]],
  [[1, 1, 4],
   [1, 3,-2],
   [2,-2,-1]],
  [[1, 0,-4],
   [2, 1, 1],
   [2,-1, 1]],
  [[0, 3,-4],
   [1, 2, 3],
   [1,-2,-3]],
  [[1, 1,-5],
   [1, 2, 4],
   [1,-3, 1]],
  [[1, 0, 5],
   [1,-2,-1],
   [2, 1,-2]]);

my $qm  = random(0,7,1);  # pick one of 8 orthog matrices

$Q = Matrix([
   [ $q[$qm][0][0], $q[$qm][0][1], $q[$qm][0][2] ],
   [ $q[$qm][1][0], $q[$qm][1][1], $q[$qm][1][2] ],
   [ $q[$qm][2][0], $q[$qm][2][1], $q[$qm][2][2] ]
]);

#
# to add more randomness we will 
#   reorder rows and columns 
#   randomly scale columns 
#   randomly change signs of rows
#

my @qc = ([0,0,0],[0,0,0],[0,0,0]); # column operations
my @qr = ([0,0,0],[0,0,0],[0,0,0]); # row operations

my @col = (0,1,2);  @col = @col[shuffle(3)];  # pick order for rows
my @row = (0,1,2);  @row = @row[shuffle(3)];  # pick order for cols 

$qc[0][$col[0]] = non_zero_random(-3,3,1);   # scale and move col 1 
$qc[1][$col[1]] = non_zero_random(-2,2,1);   # scale and move col 2
$qc[2][$col[2]] = non_zero_random(-1,1,1);   # scale and move col 3

$qr[0][$row[0]] = non_zero_random(-1,1,1);   # scale and move row 1 
$qr[1][$row[1]] = non_zero_random(-1,1,1);   # scale and move row 2
$qr[2][$row[2]] = non_zero_random(-1,1,1);   # scale and move row 3

my $ColOp = Matrix([[$qc[0][0],$qc[0][1],$qc[0][2]],
                    [$qc[1][0],$qc[1][1],$qc[1][2]],
                    [$qc[2][0],$qc[2][1],$qc[2][2]]
]);
my $RowOp = Matrix([[$qr[0][0],$qr[0][1],$qr[0][2]],
                    [$qr[1][0],$qr[1][1],$qr[1][2]],
                    [$qr[2][0],$qr[2][1],$qr[2][2]]
]);


$Q = $RowOp * $Q * $ColOp;


# Now we have completed randomizing the matrix Q !

$R = Matrix([
   [ 1, non_zero_random(-2,2,1), non_zero_random(-2,2,1) ],
   [ 0,                       1, non_zero_random(-2,2,1) ],
   [ 0,                       0,                       1 ]
]);


$A = $Q * $R;


$multians = MultiAnswer($Q, $R)->with(
  singleResult => 1,
  checker => sub {
    my ( $correct, $student, $answerHash ) = @_;
    my @s = @{$student};
    $Qin = Matrix($s[0]); 
    $Rin = Matrix($s[1]);

    for (my $i=1; $i<=3; $i++) {
      for (my $j=$i+1;  $j<=3; $j++) {
        if (!($Qin->column($i)->transpose * $Qin->column($j))->isZero) {
          Value::Error("Col $i and $j of Q not orthogonal!"); 
        }
      }
    }

    if ($Qin * $Rin != $A) { 
      Value::Error("QR is not equal to A!");
    }
      
    return 1;
  }
);


Context()->texStrings;

BEGIN_TEXT

Compute a scaled QR decomposition of the matrix
 \( A = $A \)

$PAR

$BCENTER
\( A = \) 
\{ $multians->ans_array(2) \} \{  $multians->ans_array(2) \} 
$ECENTER


END_TEXT

Context()->normalStrings;

ANS( $multians->cmp() );


ENDDOCUMENT();        # This should be the last executable line in the problem.



