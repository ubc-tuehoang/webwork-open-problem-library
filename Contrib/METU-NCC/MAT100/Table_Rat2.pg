## BEGIN_DESCRIPTION
##  Complete sign table for rational functions
## END_DESCRIPTION
##
##############################################
## DBsubject(Algebra)
## DBchapter(Polynomial equations and functions)
## DBsection(Graphs of polynomials)
## Institution(METU-NCC)
## Author(Benjamin Walter)
## MO(1)
## Static(0)
## Level(2)
## Language(en)
###############################################



DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGcourse.pl",
"MathObjects.pl",
"parserPopUp.pl",
"niceTables.pl"
);

sub pick {
  my ($k, @in) = @_;
  my @out = ();
  if ($k>1) {
    while (@out < $k) { push( @out, splice(@in, random(0,$#in), 1) ); }
  } elsif ($k==1) {
    @out = ($in[random(0,$#in)]);
  }
  @out;
}


TEXT(beginproblem());

Context("Numeric");
Context()->noreduce('(-x)-y','(-x)+y');

$dne = "~~x{2205}";
#$dne = "X";

@popPN = (PopUp([" ","+","-"],"+"), 
          PopUp([" ","+","-"],"-")); 
@popZ = (PopUp([" ","0","$dne"],"0"), 
         PopUp([" ","0","$dne"],"$dne")); 

@c = ([PGsort(sub{$_[0] < $_[1]}, (pick(3,(-5..-1,1..5)),0))],
      [PGsort(sub{$_[0] < $_[1]}, (pick(3,(-5..-1,1..5)),0))]);

my @n = ([PGsort(sub{$_[0] < $_[1]}, pick(2,(0..3))),-1,-1],
         [PGsort(sub{$_[0] < $_[1]}, pick(random(1,3,2),(0..3))),-1,-1,-1]);

foreach my $i (0,1) {
  @p[$i] = [pick(4,(1..4))];
}

@f = ("","");
@g = ("","");

my @k = (0,0);
foreach my $j (0..3) { foreach my $i (0,1) { 
  if ($j == $n[$i][$k[$i]]) {
    if (($p[$i][$j] == 1) && ($c[$i][$j] != 0)) {
      $f[$i] = $f[$i] . "(" . Formula("x-$c[$i][$j]")->reduce->TeX . ")\,"; 
    } else { 
      $f[$i] = $f[$i] . Formula("(x-$c[$i][$j])^($p[$i][$j])")->reduce->TeX . "\,"; 
    }
    $popZer[$i][$j] = $popZ[0]; 
    $k[$i]++; 
  } else {   
    if (($p[$i][$j] == 1) && ($c[$i][$j] != 0)) {
      $g[$i] = $g[$i] . "(" . Formula("x-$c[$i][$j]")->reduce->TeX . ")\,"; 
    } else { 
      $g[$i] = $g[$i] . Formula("(x-$c[$i][$j])^($p[$i][$j])")->reduce->TeX . "\,";
    }
    $popZer[$i][$j] = $popZ[1]; 
  }
}}


my @s;
$s[0][4] = random(0,1);
$s[1][4] = ($s[0][4]+1)%2;

foreach my $j (1..4) { foreach my $i (0,1) {
  $s[$i][4-$j] = ($s[$i][5-$j]+$p[$i][4-$j])%2;
}}


foreach my $i (0..1) { foreach my $j (0..4) {
  $pop_f[$i][$j] = $popPN[$s[$i][$j]];
}}

$a[$s[0][4]] = random( 2, 7); 
$a[$s[1][4]] = random(-7,-2); 

$p[0] = random(0,1);  $p[1] = ($p[0]+1)%2;

$br = "border-right: 3px solid;";
$bb = "border-bottom: 3px solid; height: 2px;";
$ht = "height:2px;";

Context()->texStrings;
BEGIN_TEXT

Fill in the sign tables for the functions below.
$PAR
$BBOLD (A) $EBOLD \(\ \ \displaystyle f(x) = \frac{$a[$p[0]]\,$f[$p[0]]}{$g[$p[0]]}\)

$PAR
\{DataTable(
[
  ["\(x\)","",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"" ],
  [ ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb] ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(f\)",$pop_f[$p[0]][0]->menu(),[$popZer[$p[0]][1]->menu(),colspan=>2],
           $pop_f[$p[0]][1]->menu(),[$popZer[$p[0]][1]->menu(),colspan=>2],
           $pop_f[$p[0]][2]->menu(),[$popZer[$p[0]][1]->menu(),colspan=>2],
           $pop_f[$p[0]][3]->menu(),[$popZer[$p[0]][1]->menu(),colspan=>2],
	   $pop_f[$p[0]][4]->menu() ]
], 'align =>ccc|ccc|ccc|ccc|cc', midrules=>1
);\}
$PAR$BR$PAR
$BBOLD (B) $EBOLD \(\ \ \displaystyle g(x) = \frac{$a[$p[1]]\,$f[$p[1]]}{$g[$p[1]]}\)

$PAR
\{DataTable(
[
  ["\(x\)","",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"",
    [ans_rule(2),colspan=>2],"" ],
  [ ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb],["",cellcss=>$bb.$br],
    ["",cellcss=>$bb],["",cellcss=>$bb] ],
  [ ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht],["",cellcss=>$ht.$br],
    ["",cellcss=>$ht],["",cellcss=>$ht] ],
  ["\(g\)",$pop_f[$p[1]][0]->menu(),[$popZer[$p[1]][0]->menu(),colspan=>2],
           $pop_f[$p[1]][1]->menu(),[$popZer[$p[1]][1]->menu(),colspan=>2],
           $pop_f[$p[1]][2]->menu(),[$popZer[$p[1]][2]->menu(),colspan=>2],
           $pop_f[$p[1]][3]->menu(),[$popZer[$p[1]][3]->menu(),colspan=>2],
	   $pop_f[$p[1]][4]->menu() ]
], 'align =>ccc|ccc|ccc|ccc|cc', midrules=>1
);\}
$PAR
In the row for \(x\):
$BR\(\quad \bullet\ \) 
fill in \(x\)-values on number line where \(f\) is zero or does not exist.
$BR
In the row for \(f\):
$BR\(\quad \bullet\ \) 
mark ${BBOLD}intervals${EBOLD} as "\(+\)" or "\(-\)" 
  to indicate \(f\) is ${BBOLD}positive${EBOLD} or ${BBOLD}negative${EBOLD}; and
$BR\(\quad \bullet\ \) 
mark ${BBOLD}points${EBOLD} as "\(0\)" or "${BTT}$dne${ETT}" 
  to indicate \(f\) is ${BBOLD}zero${EBOLD} or does ${BBOLD}not exist${EBOLD}.




END_TEXT
Context()->normalStrings;

ANS( Real($c[$p[0]][0])->cmp() );
ANS( Real($c[$p[0]][1])->cmp() );
ANS( Real($c[$p[0]][2])->cmp() );
ANS( Real($c[$p[0]][3])->cmp() );

ANS( $pop_f[$p[0]][0]->cmp() ); ANS( $popZer[$p[0]][0]->cmp() ); 
ANS( $pop_f[$p[0]][1]->cmp() ); ANS( $popZer[$p[0]][1]->cmp() ); 
ANS( $pop_f[$p[0]][2]->cmp() ); ANS( $popZer[$p[0]][2]->cmp() ); 
ANS( $pop_f[$p[0]][3]->cmp() ); ANS( $popZer[$p[0]][3]->cmp() ); 
ANS( $pop_f[$p[0]][4]->cmp() ); 


ANS( Real($c[$p[1]][0])->cmp() );
ANS( Real($c[$p[1]][1])->cmp() );
ANS( Real($c[$p[1]][2])->cmp() );
ANS( Real($c[$p[1]][3])->cmp() );

ANS( $pop_f[$p[1]][0]->cmp() ); ANS( $popZer[$p[1]][0]->cmp() ); 
ANS( $pop_f[$p[1]][1]->cmp() ); ANS( $popZer[$p[1]][1]->cmp() ); 
ANS( $pop_f[$p[1]][2]->cmp() ); ANS( $popZer[$p[1]][2]->cmp() ); 
ANS( $pop_f[$p[1]][3]->cmp() ); ANS( $popZer[$p[1]][3]->cmp() ); 
ANS( $pop_f[$p[1]][4]->cmp() ); 



ENDDOCUMENT();        # This should be the last executable line in the problem.
       
