## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Integral test)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('APEX Calculus')
## AuthorText1('Hartman')
## EditionText1('3.0')
## Section1('8.3')
## Problem1('')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserPopUp.pl",
  "PGchoicemacros.pl",
  "scaffold.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());

Context("Numeric")->variables->are('n'=>'Real');

$imA = image("Series_bounded_above.png", width=>285, height=>141, tex_size=>900);
$imB = image("Series_bounded_below.png", width=>285, height=>141, tex_size=>900);

#$fig = 
#BeginTable(border=>0, tex_border=>"0pt", spacing=>0, padding=>20).
#AlignedRow([$imA,$imB], separation=>0).
#AlignedRow(["${BBOLD}Graph A${EBOLD}","${BBOLD}Graph B${EBOLD}"], separation=>0).
#EndTable();

$popup1 = PopUp(['choose','converges','diverges','cannot be determined'],'converges');
$popup2 = PopUp(['choose','converges','diverges','cannot be determined'],'diverges');
$popup3 = PopUp(['choose','true','false'],'false');

$mc1 = new_multiple_choice();
$mc1 -> qa (
"The total area of the blue rectangles in this graph represents", # graph A
"\( \displaystyle \sum_{n=2}^{\infty} a_n \).",
);
$mc1 -> extra(
"\( \displaystyle \sum_{n=1}^{\infty} a_n \).",
"\( \displaystyle \int_{1}^{\infty} a(x) \, dx \).",
"\( \displaystyle \lbrace a_n \rbrace_{n \geq 1} \).",
);
#$mc1 -> makeLast();


$mc2 = new_multiple_choice();
$mc2 -> qa (
"The total area of the blue rectangles in this graph represents", # graph B
"\( \displaystyle \sum_{n=1}^{\infty} a_n \).",
);
$mc2 -> extra(
"\( \displaystyle \sum_{n=2}^{\infty} a_n \).",
"\( \displaystyle \int_{1}^{\infty} a(x) \, dx \).",
"\( \displaystyle \lbrace a_n \rbrace_{n \geq 1} \).",
);
#$mc2 -> makeLast();


$mc3 = new_checkbox_multiple_choice();
$mc3 -> qa (
"Select all that apply: This graph shows that", # graph A
"\( \displaystyle \sum_{n=2}^{\infty} a_n < \int_{1}^{\infty} a(x) \, dx \).",
#"\( \displaystyle \sum_{n=1}^{\infty} a_n < a_1 + \int_{1}^{\infty} a(x) \, dx \).",
);
$mc3 -> extra(
"\( \displaystyle \int_{1}^{\infty} a(x) \, dx < \sum_{n=1}^{\infty} a_n \).",
);
#$mc3 -> makeLast();


$mc4 = new_checkbox_multiple_choice();
$mc4 -> qa (
"Select all that apply: This graph shows that", # graph B
"\( \displaystyle \int_{1}^{\infty} a(x) \, dx < \sum_{n=1}^{\infty} a_n \).",
);
$mc4 -> extra(
"\( \displaystyle \sum_{n=2}^{\infty} a_n < \int_{1}^{\infty} a(x) \, dx \).",
"\( \displaystyle \sum_{n=1}^{\infty} a_n < a_1 + \int_{1}^{\infty} a(x) \, dx \).",
);
#$mc4 -> makeLast();



BEGIN_PGML
## Reading questions for the integral test, comparison test, and limit comparison test

Suppose [`a(x)`] is a continuous, positive, decreasing function for [` x \geq 1 `], and [` \lbrace a_n \rbrace `] is the sequence defined by [` a_n = a(n) `] for every natural number [`n`].
[@ $PAR @]*
END_PGML

Scaffold::Begin('can_open'=>'always','is_open' => 'first_incorrect');

Section::Begin("Part 1: Series bounded below");
BEGIN_PGML

>> [@ $imB @]* <<

a. [@ $mc2 -> print_q() @]***
[@ ANS( radio_cmp( $mc2->correct_ans() ) ); $mc2 -> print_a() @]***

b. [@ $mc4 -> print_q() @]***
[@ ANS( checkbox_cmp( $mc4->correct_ans() ) ); $mc4 -> print_a() @]***

c. This graph shows that if the integral [``\int_{1}^{\infty} a(x) \, dx ``] diverges, then the series [`` \sum_{n=1}^{\infty} a_n ``] [_]{$popup2}.
END_PGML
Section::End();


Section::Begin("Part 2: Series bounded above");
BEGIN_PGML
>> [@ $imA @]* <<

a. [@ $mc1 -> print_q() @]***
[@ ANS( radio_cmp( $mc1->correct_ans() ) ); $mc1 -> print_a() @]***

b. [@ $mc3 -> print_q() @]***
[@ ANS( checkbox_cmp( $mc3->correct_ans() ) ); $mc3 -> print_a() @]***

c. This graph shows that if the integral [``\int_{1}^{\infty} a(x) \, dx ``] converges, then the series [`` \sum_{n=2}^{\infty} a_n ``] [_]{$popup1}.

d. [_]{$popup3} The integral test theorem states that the integral [``\int_{1}^{\infty} a(x) \, dx ``] and the summation [`` \sum_{n=1}^{\infty} a_n ``] have the same value.
END_PGML
Section::End();

Scaffold::End();

ENDDOCUMENT();
