## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Integral test)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('APEX Calculus')
## AuthorText1('Hartman')
## EditionText1('3.0')
## Section1('8.3')
## Problem1('')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserWordCompletion.pl",
  "PGchoicemacros.pl",
  "parserMultiAnswer.pl",
  "contextArbitraryString.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());

#Context("Numeric")->variables->are('n'=>'Real');
#Context()->strings->add('continuous' => {}, 'positive' => {}, 'decreasing' => {});
#Context("ArbitraryString");
Context("Numeric");



$wc1 = WordCompletion(['continuous','differentiable'],'continuous');
$wc2 = WordCompletion(['positive','negative'],'positive');
$wc3 = WordCompletion(['decreasing','increasing'],'decreasing');


$mc1 = new_checkbox_multiple_choice();
$mc1 -> qa (
"Select all of the series to which the Integral Test can be applied (there may be more than one correct answer):", 
"\( \displaystyle \sum_{n=2}^{\infty} \frac{\ln(n)}{n} \)",
"\( \displaystyle \sum_{n=1}^{\infty} \frac{\cos(2\pi n)}{n} \)",
"\( \displaystyle \sum_{n=1}^{\infty} \frac{n+1}{n} \)",
);
$mc1 -> extra(
"\( \displaystyle \sum_{n=1}^{\infty} \frac{(-1)^n}{n} \)",
"\( \displaystyle \sum_{n=1}^{\infty} \frac{\cos(n)}{n^2} \)",
"\( \displaystyle \sum_{n=1}^{\infty} \frac{n}{n+1} \)",
);
#$mc1 -> makeLast();


BEGIN_PGML
## Reading questions for the integral test, comparison test, and limit comparison test

a. In order to apply the Integral Test to a sequence [` \lbrace a_n \rbrace `], the function [` a(x) `] must be [______________]{$wc1}, [____________]{$wc2}, and [______________]{$wc3} for every real number [`x \geq 1`], and satisfy [` a(n) = a_n `] for every natural number [`n`].

b. [@ $mc1 -> print_q() @]***  
[@ ANS( checkbox_cmp( $mc1->correct_ans() ) ); $mc1 -> print_a() @]***

END_PGML

ENDDOCUMENT();


$ans1 = Compute("continuous");
$ans2 = Compute("positive");
$ans3 = Compute("decreasing");

$multians1 = MultiAnswer($ans1, $ans2, $ans3)->with(
  singleResult => 1,
  checker => sub {
      my ( $correct, $student, $ansHash ) = @_;
      my @c = lex_sort(@{$correct});
      my @s = lex_sort(@{$student});
      #@s = ( lc($s[0]), lc($s[1]), lc($s[2]) );
      #warn @s;
      my @score = (0) x 3;
      foreach my $i (0..$#c) {
          if ($c[$i] == $s[$i]) { $score[$i] = 1; }
      }
      return [@score];
  }
);
