## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection(Basis and dimension)
## Date(March 2016)
## Institution(Hope College)
## Author(Paul Pearson)
## KEYWORDS('linear algebra','vector space','subspaces')

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "parserPopUp.pl",
  "unionLists.pl",
  "MatrixReduce.pl",
  "PGchoicemacros.pl",
  "parserOneOf.pl",
  "PGML.pl",
  "PGcourse.pl"
);
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;
TEXT(beginproblem()); 

Context('Matrix');
Context()->constants->remove(i,j,k);
#Context()->variables->are(
#'a1'=>['Real',TeX=>'\mathbf{a}_1'],
#'a2'=>['Real',TeX=>'\mathbf{a}_2'],
#'a3'=>['Real',TeX=>'\mathbf{a}_3'],
#);
Context()->flags->set(
  tolerance => 0.001,
  tolType => "absolute",
);


do {
  ($a11,$a12,$a13, 
   $a21,$a22,$a23) = (
  non_zero_random(1,4,1),non_zero_random(-4,-1,1),non_zero_random(1,4,1),
  non_zero_random(1,4,1),non_zero_random(-4,4,1),non_zero_random(-4,-1,1),
  );
} until ( # three non-parallel vectors
  $a11 * $a22 != $a21 * $a12 &&
  $a11 * $a23 != $a21 * $a13 &&
  $a12 * $a23 != $a22 * $a13
);

$a14 = $a11 - $a12;
$a24 = $a21 - $a22;

$A = Matrix([
[$a11,$a12,$a13],
[$a21,$a22,$a23],
]);

Context()->constants->add(
'a1' => Vector($a11,$a21),
'a2' => Vector($a12,$a22),
'a3' => Vector($a13,$a23),
);

$rrefA = rref($A);

$k1 = $rrefA->element(1,3);
$k2 = $rrefA->element(2,3);

$a1 = Vector("<$a11,$a21>");
$a2 = Vector("<$a12,$a22>");
$a3 = Vector("<$a13,$a23>");

@gr = ();

$pix = 200;

foreach my $k (0..3) {

  $gr[$k] = init_graph(-5,-5,5,5, axes=>[0,0], pixels=>[$pix,$pix]);

  foreach my $i (-4..-1,1..4) {
    $gr[$k]->moveTo($i,-5); $gr[$k]->lineTo($i,5,'gray',1);
    $gr[$k]->moveTo(-5,$i); $gr[$k]->lineTo(5,$i,'gray',1);
    $gr[$k] -> lb(new Label ($i,-4.5,$i,'black','center','middle'));
    $gr[$k] -> lb(new Label (-4.5,$i,$i,'black','center','middle'));
  }

  $gr[$k]->lb( new Label(4.5,0.1,'x','black', 'center' , 'bottom') );
  $gr[$k]->lb( new Label(0.1,4.5,'y','black', 'left' , 'middle') );

}

$gr[0]->moveTo(0,0); $gr[0]->arrowTo($a11,$a21,'red',2);
$gr[0]->moveTo(0,0); $gr[0]->arrowTo($a12,$a22,'red',2);
$gr[0]->moveTo(0,0); $gr[0]->arrowTo($a13,$a23,'red',2);

$gr[0]->lb( new Label($a11,$a21,'a1','red', ($a11 < 0) ? 'left' : 'right' , ($a21 < 0) ? 'top' : 'bottom'));
$gr[0]->lb( new Label($a12,$a22,'a2','red', ($a12 < 0) ? 'left' : 'right' , ($a22 < 0) ? 'top' : 'bottom'));
$gr[0]->lb( new Label($a13,$a23,'a3','red', ($a13 < 0) ? 'left' : 'right' , ($a23 < 0) ? 'top' : 'bottom'));

$gr[1]->moveTo($a12,$a22); $gr[1]->arrowTo($a12 + $a14,$a22 + $a24,'green',2);
$gr[1]->moveTo($a11,$a21); $gr[1]->arrowTo(0,0,'red',2);
$gr[1]->moveTo(0,0); $gr[1]->arrowTo($a12,$a22,'blue',2);


$popup1 = PopUp(['choose','must','may','cannot'],'cannot');
$popup2 = PopUp(['choose','at least one row','every row','at least one column','every column','every row and every column'],'every column');
$popup3 = PopUp(['choose','linearly dependent','linearly independent'],'linearly dependent');

$example = Matrix([[1,2],[3,4]]);

sub mycheck {
  my ($correct, $student, $ansHash) = @_;
    if (!$student->typeMatch($correct) || $student->isZero) { return 0; }

    my $s1 = $student->eval(a1=>1,a2=>0,a3=>0);
    my $s2 = $student->eval(a1=>0,a2=>1,a3=>0);
    my $s3 = $student->eval(a1=>0,a2=>0,a3=>1);
    my $S = Matrix([$s1,$s2,$s3])->transpose;
    return $A * $S == Matrix([[0],[0]]);
}

##############################
$popup1 = PopUp(['choose','is','is not'],'is not');
$mc1 = new_checkbox_multiple_choice();
$mc1 -> qa (
"question goes here",
"not every column of \( \mathrm{rref}(A) \) has a pivot.",
);
$mc1 -> extra(
"every column of \( \mathrm{rref}(A) \) has a pivot.",
"every row of \( \mathrm{rref}(A) \) has a pivot.",
"not every row of \( \mathrm{rref}(A) \) has a pivot.",
);
#$mc1 -> makeLast("None of the above");

##############################

$popup2 = PopUp(['choose','is','is not'],'is');
$mc2 = new_checkbox_multiple_choice();
$mc2 -> qa (
"question goes here",
"every row of \( \mathrm{rref}(A) \) has a pivot.",
);
$mc2 -> extra(
"not every column of \( \mathrm{rref}(A) \) has a pivot.",
"every column of \( \mathrm{rref}(A) \) has a pivot.",
"not every row of \( \mathrm{rref}(A) \) has a pivot.",
);
#$mc2 -> makeLast("None of the above");

##############################

$popup3 = PopUp(['choose','is','is not'],'is');
$mc3 = new_checkbox_multiple_choice();
$mc3 -> qa (
"question goes here",
"\( S \) is not a basis.",
"\( \mathrm{span}(S) = \mathbb{R}^2 \)",
);
$mc3 -> extra(
"\( S \) is a linearly independent set",
"\( S \) is a basis.",
);
#$mc2 -> makeLast("None of the above");

##############################


BEGIN_PGML
Let [` S = \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3} \rbrace `] be the set of vectors shown in the figure.

>> [@ image( insertGraph($gr[0]), width=>$pix, height=>$pix, tex_size=>800 ) @]* <<

a. Put the vectors into a matrix that can be used to determine whether the vectors are linearly independent and a spanning set.  For example, enter [| [[1,2],[3,4]] |] for [` [@ Matrix([[1,2],[3,4]])->TeX @] `]

    [`A=`] [@ ANS($A->cmp); ans_box(3,30); @]*

b. The set [`S`] [_]{$popup1} linearly independent because (select all statements that justify the correct answer) [@ ANS(checkbox_cmp($mc1->correct_ans)); $mc1->print_a; @]***

c. If possible, find a subset of [` S `] that is linearly independent and as large as possible; if not, enter [| DNE |]. [` \lbrace `] [____________]{OneOf(List(a1,a2), List(a1,a3), List(a2,a3))} [`\rbrace`]  You may enter either a comma separated list of vector names such as [| a1 |] or coordinate vectors such as [| <1,2> |].

d. [` \mathrm{span}(S) `] [_]{$popup2} equal to [` \mathbb{R}^2 `] because (select all statements that justify the correct answer) [@ ANS(checkbox_cmp($mc2->correct_ans)); $mc2->print_a; @]***

e. If possible, find a subset of [` S `] that is as large as possible and has span equal to [` \mathbb{R}^2 `]; if not, enter [| DNE |]. [`\lbrace`] [____________]{OneOf(List(a1,a2), List(a1,a3), List(a2,a3))} [`\rbrace`] You may enter either a comma separated list of vector names such as [| a1 |] or coordinate vectors such as [| <1,2> |].

f. Select all true statements about the set [`S`]: [@ ANS(checkbox_cmp($mc3->correct_ans)); $mc3->print_a; @]***

END_PGML

ENDDOCUMENT();
