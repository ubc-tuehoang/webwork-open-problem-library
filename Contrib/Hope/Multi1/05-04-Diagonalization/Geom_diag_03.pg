## DESCRIPTION
## Linear transformations
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Matrix factorizations)
## DBsection(Diagonalization)
## Date(February 2016)
## Institution(Hope College)
## Author(Paul Pearson)
## KEYWORDS('linear transformations','kernel','image')
## MO(1)

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGgraphmacros.pl",
  "PGgraphgrid.pl",
  "parserPopUp.pl",
  "PGML.pl",
  "scaffold.pl",
  "PGchoicemacros.pl",
  "unionTables.pl",
  "PGcourse.pl"
);
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;
TEXT(beginproblem()); 

Context('Matrix')->variables->are(
  'x'=>'Real',
  'y'=>'Real',
  'b1'=>['Real','TeX'=>'\mathbf{b_1}'],
  'b2'=>['Real','TeX'=>'\mathbf{b_2}'],
);
Context()->constants->remove(i,j,k);
Context()->noreduce('(-x)-y','(-x)+y');

Context()->constants->add(
  A => Matrix([1,2],[3,4]),
  B => Matrix([2,1],[0,1]),
  D => Matrix([0,1],[1,0]),
);


#####################################
#  eigenvectors

@b = (1,1,1,1);
$b[random(0,3,1)] = 0;
($b11,$b12,$b21,$b22) = ($b[0],$b[1],$b[2],$b[3]);

# change of basis matrix
$B = Matrix([
[$b11,$b12],
[$b21,$b22],
]);

# eigenvectors
$b1 = Vector($B->column(1));
$b2 = Vector($B->column(2));


#####################################
#  eigenvalues

do {
  ($e1,$e2) = (random(-3,-1,1),random(-3,-1,1));
} until ($e1 != $e2);

$D = Matrix([
[$e1,0],
[0,$e2]
]);



######################################
#  matrix of the linear transformation

$A = $B * $D * ($B->inverse);

$a1 = $A->column(1);
$a2 = $A->column(2);

$a11 = $A->element(1,1);
$a12 = $A->element(1,2);
$a21 = $A->element(2,1);
$a22 = $A->element(2,2);


######################################
#  Construct graph canvases

@gr = ();

# $gr[0] = top left, $gr[1] = top right
# $gr[2] = bottom left, $gr[2] = bottom right

$pix = 250;
($xmin, $xmax) = (-5,5);
($ymin, $ymax) = (-5,5);

# construct graph canvases
foreach my $k (0..3) {
  $gr[$k] = init_graph($xmin,$ymin,$xmax,$ymax, axes=>[0,0], pixels=>[$pix,$pix]);
  $gr[$k]->lb( new Label($xmax-0.5,0.1,'x','black', 'center' , 'bottom') );
  $gr[$k]->lb( new Label(0.1,$ymax-0.5,'y','black', 'left' , 'middle') );
}

# square grid
foreach my $k (0..1) {
  foreach my $i (-4..-1,1..4) {
    $gr[$k]->moveTo($i,$ymin); $gr[$k]->lineTo($i,$ymax,'gray',1);
    $gr[$k]->moveTo($xmin,$i); $gr[$k]->lineTo($xmax,$i,'gray',1);
    $gr[$k] -> lb(new Label ($i,$ymin+0.5,$i,'black','center','middle'));
    $gr[$k] -> lb(new Label ($xmin+0.5,$i,$i,'black','center','middle'));
  }
}

# parallelogram grid
graphgrid1($gr[2], $B, -10,-10,10,10, 'gray', 1);
graphgrid1($gr[3], $B, -10,-10,10,10, 'gray', 1);


##############################################
#  Plot vectors in domain and codomain

# plot and label the basis vectors
foreach my $k (0..3) {
  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($b11,$b21,'blue',2);
  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($b12,$b22,'blue',2);
  $gr[$k]->lb( new Label($b11,$b21,'b1','blue', ($b11 > 0) ? 'left' : 'right' , ($b21 < 0) ? 'top' : 'bottom'));
  $gr[$k]->lb( new Label($b12,$b22,'b2','blue', ($b12 > 0) ? 'left' : 'right' , ($b22 < 0) ? 'top' : 'bottom'));
}

# standard basis vectors
#foreach my $k (0..1) {
#  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo(1,0,'red',2);
#  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo(0,1,'red',2); 
#  $gr[$k]->lb( new Label(1.25,0,'e1','red', 'left', 'bottom') );
#  $gr[$k]->lb( new Label(0.1,1.25,'e2','red', 'left', 'bottom') );
#}


# standard basis vectors
#foreach my $k (1) {
#  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($a11,$a21,'red',2);
#  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($a12,$a22,'red',2); 
#  $gr[$k]->lb( new Label($a11,$a21,'f(e1)','red', ($a11 < 0) ? 'left' : 'right' , ($a21 < 0) ? 'top' : 'bottom'));
#  $gr[$k]->lb( new Label($a12,$a22,'f(e2)','red', ($a12 < 0) ? 'left' : 'right' , ($a22 < 0) ? 'top' : 'bottom'));
#}

$fb11 = $e1 * $b11;  $fb12 = $e2 * $b12;
$fb21 = $e1 * $b21;  $fb22 = $e2 * $b22;

# image relative to custom basis vectors
foreach my $k (3) {
  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($fb11,$fb21,'red',2);
  $gr[$k]->moveTo(0,0); $gr[$k]->arrowTo($fb12,$fb22,'red',2); 
  $gr[$k]->lb( new Label($fb11,$fb21,'f(b1)','red', ($a11 < 0) ? 'left' : 'right' , ($a21 < 0) ? 'top' : 'bottom'));
  $gr[$k]->lb( new Label($fb12,$fb22,'f(b2)','red', ($a12 < 0) ? 'left' : 'right' , ($a22 < 0) ? 'top' : 'bottom'));
}



@fig = ();
foreach my $i (0..3) {
  $fig[$i] = image( insertGraph($gr[$i]), width=>$pix, height=>$pix, tex_size=>400 );
}

$table = 
BeginTable().
  AlignedRow(["Standard basis \( \mathcal{S} = \lbrace \mathbf{e_1}, \mathbf{e_2} \rbrace \)", " ", "Standard basis \( \mathcal{S} = \lbrace \mathbf{e_1}, \mathbf{e_2} \rbrace \)"]).
  AlignedRow([ $fig[0], "\( \Large \stackrel{\displaystyle \lbrack f \rbrack_\mathcal{S}^\mathcal{S}}{\to} \)", $fig[1] ]).
  TableSpace(5,0).
  AlignedRow(["\( \Large \lbrack id \rbrack_\mathcal{B}^\mathcal{S} \ \uparrow \)", " ", "\( \Large \lbrack id \rbrack_\mathcal{B}^\mathcal{S} \ \uparrow \)"]).
  TableSpace(5,0).
  AlignedRow([ $fig[2], "\( \Large \stackrel{\displaystyle \lbrack f \rbrack_\mathcal{B}^\mathcal{B}}{\to} \)", $fig[3] ]).
  AlignedRow(["Custom basis \( \mathcal{B} = \lbrace \mathbf{b_1}, \mathbf{b_2} \rbrace \)", " ", "Custom basis \( \mathcal{B} = \lbrace \mathbf{b_1}, \mathbf{b_2} \rbrace \)"]).
EndTable();

$popup1 = PopUp(['choose','is','is not','cannot be determined'],'is');
$popup2 = PopUp(['choose','is','is not','cannot be determined'],'is');
$popup3 = PopUp(['choose','yes','no','cannot be determined'],'yes');


#######################################
Scaffold::Begin(
    can_open => "when_previous_correct",
    is_open  => "first_incorrect",
    hardcopy_is_open => "when_previous_correct",
);

BEGIN_PGML
Suppose [`f : \mathbb{R}^2 \to \mathbb{R}^2 `] is a linear transformation.  The two pictures on top in the figure use standard [`\mathcal{S}`]-coordinates, where [` \mathcal{S} = \lbrace \mathbf{e_1}, \mathbf{e_2} \rbrace `].  The two figures on bottom in the figure use [`\mathcal{B}`]-coordinates, where [` \mathcal{B} = \lbrace \mathbf{b_1}, \mathbf{b_2} \rbrace `].  The figure shows the vectors [`\mathbf{b_1}`] and [`\mathbf{b_2}`] in blue and the vectors [`f(\mathbf{b_1})`] and [`f(\mathbf{b_2})`] in red.

>> [@ $table @]*** <<
[$PAR]*
END_PGML

Section::Begin("Part 1: Eigenvectors and eigenvalues");
BEGIN_PGML
a. Write [`f(\mathbf{b_1})`] and [`f(\mathbf{b_2})`] as linear combinations of the vectors in the basis [`\mathcal{B}`].  Enter a vector sum of the form [| 5 b1 + 6 b2 |].

    [`f(\mathbf{b_1}) = `] [______]{Compute("$e1 b1")}  
    [`f(\mathbf{b_2}) = `] [______]{Compute("$e2 b2")}

b. The vector [`\mathbf{b_1}`] [_]{$popup1} an eigenvector for the linear transformation [`f`] with eigenvalue [___]{$e1} (enter a number or [| DNE |]).  
The vector [`\mathbf{b_2}`] [_]{$popup2} an eigenvector for the linear transformation [`f`] with eigenvalue [___]{$e2} (enter a number or [| DNE |]).

c. Find the matrix [`D`] for the linear transformation [`f`] relative to the basis [`\mathcal{B}`] both in the domain and in the codomain.  That is, find the matrix [`D`] such that [` \lbrack f \rbrack_\mathcal{B}^\mathcal{B} (\mathbf{x}) = D \lbrack \mathbf{x} \rbrack_\mathcal{B}`].

    [` D = `] [_____]*{$D}
END_PGML
Section::End();


Section::Begin("Part 2: Diagonalization");
BEGIN_PGML
a. Find the change of basis matrix from [`\mathcal{B}`]-coordinates to standard [`\mathcal{S}`]-coordinates.  That is, find the matrix [`B`] such that [` \lbrack id \rbrack_\mathcal{B}^\mathcal{S} (\mathbf{x}) = B \lbrack \mathbf{x} \rbrack_\mathcal{B}`].

    [` B = `] [____]*{$B}

b. Is [`A`] diagonalizable? [_]{$popup3}  If [`A`] is diagonalizable, write it as a product of the matrices named [`B`] and [`D`] (together with matrix operations).  For instance, enter your answer using syntax such as [| D B^(-1) D B |].

    [`A=`] [__________]{Compute("B*D*B^(-1)")}  

c. Find the matrix [`A`] for the linear transformation [`f`] relative to the standard basis [`\mathcal{S}`] in both the domain and codomain.  That is, find the matrix [`A`] such that  [` \lbrack f \rbrack_\mathcal{S}^\mathcal{S} ( \mathbf{x} ) = A \lbrack \mathbf{x} \rbrack_\mathcal{S} `].

    [` A = `] [_____]*{$A}
END_PGML
Section::End();

Scaffold::End();

ENDDOCUMENT();
