#########################################################
## DESCRIPTION
## Principal component analysis: covariance versus correlation
## ENDDESCRIPTION
#########################################################

#########################################################
## KEYWORDS('statistics', 'principal component analysis','covariance')
#########################################################

#########################################################
## DBsubject('Statistics')
## Date('2015/03/30')
## Author('H Joe')
## Institution('UBC')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
#########################################################

#########################################################
## Initializations:
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "answerHints.pl",
  "regrfnsPG.pl",   # functions for random sample
);

Context("Numeric");

# input n, var1, var2, ... each variable as vector of length n
# covariance matrix as a vector
sub covmat
{ local($n,$d,$d2,$k,$i,$j,$x,$y,$i1,$i2,$k1,$k2,$xi,$yi,$s1,$s2,$s12,$dat,$cov);
  $n= shift @_;
  @dat=@_;
  $d=($#_+1)/$n;  # number of variables
  $d2 =$d**2;
  @cov=(1..$d2);
  @xbar=(1..$d);  
  for($k=0;$k<$d2;$k++) { $cov[$k]=0; }
  for($j=0;$j<$d;$j++) { $xbar[$j]=0; }
  # variances and means
  for($j=0;$j<$d;$j++)
  { $i1=$j*$n; $i2=($j+1)*$n-1;
    @x=@dat[$i1..$i2];
    for($i=0,$s1=0,$s2=0;$i<$n;$i++)
    { $xi=$x[$i]; 
      $s1=$s1+$xi; $s2=$s2+$xi*$xi;
    }
    $xbar[$j]=$s1/$n; 
    $tem=($s2-$n*$xbar[$j]**2)/($n-1);
    $cov[$j*$d+$j]=($s2-$n*$xbar[$j]**2)/($n-1);
  }
  for($k=0;$k<$d-1;$k++)
  { $k1=$k*$n; $k2=($k+1)*$n-1;
    @y=@dat[$k1..$k2];
    for($j=$k+1;$j<$d;$j++)
    { $i1=$j*$n; $i2=($j+1)*$n-1;
      @x=@dat[$i1..$i2];
      for($i=0,$s12=0;$i<$n;$i++)
      { $xi=$x[$i]; $yi=$y[$i]; 
        $s12=$s12+$xi*$yi;
      }
      $s12=($s12-$n*$xbar[$j]*$xbar[$k])/($n-1);
      $cov[$j*$d+$k]=$s12; $cov[$k*$d+$j]=$s12;
    }
  }
  @cov;
}


# d is dimension of symmetric matrix
# covariance matrix is passed as a vector 
sub jaceig
{ local($d,$m,$i,$j,$k,$d1,$iswp,$avec,$i1,$i2,$a);
  local($p,$q,$t,$s,$c,$fact,$liswp,$eig,$v);
  my $d = shift @_;
  @avec=@_[0..($d*$d-1)];
  $d1=$d-1;
  @a=[@avec[0..$d1]]; # for eigenvectors
  for($i=2;$i<=$d;$i++) 
  { $i1=($i-1)*$d; $i2=$i*$d-1;
    @a=(@a,[@avec[$i1..$i2]]); 
  }
#* factor used in test at step 7 */
   $fact=100.0;  
   # later pass liswp ??
   $liswp=100; $iswp=0;
   @v=[0..$d1]; # for eigenvectors
   for($i=2;$i<=$d;$i++) { @v=(@v,[0..$d1]); }
   for($i=0;$i<$d;$i++)
   { for($j=0;$j<$d;$j++) { $v[$i][$j]=0.0; }
     $v[$i][$i]=1.0;
   }
#* step 1 */
  do
  {  $iswp+=1;
     if($iswp>$liswp) { goto xxx; }
     $m=0;
#* step 2 */
     if($d==1) { goto xxx; }
     for($i=0;$i<$d1;$i++)
     { for($j=$i+1;$j<$d;$j++)
       { $p=0.5*($a[$i][$j]+$a[$j][$i]);
         $q=$a[$i][$i]-$a[$j][$j];
         $t=sqrt(4.0*$p*$p+$q*$q);
#* step 5 */
         if($t==0.0)  { $m+=1; goto here;}
#* step 6 */
         if($q<0.0)
         {  $s=sqrt(($t-$q)/(2.0*$t));
            if($p<0.0) { $s=-$s; }
            $c=$p/($t*$s);
         }
         else
#* step 7 */
         { if(abs($a[$i][$i])<abs($a[$i][$i])+$fact*abs($p))
           { $c=sqrt(($t+$q)/(2.0*$t));
             $s=$p/($t*$c);
           }
           elsif(abs($a[$j][$j])==abs($a[$j][$j])+$fact*abs($p)) 
           { $m+=1; goto here; }
     #print "step7\n";
         }
#* step 10 */
         if(1.0>=1.0+abs($s)) { $m+=1; goto here;}
         else
         { for($k=0;$k<$d;$k++)
           { $q=$a[$i][$k]; $a[$i][$k]=$c*$q+$s*$a[$j][$k];
             $a[$j][$k]=-$s*$q+$c*$a[$j][$k];
           }
         }
#* step 13 */
         for($k=0;$k<$d;$k++)
         { $q=$a[$k][$i]; $a[$k][$i]=$c*$q+$s*$a[$k][$j];
           $a[$k][$j]=-$s*$q+$c*$a[$k][$j];
         }
#* step 14 */
         for($k=0;$k<$d;$k++)
         { $q=$v[$k][$i]; $v[$k][$i]=$c*$q+$s*$v[$k][$j];
           $v[$k][$j]=-$s*$q+$c*$v[$k][$j];
         }
       }
     here: $k=0;
     }
  }
  while ($m<$d*($d-1)/2);
  xxx: @eig=$a[0][0];
   for($i=1;$i<$d;$i++) { @eig=(@eig,$a[$i][$i]); }
   @vvec=$v[0][0];
   for($i=1;$i<$d;$i++) { @vvec=(@vvec,$v[$i][0]); }
   for($j=1;$j<$d;$j++) 
   { for($i=0;$i<$d;$i++) { @vvec=(@vvec,$v[$i][$j]); } }
   #@out=($d,$avec[0],$avec[1],$v[0][0]);
   @out=($d,@eig,@vvec);
}

# inputs n vec target
sub propexplained
{ local($n,$ss,$vec,$target,$i,$ii);
  $n=shift @_;
  @vec=@_[0..($n-1)];
  $target=@_[$n];
  $ss=0;
  for($i=0;$i<$n;$i++) { $ss+=$vec[$i]; }
  for($i=0;$i<$n;$i++) { $vec[$i]/=$ss; }
  $ii=0; $ss=0;
  for($i=0;$i<$n;$i++)
  { $ss+=$vec[$i];
    if($ss>=$target) { $out=$i+1; return($out); }
  }
}



@m100=(11.61,11.20,11.43,11.41,11.46,11.31,12.14,11.00,12.00,11.95,11.60,
12.90,11.96,11.09,11.42,11.79,11.13,11.15,10.81,11.01,11.00,11.79,11.84,
11.45,11.95,11.85,11.43,11.45,11.29,11.73,11.73,11.96,12.25,12.03,12.23,
11.76,11.89,11.25,11.55,11.58,12.25,11.76,11.13,11.81,11.44,12.30,11.80,
11.16,11.45,11.22,11.75,11.98,10.79,11.06,12.74);

@m200=(22.94,22.35,23.09,23.04,23.05,23.17,24.47,22.25,24.52,24.41,24.00,27.10,24.60,21.97,23.52,24.05,22.39,22.59,21.71,22.39,22.13,24.08,24.54,23.06,24.28,24.24,23.51,23.57,23.00,24.00,23.88,24.49,25.78,24.96,24.21,25.08,23.62,22.81,23.13,23.31,25.07,23.54,22.21,24.22,23.46,25.00,23.98,22.82,23.31,22.62,24.46,24.44,21.83,22.19,25.85);

@m400=(54.50,51.08,50.62,52.00,53.30,52.80,55.00,50.06,54.90,54.97,53.26,60.40,58.25,47.99,53.60,56.05,50.14,51.73,48.16,49.75,50.46,54.93,56.09,51.50,53.60,55.34,53.24,54.90,52.01,53.73,52.70,55.70,51.20,56.10,55.09,58.10,53.76,52.38,51.60,53.12,56.96,54.60,49.29,54.30,51.20,55.08,53.59,51.79,53.11,52.50,55.80,56.45,50.62,49.19,58.73);

@m800=(2.15,1.98,1.99,2.00,2.16,2.10,2.18,2.00,2.05,2.08,2.11,2.30,2.21,1.89,2.03,2.24,2.03,2.00,1.93,1.95,1.98,2.07,2.28,2.01,2.10,2.22,2.05,2.10,1.96,2.09,2.00,2.15,1.97,2.07,2.19,2.27,2.04,1.99,2.02,2.03,2.24,2.19,1.95,2.09,1.92,2.12,2.05,2.02,2.02,2.10,2.20,2.15,1.96,1.89,2.33);

@m1500=(4.43,4.13,4.22,4.14,4.58,4.49,4.45,4.06,4.23,4.33,4.35,4.84,4.68,4.14,4.18,4.74,4.10,4.14,3.96,4.03,4.03,4.35,4.86,4.14,4.32,4.61,4.11,4.25,3.98,4.35,4.15,4.42,4.25,4.38,4.69,4.79,4.25,4.06,4.18,4.01,4.84,4.60,3.99,4.16,3.96,4.52,4.14,4.12,4.07,4.38,4.72,4.37,3.95,3.87,5.81);

@m3000=(9.79,9.08,9.34,8.88,9.81,9.77,9.51,8.81,9.37,9.31,9.46,11.10,10.43,8.92,8.71,9.89,8.92,8.98,8.75,8.59,8.62,9.87,10.54,8.98,9.98,10.02,8.89,9.37,8.63,9.20,9.20,9.62,9.35,9.64,10.46,10.90,9.59,9.01,8.76,8.53,10.69,10.16,8.97,8.84,8.53,9.94,9.02,8.84,8.77,9.63,10.28,9.38,8.50,8.45,13.04);

@marathon=(178.52,152.37,159.37,157.85,169.98,168.75,191.02,149.45,171.38,168.48,165.42,233.22,171.80,158.85,151.75,203.88,154.23,155.27,157.68,148.53,149.72,182.20,215.08,156.37,188.03,201.28,149.38,160.48,151.82,150.50,181.05,164.65,179.17,174.68,182.17,261.13,158.53,152.48,145.48,145.48,233.00,200.37,160.82,151.20,165.45,182.77,162.60,154.48,153.42,177.87,168.45,201.08,142.72,151.22,306.00);

@country=("argentin","australi","austria","belgium","bermuda","brazil","burma","canada","chile","china","columbia","cookis","costa","czech","denmark","domrep","finland","france","gdr","frg","gbni","greece","guatemal","hungary","india","indonesi","ireland","israel","italy","japan","kenya","korea","dprkorea","luxembou","malaysia","mauritiu","mexico","netherla","nz","norway","png","philippi","poland","portugal","rumania","singapor","spain","sweden","switzerl","taipei","thailand","turkey","usa","ussr","wsamoa");


#$n=55;
# replace with subset
#@iperm=(0..54);
$n=54;
@iperm=isamp(55,$n);
@m100b=@m100[@iperm];
@m200b=@m200[@iperm];
@m400b=@m400[@iperm];
@m800b=@m800[@iperm];
@m1500b=@m1500[@iperm];
@m3000b=@m3000[@iperm];
@marab=@marathon[@iperm];
@bcountry=@country[@iperm];
@cov1=covmat($n,@m100b,@m200b,@m400b,@m800b,@m1500b,@m3000b,@marab);

@sp100=(1..$n);
@sp200=(1..$n);
@sp400=(1..$n);
@sp800=(1..$n);
@sp1500=(1..$n);
@sp3000=(1..$n);
@spmara=(1..$n);
for($i=0;$i<$n;$i++)
{ $sp100[$i]=100/$m100b[$i];
  $sp200[$i]=200/$m200b[$i];
  $sp400[$i]=400/$m400b[$i];
  $sp800[$i]=800/(60*$m800b[$i]);
  $sp1500[$i]=1500/(60*$m1500b[$i]);
  $sp3000[$i]=3000/(60*$m3000b[$i]);
  $spmara[$i]=42195/(60*$marab[$i]);
}

@cov2=covmat($n,@sp100,@sp200,@sp400,@sp800,@sp1500,@sp3000,@spmara);

# convert to 7x7 matrices
@covmat1=(
[$cov1[0],$cov1[1],$cov1[2],$cov1[3],$cov1[4],$cov1[5],$cov1[6]],
[$cov1[7],$cov1[8],$cov1[9],$cov1[10],$cov1[11],$cov1[12],$cov1[13]],
[$cov1[14],$cov1[15],$cov1[16],$cov1[17],$cov1[18],$cov1[19],$cov1[20]],
[$cov1[21],$cov1[22],$cov1[23],$cov1[24],$cov1[25],$cov1[26],$cov1[27]],
[$cov1[28],$cov1[29],$cov1[30],$cov1[31],$cov1[32],$cov1[33],$cov1[34]],
[$cov1[35],$cov1[36],$cov1[37],$cov1[38],$cov1[39],$cov1[40],$cov1[41]],
[$cov1[42],$cov1[43],$cov1[44],$cov1[45],$cov1[46],$cov1[47],$cov1[48]]);
#@covmat2=(
#[$cov2[0],$cov2[1],$cov2[2],$cov2[3],$cov2[4],$cov2[5],$cov2[6]],
#[$cov2[7],$cov2[8],$cov2[9],$cov2[10],$cov2[11],$cov2[12],$cov2[13]],
#[$cov2[14],$cov2[15],$cov2[16],$cov2[17],$cov2[18],$cov2[19],$cov2[20]],
#[$cov2[21],$cov2[22],$cov2[23],$cov2[24],$cov2[25],$cov2[26],$cov2[27]],
#[$cov2[28],$cov2[29],$cov2[30],$cov2[31],$cov2[32],$cov2[33],$cov2[34]],
#[$cov2[35],$cov2[36],$cov2[37],$cov2[38],$cov2[39],$cov2[40],$cov2[41]],
#[$cov2[42],$cov2[43],$cov2[44],$cov2[45],$cov2[46],$cov2[47],$cov2[48]]);

@sd1=(1..7);
for($i=0;$i<7;$i++) { $sd1[$i]=sqrt($covmat1[$i][$i]); }
@cormat1=([1..7],[1..7],[1..7],[1..7], [1..7],[1..7],[1,2,3,4,5,6,7]);
@cor1=(1..49);
for($i=0;$i<7;$i++)
{ for($j=0;$j<7;$j++)
  { $cormat1[$i][$j]=$covmat1[$i][$j]/($sd1[$i]*$sd1[$j]); 
    $cor1[$i*7+$j]=$cormat1[$i][$j];
  }
}

$d=7;
$target=0.899;
@eigcov1=jaceig($d,@cov1);
$npcov1=propexplained($d,@eigcov1[1..$d],$target);
@eigcor1=jaceig($d,@cor1);
$npcor1=propexplained($d,@eigcor1[1..$d],$target);
@eigcov2=jaceig($d,@cov2);
$npcov2=propexplained($d,@eigcov2[1..$d],$target);

$m100str="m100=c(";
for($i=0;$i<$n-1;$i++) { $m100str=$m100str . $m100b[$i] . ", " ; }
$m100str=$m100str . $m100b[$n-1] . ")";
$m200str="m200=c(";
for($i=0;$i<$n-1;$i++) { $m200str=$m200str . $m200b[$i] . ", " ; }
$m200str=$m200str . $m200b[$n-1] . ")";
$m400str="m400=c(";
for($i=0;$i<$n-1;$i++) { $m400str=$m400str . $m400b[$i] . ", " ; }
$m400str=$m400str . $m400b[$n-1] . ")";
$m800str="m800=c(";
for($i=0;$i<$n-1;$i++) { $m800str=$m800str . $m800b[$i] . ", " ; }
$m800str=$m800str . $m800b[$n-1] . ")";
$m1500str="m1500=c(";
for($i=0;$i<$n-1;$i++) { $m1500str=$m1500str . $m1500b[$i] . ", " ; }
$m1500str=$m1500str . $m1500b[$n-1] . ")";
$m3000str="m3000=c(";
for($i=0;$i<$n-1;$i++) { $m3000str=$m3000str . $m3000b[$i] . ", " ; }
$m3000str=$m3000str . $m3000b[$n-1] . ")";
$marastr="marathon=c(";
for($i=0;$i<$n-1;$i++) { $marastr=$marastr . $marab[$i] . ", " ; }
$marastr=$marastr . $marab[$n-1] . ")";
$cstr="country=c(";
for($i=0;$i<$n-1;$i++) { $cstr=$cstr . "'" . $bcountry[$i] . "', " ; }
$cstr=$cstr . "'" . $bcountry[$n-1] . "')";



# variables for answers

$ansa1=$npcov1;
$ansa2=$npcor1;
$ansa3=$npcov2;
$ansb1=$eigcov1[14]; 
$ansb2=$eigcor1[14];
$ansb3=$eigcov2[14];

@ans=(
"weighted sum of the variables",
"contrast of long distances versus short distances",
"contrast of long distances versus medium distances",
"contrast of marathon distances versus other distances",
"marathon",
"contrast of long and short distances versus medium distances",
"random weighting",
);

$mcquesc =  new_checkbox_multiple_choice();
$mcquesc->qa("(There can be more than one correct answer)", $ans[4]);
$mcquesc->extra($ans[0],$ans[1],$ans[2],$ans[3],$ans[5],$ans[6]);
$mcquesc-> makeLast("None of the above");

$mcquesd =  new_checkbox_multiple_choice();
$mcquesd->qa("(There can be more than one correct answer)", $ans[0]);
$mcquesd->extra($ans[1],$ans[2],$ans[3],$ans[4],$ans[5],$ans[6]);
$mcquesd-> makeLast("None of the above");

$mcquese =  new_checkbox_multiple_choice();
$mcquese->qa(
"(There can be more than one correct answer)", 
$ans[1]);
$mcquese->extra($ans[0],$ans[2],$ans[3],$ans[4],$ans[5],$ans[6]);
$mcquese-> makeLast("None of the above");

@ansf=(
"units of the variables are the same",
"the variables have the same order of magnitude",
"the values are decreasing in most rows",
"the mean values of the 7 variables are about the same",
"the median values of the 7 variables are about the same",
"the standard deviations of the 7 variables are about the same",
);
$mcquesf =  new_checkbox_multiple_choice();
$mcquesf ->qa(
"For the velocity data, which of the following are relevant for
principal component analysis?
(There can be more than one correct answer)", 
$ansf[0],$ansf[1]);
$mcquesf->extra($ansf[2], $ansf[3],$ansf[4],$ansf[5]);
$mcquesf-> makeLast("None of the above");


#$BR
#$cov1[0], $cov1[1], $cov1[2], $cov1[3], $cov1[4], $cov1[5], $cov1[6],
#$cov1[7], $cov1[8];
#$BR
#$cov1[47], $cov1[48];
#$BR
#$BR
#$cov2[0], $cov2[1], $cov2[2], $cov2[3], $cov2[4], $cov2[5], $cov2[6],
#$cov2[7], $cov2[8];
#$BR
#$cov2[47], $cov2[48];
#$BR
#$BR
#$sd1[0],$sd1[1],$sd1[2],$sd1[3],$sd1[4],$sd1[5],$sd1[6];
#$BR
#$BR
#$cormat1[0][0], $cormat1[0][1], $cormat1[0][2], $cormat1[0][3], $cormat1[0][4], $cormat1[0][5], 
#$cormat1[0][6], $cormat1[1][0], $cormat1[1][1];
#$BR
#$cormat1[6][5], $cormat1[6][6];
#$BR
#$BR
#$cor1[0], $cor1[1], $cor1[2], $cor1[3], $cor1[4], $cor1[5], $cor1[6],
#$cor1[7], $cor1[8];
#$BR
#$cor1[47], $cor1[48];
#$BR
#$BR
#$eigcov1[0], 
#$BR
#$eigcov1[1], $eigcov1[2], $eigcov1[3], $eigcov1[4], $eigcov1[5], $eigcov1[6],
#$eigcov1[7];
#$BR
#$eigcov1[8], $eigcov1[9], $eigcov1[10], $eigcov1[11], $eigcov1[12], 
#$eigcov1[13], $eigcov1[14];
#$BR
#$eigcov1[15], $eigcov1[16], $eigcov1[17], $eigcov1[18], $eigcov1[19], 
#$eigcov1[20], $eigcov1[21];
#$BR
#$BR
#$eigcor1[0], 
#$BR
#$eigcor1[1], $eigcor1[2], $eigcor1[3], $eigcor1[4], $eigcor1[5], $eigcor1[6],
#$eigcor1[7];
#$BR
#$eigcor1[8], $eigcor1[9], $eigcor1[10], $eigcor1[11], $eigcor1[12], 
#$eigcor1[13], $eigcor1[14];
#$BR
#$eigcor1[15], $eigcor1[16], $eigcor1[17], $eigcor1[18], $eigcor1[19], 
#$eigcor1[20], $eigcor1[21];
#$BR
#$BR
#$eigcov2[0], 
#$BR
#$eigcov2[1], $eigcov2[2], $eigcov2[3], $eigcov2[4], $eigcov2[5], $eigcov2[6],
#$eigcov2[7];
#$BR
#$eigcov2[8], $eigcov2[9], $eigcov2[10], $eigcov2[11], $eigcov2[12], 
#$eigcov2[13], $eigcov2[14];
#$BR
#$eigcov2[15], $eigcov2[16], $eigcov2[17], $eigcov2[18], $eigcov2[19], 
#$eigcov2[20], $eigcov2[21];
#$BR
#$npcov1, $npcor1, $npcov2.
#$BR
#$BR
#$ansb1, $ansb2, $ansb3.
#$BR

# Main Text
Context()->texStrings;

BEGIN_TEXT

$BR
This is a question on interpretation of principal component analysis
when the input could be a correlation matrix (standardized variables)
or a covariance matrix (no scaling, in which case, pay attention to the
units and range of the variables).
$BR
A data set consists
of women national track records in the year 1984 for over 50 countries: 
variables are record times 
for 100m, 200m, 400m in seconds, and for 800m, 1500m, 3000m,
marathon (42195m) in minutes.

$BR
Your data variables are:
$BR
$BR
$m100str
$BR
$BR
$m200str
$BR
$BR
$m400str
$BR
$BR
$m800str
$BR
$BR
$m1500str
$BR
$BR
$m3000str
$BR
$BR
$marastr
$BR
$BR
$cstr
$BR
$BR
Make a data.frame with
$BR
   track=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
$BR

$BR

Principal component analysis is to be applied 
using both the sample covariance and sample correlation matrix of the
data as given,
also principal component analysis is applied to the velocity or speed data
(with unit of m/s).
$BR

To convert a record time in seconds to m/s, take the distance in metres
and divide by the record time.

$BR
To convert a record time in minutes to m/s, take the distance in metres
and divide by the record time and then divide by 60.

$BR
For the interpretation questions, you may want to plot the scores
of the first two principal components with an abbreviated country name
as a plotting symbol.
$BR


$BR
$BBOLD Part a) $EBOLD
$BR
The number of principal components to achieve 90% of the variation is
$BR
\{ ans_rule(4) \} for the covariance matrix of record times
$BR
\{ ans_rule(4) \} for the correlation matrix of record times
$BR
\{ ans_rule(4) \} for the covariance matrix of velocities 
$BR

$BR
$BBOLD Part b) $EBOLD
$BR
The absolute value of the coefficient of marathon in the $BBOLD first $EBOLD
principal component is:
$BR
\{ ans_rule(4) \} for the covariance matrix of record times
$BR
\{ ans_rule(4) \} for the correlation matrix of record times
$BR
\{ ans_rule(4) \} for the covariance matrix of velocities 
$BR

$BR
$BBOLD Part c) $EBOLD
$BR
For the covariance matrix of record times, the interpretation of the
$BBOLD first $EBOLD principal component (linear combination with most variation) is:
$BR 
\{ $mcquesc->print_q() \}
$BR
\{ $mcquesc->print_a() \}
$BR

$BR
$BBOLD Part d) $EBOLD
$BR
For the correlation matrix of record times, the interpretation of the
$BBOLD first $EBOLD principal component is:
$BR 
\{ $mcquesd->print_q() \}
$BR
\{ $mcquesd->print_a() \}
$BR

$BR
$BBOLD Part e) $EBOLD
$BR
For the covariance matrix of velocities, the interpretation of the
$BBOLD second $EBOLD principal component is:
$BR
\{ $mcquese->print_q() \} 
$BR
\{ $mcquese->print_a() \}
$BR

$BR
$BBOLD Part f) $EBOLD
$BR
Why is it appropriate to do principal component analysis on the covariance
matrix of the
velocities but not the covariance matrix of the actual record times.
$BR
\{ $mcquesf->print_q() \} 
$BR
\{ $mcquesf->print_a() \}
$BR
$BR 
$BR
$BR 

END_TEXT
# units are same, variables have same order of magnitude

#########################################################

BEGIN_HINT
Please read Chapter 7.
END_HINT

#########################################################
## Answer evaluation
$showPartialCorrectAnswers = 1;
ANS( num_cmp($ansa1) );
ANS( num_cmp($ansa2) );
ANS( num_cmp($ansa3) );
ANS( num_cmp($ansb1,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansb2,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansb3,tol=> 0.015, tolType=>"absolute") );

ANS( checkbox_cmp($mcquesc->correct_ans()) ); 
ANS( checkbox_cmp($mcquesd->correct_ans()) ); 
ANS( checkbox_cmp($mcquese->correct_ans()) ); 
ANS( checkbox_cmp($mcquesf->correct_ans()) ); 

#########################################################
BEGIN_SOLUTION
$BR
(a) to (f) R code
$BR
track=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
$BR
print(cov(track))
$BR
print(cor(track))
$BR
pca.cov=princomp(track,cor=F,scores=T)
$BR
pca.cor=princomp(track,cor=T,scores=T)
$BR
print(summary(pca.cov))
$BR
print(pca.cov$DOLAAR loadings)
$BR
print(summary(pca.cor))
$BR
print(pca.cor$DOLAAR loadings)
$BR
speed=track  # to allocate space and column names
$BR
speed[,1]=100/track[,1];
speed[,2]=200/track[,2];
speed[,3]=400/track[,3];
speed[,4]=800/(60*track[,4]);
speed[,5]=1500/(60*track[,5]);
speed[,6]=3000/(60*track[,6]);
speed[,7]=42195/(60*track[,7])
$BR
print(cov(speed)); print(cor(speed))
$BR
print(summary(speed))
$BR
pca2.cov=princomp(speed,cor=F,scores=T)
$BR
print(summary(pca2.cov))
$BR
print(pca2.cov$loadings)
$BR
(c) $ans[4]
$BR
(d) $ans[0]
$BR
(e) $ans[1]
$BR
(f) $ansf[0],  $ansf[1]
$BR
END_SOLUTION
#########################################################

ENDDOCUMENT();
