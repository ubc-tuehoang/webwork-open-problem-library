#########################################################
## DESCRIPTION
## Design matrices for randomized block design
## ENDDESCRIPTION
#########################################################

#########################################################
## DBsubject('Statistics')
## DBchapter('Experimental design')
## DBsection('Concepts')
## Date('2016/11/30')
## Author('Bo Chang')
## Institution('UBC')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
#########################################################

#########################################################
## Initializations:
DOCUMENT();

## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGML.pl",
  "PGcourse.pl"
);
# variables for answers

#########################################################
## Setup: this is where we use Perl and PG objects (Required)


###Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
##warn("seed: " . $seed);

####Call R server
rserve_eval("set.seed($seed)"); ## can not combine with the rest

# Main Text
Context()->texStrings;

# variables for answers
@b=rserve_eval('
b <- sample(2:10, 1)
');

@w=rserve_eval('
w <- sample(2:10, 1)
');

@s=rserve_eval('
s <- sample(3:10, 1)
');

@MSUnit=rserve_eval('
MSUnit <- round(runif(1, 5, 10), 2)
');

@MSWithin=rserve_eval('
MSWithin <- round(runif(1, 1, 4), 2)
');

@bw=rserve_eval('
b*w
');

@ansa=rserve_eval('
b*w*s
');

@ansb=rserve_eval('
factorial(w)
');

@ansc=rserve_eval('
factorial(s)
');

@ansd1=rserve_eval('
MSWithin
');

@ansd2=rserve_eval('
(MSUnit - MSWithin) / s
');

$ansa=@ansa[0];
$ansb=@ansb[0];
$ansc=@ansc[0];
$ansd1=@ansd1[0];
$ansd2=@ansd2[0];

BEGIN_TEXT
A split-plot design has @b[0] blocks,
and each block has @w[0] experimental units.
For every block, the @w[0] levels of a treatment factor \(W\) are assigned at random
to the @w[0] units in the block,
with independent randomizations for the @b[0] blocks.
Each experimental unit is divided into @s[0] sub-units.
For every unit, the @s[0] levels of a treatment factor \(S\) are assigned at random
to the @s[0] sub-units in the unit,
with independent randomizations for the \(@w[0] \times @b[0]\) units.

$BR
$BR
$BBOLD Part a) $EBOLD
How many observations (runs) does the experiment have?
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part b) $EBOLD
How many ways can the levels of \(W\) be randomized in one block?
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part c) $EBOLD
How many ways can the levels of \(S\) be randomized in one unit?

\{ ans_rule(6) \}


$BR
$BR
$BBOLD Part d) $EBOLD
Take the usual model for a split-plot design with the usual assumptions about
the random effects.
In particular, the units effects are assumed to be independent \({\mbox{N}}(0, \sigma^2_\rho)\),
the sub-unit effects are assumed to be independent \({\mbox{N}}(0, \sigma^2_\epsilon)\),
and the unit effects are independent of the sub-unit effects.
The model is fit using \({\tt R}\) commands like

\[\texttt{aov.out <- aov(y ~ Block + Error(Unit) + W + S + W:S, data = a.dataframe)}\]
\[\texttt{summary(aov.out)}\]

Here, \({\tt a.dataframe}\) is an \({\tt R}\) data frame with 5 columns:
$BR


*  \({\tt Block}\) containing levels labelled \({\tt B1}\) through \({\tt B @b[0]}\); 
$BR
*  \({\tt Unit}\) containing levels labelled \({\tt U1}\) through \({\tt U @bw[0]}\); 
$BR
*  \({\tt W}\) containing levels labelled W1 through \({\tt W @w[0]}\); 
$BR
*  \({\tt S}\) containing levels labelled S1 through \({\tt S @s[0]}\); and
$BR
*  \({\tt y}\) containing the values of the response variable. 
$BR
$BR

In the \({\tt R}\) output two values of MS(Residuals) are reported:
@MSUnit[0] under \({\tt Error: Unit}\) 
and @MSWithin[0] under \({\tt Error: Within}\).

$BR
$BR
$BBOLD (i) $EBOLD
Give an estimate of \(\sigma^2_\epsilon\) to 2 decimal places.
\{ ans_rule(8) \}


$BR
$BR
$BBOLD (ii) $EBOLD
Give an estimate of \(\sigma^2_\rho\) to 2 decimal places.
\{ ans_rule(8) \}


END_TEXT

#########################################################
$showPartialCorrectAnswers = 1;
ANS( num_cmp($ansa, tol=> 0.005) );
ANS( num_cmp($ansb, tol=> 0.05) );
ANS( num_cmp($ansc, tol=> 0.05) );
ANS( num_cmp($ansd1, tol=> 0.05) );
ANS( num_cmp($ansd2, tol=> 0.05) );

########################################################
BEGIN_SOLUTION

END_SOLUTION
#########################################################

ENDDOCUMENT();

