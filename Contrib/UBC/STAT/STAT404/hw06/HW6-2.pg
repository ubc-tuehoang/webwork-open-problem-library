#########################################################
## DESCRIPTION
## Design matrices for randomized block design
## ENDDESCRIPTION
#########################################################

#########################################################
## DBsubject('Statistics')
## DBchapter('Experimental design')
## DBsection('Concepts')
## Date('2016/11/30')
## Author('Bo Chang')
## Institution('UBC')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
#########################################################

#########################################################
## Initializations:
DOCUMENT();

## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGML.pl",
  "PGcourse.pl"
);
# variables for answers

#########################################################
## Setup: this is where we use Perl and PG objects (Required)


###Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
##warn("seed: " . $seed);

####Call R server
rserve_eval("set.seed($seed)"); ## can not combine with the rest

# Main Text
Context()->texStrings;

# variables for answers
@l=rserve_eval('
l <- sample(4:9, 1)
');

@MSB=rserve_eval('
MSB <- round(runif(1, 2, 10), 2)
');

@MSC=rserve_eval('
MSC <- round(runif(1, 2, 10), 2)
');

@MSR=rserve_eval('
MSR <- round(runif(1, 0.5, 2), 2)
');

@ansa=rserve_eval('
factorial(l)^2
');

@ansb=rserve_eval('
2/l
');

@ansc=rserve_eval('
MSR
');

@ansd=rserve_eval('
(MSB - MSR) / l
');

$ansa=@ansa[0];
$ansb=@ansb[0];
$ansc=@ansc[0];
$ansd=@ansd[0];

BEGIN_TEXT
This question continues Problem 1.
There are 3 factors, \(T\), \(B\), and \(C\), 
each with @l[0] levels, in a Latin square.
The same statistical model is also assumed,
but \(\alpha_1, \ldots, \alpha_{@l[0]}\) and \(\beta_1, \ldots, \beta_{@l[0]}\)
are now random effects for the blocking factors \(B\) and \(C\), respectively.


We further assume that 
(1) the \(\alpha_i\) are a random sample from a \(N(0, \sigma^2_\alpha)\) distribution,
(2) the \(\beta_j\) are a random sample from a  \(N(0, \sigma^2_\beta)\) distribution,
and (3) the \(\alpha_i\), the \(\beta_j\), and the \(\epsilon_{ijk}\) are all mutually independent.

$BR

ANOVA gives the following mean squares:
MS(\(B\)) =  @MSB[0], 
MS(\(C\)) =  @MSC[0], and
MS(Residuals) = @MSR[0].


$BR
$BR
$BBOLD Part a) $EBOLD
Think of the Latin square as having @l[0] rows corresponding to the levels of \(B\) 
and @l[0] columns corresponding to the levels of \(C\).
A base Latin square is formed by assigning the levels \(1, \ldots, @l[0]\) of \(T\)
to the square in a way that satisfies the structure of a Latin square.
Then, the plan is randomized by randomly permuting the rows and independently randomly permuting
the columns.
How many randomized plans can be generated from the one fixed base design?
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part b) $EBOLD
Consider the contrast 
\(\kappa = \tau_{1} - \tau_{2}\).
The variance of its least squares estimator is of the form \(v \sigma^2\).
Enter \(v\) to 3 decimal places.
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part c) $EBOLD
Give an unbiased estimate of \(\sigma^2\).
Enter your answer to 3 decimal places.
\{ ans_rule(6) \}


$BR
$BR
$BBOLD Part d) $EBOLD
Give an estimate of \(\sigma^2_\alpha\).
Enter your answer to 3 decimal places.
\{ ans_rule(8) \}



END_TEXT

#########################################################
$showPartialCorrectAnswers = 1;
ANS( num_cmp($ansa, tol=> 0.005) );
ANS( num_cmp($ansb, tol=> 0.005) );
ANS( num_cmp($ansc, tol=> 0.005) );
ANS( num_cmp($ansd, tol=> 0.005) );

########################################################
BEGIN_SOLUTION

END_SOLUTION
#########################################################

ENDDOCUMENT();

