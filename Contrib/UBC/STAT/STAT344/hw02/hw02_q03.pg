#########################################################
##KEYWORDS('Inference'; 'confidence intervals for proportion', 'confidence
##intervals for population size'; 'find a 95% confidence interval for a
##population proportion', 'find approximate confidence interval for a population
##size given the count within the population with the characteristic of interest.) 
# DESCRIPTION
## DBsubject('Statistics')
## DBchapter('Confidence intervals')
## DBsection('Concepts')
## Date('2016/07/12')
## Author('Bo Chang')
## Institution('University of British Columbia')
## level('5')

#########################################################
DOCUMENT();
## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGcourse.pl"
);

#########################################################
## Setup: this is where we use Perl and PG objects (Required)


###Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
##warn("seed: " . $seed);

####Call R server
rserve_eval("set.seed($seed)"); ## can not combine with the rest

## @n is a array of size 2, @n[0] is n_1 and @n[2] is n_2.
@n=rserve_eval('
n <- 100*sample(10:20, size=2)
n1 <- n[1]
n2 <- n[2]
n
');

@y1=rserve_eval('
y1 <- rbinom(1, size=n1, prob=.35)
');

@y2=rserve_eval('
y2 <- rbinom(1, size=n2, prob=.4)
');

@p1Hat=rserve_eval('
p1.hat <- y1/n1
round(p1.hat, 4)
');

@p2Hat=rserve_eval('
p2.hat <- y2/n2
round(p2.hat, 4)
');

@diff=rserve_eval('
diff <- p2.hat - p1.hat
round(diff, 4)
');

@se=rserve_eval('
se.sq1 <- p1.hat * (1 - p1.hat) / n1
se.sq2 <- p2.hat * (1 - p2.hat) / n2
se <- sqrt(se.sq1 + se.sq2)
round(se, 4)
');

@lb=rserve_eval('
lb <- diff - 1.96 * se
round(lb, 3)
');

@ub=rserve_eval('
ub <- diff + 1.96 * se
round(ub, 3)
');


$q1ans =@lb[0];
$q2ans =@ub[0];

#########################################################
## Main Text: where all text goes (Required)
Context()->texStrings;
BEGIN_TEXT
Last month in a simple random sample of @n[0] eligible voters, @y1[0] were found to support the Liberal party.
This month, in an independent simple random sample of @n[1] eligible voters, @y2[0] were found to support the Liberal party.

$BR
$BR

Give a 95% confidence interval for the proportion of eligible voters supporting the Liberal party now minus the proportion who supported them last month.  Report the interval endpoints to three decimal places. 

$BR

 (\{  ans_rule(7) \}, \{  ans_rule(7) \}).   
 
END_TEXT
#########################################################
## Answers evaluation (Required)
ANS( num_cmp($q1ans, tol=> 0.005) );
ANS( num_cmp($q2ans, tol=> 0.005) );


#########################################################
## Solution (Optional but recommended)
Context()->texStrings;
BEGIN_SOLUTION

We have \(\hat{p}_{1} - \hat{p}_{0} = @y2[0]/@n[1] - @y1[0]/@n[0]= @p2Hat[0]-@p1Hat[0] = @diff[0]\) as the estimated change in proportion.  And the corresponding standard error is


\[ 
\begin{eqnarray*}
SE[\hat{p}_{1}-\hat{p}_{0}] &=& \left\lbrace SE^{2}[\hat{p}_{1}] + SE^{2}[\hat{p}_{0}] \right\rbrace^{1/2} \\
&=& \left\lbrace \frac{\hat{p}_{1}(1-\hat{p}_{1})}{n_1} +   \frac{\hat{p}_{0}(1-\hat{p}_{0})}{n_0} \right\rbrace^{1/2} \\
& = &  @se[0]
\end{eqnarray*}
\]

Thus our confidence interval for \(p_{1}-p_{0}\)
runs from \( (\hat{p}_{1}-\hat{p}_{0}) - 1.96 SE = @lb[0]\) to 
\( (\hat{p}_{1}-\hat{p}_{0}) + 1.96 SE = @ub[0]\).


END_SOLUTION
ENDDOCUMENT();
