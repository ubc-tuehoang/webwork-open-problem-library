##DESCRIPTION
##
## Created by the UBC School of Biomedical Engineering and Department of Mechanical Engineering. Project led by Robyn Newell and Agnes d'Entremont.
##
## Contact: robyn.newell@ubc.ca and agnes.dentremont@mech.ubc.ca
##
## This work is licensed under the Creative Commons
## Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
## <https://creativecommons.org/licenses/by-sa/4.0/>
##
## We gratefully acknowledge the financial support for this 
## project provided by UBC Open Education Resources Fund. We also gratefully acknowledge
## additional funding support from BCcampus and the School of Biomedical
## Engineering.  
## Contributors to this project include Thomas Oxland, Peter Cripton, Dave Wilson, Lyndia Wu,
## Pranav Shrestha, Jackson Robinson, Jacqueline Kho, Laura Vargas, Mona Behrouzian
##
## This work was completed on the traditional, ancestral, and unceded
## territory of the Musqueam people. 
##
##ENDDESCRIPTION

## DBsubject(Engineering Biomechanics Dynamics)
## DBchapter(Particle Kinematics)
## DBsection(Projectile Motion)
## Institution('University of British Columbia')
## Author('UBC-SBME')
## Date(July 2021)
## Level()
## KEYWORDS()
## RESOURCES('')
## TitleText('TBD')
## EditionText('TBD')
## AuthorText('TBD')
## Section('TBD')
## Problem('TBD')
## Beginner

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "extraAnswerEvaluators.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->functions->remove("cos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub cos {Parser::Function->call('cos',@_)} 
#  Add the new functions to the Context
Context()->functions->add( cos => {class => 'NewFunc', TeX => '\cos'}, );


Context()->functions->remove("sin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
# if uncommented, this next line will generate error messages
#sub sin {Parser::Function->call('sin',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sin => {class => 'NewFunc', TeX => '\sin'}, );


Context()->functions->remove("tan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub tan {Parser::Function->call('tan',@_)}
#  Add the new functions to the Context
Context()->functions->add( tan => {class => 'NewFunc', TeX => '\tan'}, );


Context()->functions->remove("sec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub sec {Parser::Function->call('sec',@_)} 
#  Add the new functions to the Context
Context()->functions->add( sec => {class => 'NewFunc', TeX => '\sec'}, );


Context()->functions->remove("csc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub csc {Parser::Function->call('csc',@_)} 
#  Add the new functions to the Context
Context()->functions->add( csc => {class => 'NewFunc', TeX => '\csc'}, );


Context()->functions->remove("cot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}
package main;
# Make it work on formulas as well as numbers
sub cot {Parser::Function->call('cot',@_)}
#  Add the new functions to the Context
Context()->functions->add( cot => {class => 'NewFunc', TeX => '\cot'}, );



#sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))}
#sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])}
#sub atan {CORE::atan2($_[1],1)}
#sub acot {CORE::atan2(1,$_[1])}
#sub asec {acos($_[0],1.0/$_[1])}
#sub acsc {asin($_[0],1.0/$_[1])}


Context()->functions->remove("acos");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acos {Parser::Function->call('acos',@_)}
#  Add the new functions to the Context
Context()->functions->add( acos => {class => 'NewFunc', TeX => '\arccos'}, );


Context()->functions->remove("asin");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub asin {Parser::Function->call('asin',@_)}
#  Add the new functions to the Context
Context()->functions->add( asin => {class => 'NewFunc', TeX => '\arcsin'}, );


Context()->functions->remove("atan");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub atan {Parser::Function->call('atan',@_)}
#  Add the new functions to the Context
Context()->functions->add( atan => {class => 'NewFunc', TeX => '\arctan'}, );


Context()->functions->remove("asec");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
#sub asec {acos($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub asec {Parser::Function->call('asec',@_)}
#  Add the new functions to the Context
Context()->functions->add( asec => {class => 'NewFunc', TeX => '\arcsec'}, );


Context()->functions->remove("acsc");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
#sub acsc {asin($_[0],1.0/$_[1])}
package main;
# Make it work on formulas as well as numbers
sub acsc {Parser::Function->call('acsc',@_)}
#  Add the new functions to the Context
Context()->functions->add( acsc => {class => 'NewFunc', TeX => '\arccsc'}, );


Context()->functions->remove("acot");
package NewFunc;
# this next line makes the function a 
# function from reals to reals
our @ISA = qw(Parser::Function::numeric);
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}
package main;
# Make it work on formulas as well as numbers
sub acot {Parser::Function->call('acot',@_)}
#  Add the new functions to the Context
Context()->functions->add( acot => {class => 'NewFunc', TeX => '\arccot'}, );


#  End trig functions in degrees

$v_y = random(2, 3, 0.1);
$v_x = random(5, 9, 0.1);
$airtime = random  (0.6, 0.7, 0.01);
$cog = random(0.7, 1.5, 0.1);

$v_0 = sqrt(($v_y)**2 + ($v_x)**2);
$theta = atan($v_y/$v_x);
$v_x2 = $v_x;
$d_x = $v_x*$airtime;
$v_y2 = $v_y + (-9.81*$airtime);
$y_com_peak = $cog + (-($v_y)**2/(2*-9.81));
$y_com_end = $y_com_peak + (0.5*-9.81*($v_y2/-9.81)**2);


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Tom is reviewing and analyzing the footage of a long jump event that he participated in. In his winning jump, he left the takeoff board with a horizontal velocity of \($v_x\)\(m/s\) and a vertical velocity of \($v_y\)\(m/s\).
$PAR
A) What was Tom's horizontal velocity just before landing?
$PAR
\(Horizontal\ Velocity\) = \{ ans_rule(10)\} \(m/s\)
$PAR
B) If Tom's airtime was \($airtime\) \(s\), what was the resultant horizontal displacement of the jump?
$PAR
\(Horizontal\ Displacement\) = \{ ans_rule(10)\} \(m\)
$PAR
C) What was Tom's vertical velocity just before landing his \($airtime\) \(s\) jump?
$PAR
\(Vertical\ Velocity\) = \{ ans_rule(10)\} \(m/s\)
$PAR
D) If Tom's centre of gravity (COG) was $cog m high at takeoff, how high will it be at the peak of the jump?
$PAR
\(COM_{peak}\) = \{ ans_rule(10)\} \(m\)
$PAR
E) Where is Tom's COG when he first reaches the sand pit/at landing?
$PAR
\(COM_f\) = \{ ans_rule(10)\} \(m\)

END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#
# ANS(num_cmp($v_0, reltol => 1)); # 1% tolerance
# ANS(num_cmp($theta, reltol => 1)); # 1% tolerance
ANS(num_cmp($v_x2, reltol => 1)); # 1% tolerance
ANS(num_cmp($d_x, reltol => 1)); # 1% tolerance
ANS(num_cmp($v_y2, reltol => 1)); # 1% tolerance
ANS(num_cmp($y_com_peak, reltol => 1)); # 1% tolerance
ANS(num_cmp($y_com_end, reltol => 1)); # 1% tolerance
# default tolerance is .01 or one percent.

ENDDOCUMENT();