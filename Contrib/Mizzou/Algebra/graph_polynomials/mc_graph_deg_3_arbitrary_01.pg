# DESCRIPTION
# MC - Gives a degree 3 polynomial, factor/unfactored with 2/3 distinct zeros, 
# and asks to choose the correct graph.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Polynomial and Rational Functions')
## DBsection('Polynomial Functions')
## KEYWORDS('polynomials','polynomial','graphs','graph','graphing')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "PGgraphmacros.pl",
  "unionTables.pl",
  "Graphpolys.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
PeriodicRerandomization("1");
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");

#### this is to randomize the position of the graphs later
@pos = (0..3);
@posspos = (0..3);
for ($i = 0; $i < 4; $i++) {
  $pos[$i] = list_random(@posspos);
  for ($j = 0; $j < scalar(@posspos); $j++) {
    if ($posspos[$j] == $pos[$i] ) {
      $tmp = $posspos[$j];
      $posspos[$j] = $posspos[scalar(@posspos)-1];
      $posspos[scalar(@posspos)-1] = $tmp;
      pop(@posspos);
      $j--;
    }
  }
}

$numdistzeros = 2; # 2 distinct zeros or 3
$dcase = 0; # 0 - show is factored form, 1 - show in expanded form
$facgroup = 1; # 0 - may not factor by grouping, 1 - always factors by grouping (NOTE: this only matters when $dcase = 1)
$highy = 25; # max(yint, yvalues between zeros) will not exceed $highy
$lowy = 2; # will not go below $lowy

if ($numdistzeros == 2) {
  #### do loop is to pick the two zeros, and pick a good lead coeff = $num/$den so a nice poly is obtained
  do {
    if ($facgroup == 1) {
      $z1 = non_zero_random(-9,9);
      $z2 = -$z1;
    } else {
      $z1 = random(-9,9);
      do {$z2 = random(-9,9)} until (abs($z1-$z2) > 1);
    }
    
    ($xn,$yn,$xp,$yp,$xa,$ya) = high_d3($z1,$z2);
    $yint1 = poly_d3(0,$z1,$z2);
    $yint2 = poly_d3(0,$z2,$z1);
    $yint3 = poly_d3(0,-$z1,$z2);
    @num = ();
    @den = ();
    $bden = ($yint1 != 0) ? gcd($ya,$yint1,$yint2) : $ya;
    $max = max(abs($ya),abs($yint1),abs($yint2));
    for ($i = 1; $i <= $bden; $i++) {
      if ($bden/$i == floor($bden/$i) && $max <= $highy*$i) {
        for ($j = 1; $j*$max <= $highy*$i; $j++) {
          if ($i*abs($ya)/$j > $lowy && $i*$max/$j > $lowy) {
            push(@num, $j/gcd($i,$j));
            push(@den, $i/gcd($i,$j));
          }
        }
      }
    }
    $size = scalar(@num);
    if ($size > 0) {
      $ach = random(0,scalar(@num)-1,1); # choose leading coefficient
      $flip = random(-1,1,2); # determines sign of leading coefficient
      $a = $flip*$num[$ach]/$den[$ach];
    }
  } until ($size > 0);


  if ($dcase == 0) {
    if ($flip == -1) {
      $disp = "\displaystyle P(x) = -"
    } else {
      $disp = "\displaystyle P(x) = ";
    }
    $order = random(0,1,1); # 0 - show $a(x-z1)*(x-z2)^2, 1 - show $a(x-z2)^2(x-z1)
    if ($order == 0) {
      if ($den[$ach] == 1) {
        if ($z1 == 0) {
          $disp = ($num[$ach] == 1) ? $disp."x(x-$z2)^2" : $disp."$num[$ach] x(x-$z2)^2";
        } elsif ($z2 == 0) {
          $disp = ($num[$ach] == 1) ? $disp."(x-$z1)x^2" : $disp."$num[$ach] (x-$z1)x^2";
        } else {
          $disp = ($num[$ach] == 1) ? $disp."(x-$z1)(x-$z2)^2" : $disp."$num[$ach] (x-$z1)(x-$z2)^2";
        }
      } else {
        if ($z1 == 0) {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} x(x-$z2)^2";
        } elsif ($z2 == 0) {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} (x-$z1)x^2";
        } else {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} (x-$z1)(x-$z2)^2";
        }
      }
    } else {
      if ($den[$ach] == 1) {
        if ($z1 == 0) {
          $disp = ($num[$ach] == 1) ? $disp."(x-$z2)^2x" : $disp."$num[$ach] (x-$z2)^2x";
        } elsif ($z2 == 0) {
          $disp = ($num[$ach] == 1) ? $disp."x^2(x-$z1)" : $disp."$num[$ach] x^2(x-$z1)";
        } else {
          $disp = ($num[$ach] == 1) ? $disp."(x-$z2)^2(x-$z1)" : $disp."$num[$ach] (x-$z2)^2(x-$z1)";
        }
      } else {
        if ($z1 == 0) {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} (x-$z2)^2 x";
        } elsif ($z2 == 0) {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} x^2(x-$z1)";
        } else {
          $disp = $disp."\frac{$num[$ach]}{$den[$ach]} (x-$z2)^2(x-$z1)";
        }
      }
    }
  } else {
    $n0 = $num[$ach]*$flip;
    $d0 = $den[$ach];
    if ($d0 == 1) {
      ($c3,$c2,$c1,$c0) = ($n0, -$n0*($z1+2*$z2), $n0*$z2*(2*$z1+$z2), -$n0*$z1*($z2)**2);
      $disp = "P(x) = ";
    } else {
      ($c3,$c2,$c1,$c0) = (1, -($z1+2*$z2), $z2*(2*$z1+$z2), -$z1*($z2)**2);
      $disp = "P(x) = \frac{$n0}{$d0}\left(";
      if ($n0 < 0) {
        $n0p = -$n0;
        $disp = "P(x) = -\frac{$n0p}{$d0}\left(";
      }
    }  
    
    if ($c3 == 1) {
      $disp = $disp."x^3";
    } elsif ($c3 == -1) {
      $disp = $disp."-x^3";
    } else {
      $disp = $disp."$c3 x^3";
    }

    if ($c2 == 1) {
      $disp = $disp."+ x^2";
    } elsif ($c2 == -1) {
      $disp = $disp."- x^2";
    } elsif ($c2 != 0) {
      $disp = $disp."+ $c2 x^2"; 
    }
    
    if ($c1 == 1) {
      $disp = $disp."+ x";
    } elsif ($c1 == -1) {
      $disp = $disp."- x";
    } elsif ($c1 != 0) {
      $disp = $disp."+ $c1 x"; 
    }
    
    $disp = ($d0 == 1) ? $disp."+ $c0" : $disp."+ $c0 \right)";
  }


  #### set up graphs
  $maxx = 2*max(0,$z1,$z2,-min(0,$z1,$z2));
  $maxy = abs($a*$max)+3;
  $minx = -$maxx;
  $miny = -$maxy;
  $gsize = 500;
  for ($i = 0; $i < 4; $i++) {
    $graphs[$i] = init_graph($minx, $miny, $maxx, $maxy, size=>[$gsize,$gsize]);
    for ($j = $minx; $j <= $maxx; $j++) {
      $graphs[$i]->moveTo($j,$miny);
      $graphs[$i]->lineTo($j,$maxy,'gray',1);
    }
    for ($j = $miny; $j <= $maxy; $j++) {
      $graphs[$i]->moveTo($minx,$j);
      $graphs[$i]->lineTo($maxx,$j,'gray',1);
    }
    $graphs[$i]->moveTo($minx, 0);
    $graphs[$i]->arrowTo($maxx, 0, 'black', 2);
    $graphs[$i]->arrowTo($minx, 0, 'black', 2);
    $graphs[$i]->moveTo(0, $miny);
    $graphs[$i]->arrowTo(0, $maxy, 'black', 2);
    $graphs[$i]->arrowTo(0, $miny, 'black', 2);
    $graphs[$i]->lb(new Label($maxx-0.1, 0.4, 'x', 'black', 'bottom', 'right'));
    $graphs[$i]->lb(new Label(0.4, $maxy-0.1, 'y', 'black', 'top', 'left'));

    for ($j = $minx+1; $j < $maxx; $j++) {
      if (($j != 0 && $j % 5 == 0) || $j == 1) {
        $graphs[$i]->lb(new Label($j,-0.1,$j, 'black', 'top','center'));
      }
    }

    for ($j = $miny+1; $j < $maxy; $j++) {
      if (($j != 0 && $j % 5 == 0) || $j == 1) {
        $graphs[$i]->lb(new Label(-0.1,$j,$j, 'black', 'middle', 'right'));
      }
    }
  }

  #### set up functions to be plotted
  ##### 0 - correct, 1 - switches multiplicities, 2 - reflected, 3 - opposite zeros
  $expn[0] = sub { my $x = shift(); $a*($x - $z1)*(($x - $z2)**2) };
  $expn[1] = sub { my $x = shift(); $a*(($x - $z1)**2)*($x - $z2) };
  $expn[2] = sub { my $x = shift(); -$a*($x - $z1)*(($x - $z2)**2) };
  $expn[3] = sub { my $x = shift(); $a*($x + $z1)*(($x + $z2)**2) };

  #### plots y-intercepts and zeros
  $graphs[$pos[0]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[0]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle($z1,0,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle($z2,0,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(-$z1,0,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(-$z2,0,'5','blue','blue'));
  $graphs[$pos[0]]->stamps(new Circle(0,$a*$yint1,'5','blue','blue'));
  $graphs[$pos[1]]->stamps(new Circle(0,$a*$yint2,'5','blue','blue'));
  $graphs[$pos[2]]->stamps(new Circle(0,-$a*$yint1,'5','blue','blue'));
  $graphs[$pos[3]]->stamps(new Circle(0,$a*$yint3,'5','blue','blue'));
} else {
  
}

for ($i = 0; $i < 4; $i++) {
  $fun[$i] = new Fun($expn[$i], $graphs[$pos[$i]]);
  $fun[$i]->domain($minx,$maxx);
  $fun[$i]->steps(1500);
  $fun[$i]->weight(3);
}

$scale = 0.6;
@figs = (0..3);
for ($i = 0; $i < 4; $i++) {
  $figs[$i] = image(insertGraph($graphs[$i]), width=>$gsize*$scale, height=>$gsize*$scale, tex_size=>500 );
}

Context()->strings->add(A=>{}, B=>{}, C=>{}, D=>{}, E=>{}, "none"=>{});
@possans = ("A", "B", "C", "D", "E");
$ans = $possans[$pos[0]];


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
$BCENTER
\{ 
BeginTable().
  AlignedRow([$figs[0], $figs[1]]).
  TableSpace(5,0).
  AlignedRow(["A", "B"]).
  TableSpace(25,6).
  AlignedRow([$figs[2], $figs[3]]).
  TableSpace(5,0).
  AlignedRow(["C", "D"]).
EndTable();
\}
$ECENTER 
$PAR
Determine the correct graph of \($disp\)
$PAR
Correct Answer: \{ans_rule(10)\}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS(String($ans)->cmp());


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Note:${EBOLD} You may click a graph to enlarge it.
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();

COMMENT('Features Periodic Rerandomization. Created in 2013.
$BR
Desc: MC - Gives a degree 3 polynomial, factor/unfactored with 2/3 distinct zeros, and asks to choose the correct graph.');
ENDDOCUMENT();
