# DESCRIPTION
# Asks three random questions pertaining to a zero exponent
# ENDDESCRIPTION

## DBsubject('Intermediate Algebra')
## DBchapter('Ch 06: Rational Expressions, Functions and Equations')
## DBsection('Rational Expressions and Functions: Multipying and Dividing')
## KEYWORDS('rational', 'expressions', 'exponents')
## Author('Rick Lynch, Patrick Spencer')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "contextFraction.pl",
  "contextLimitedPowers.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables
###########################################################################
Context("Fraction-NoDecimals");

# This is the second term. There are three cases:
# 1: postive or negative number raised to zero
# 2: negative number raised to a postive power
# 3: positive number raised to a negative power
$case = random(1,3);
if ($case == 1) {
  $exp_2_sign = 0;
  $base_2_sign = random(-1,1,2);
} elsif ($case == 2) {
  $exp_2_sign = 1;
  $base_2_sign = -1;
} else {
  $exp_2_sign = -1;
  $base_2_sign = 1;
}

# This make sure we don't raise something to just 1.
$exp_2_abs_value= ($exp_2_sign == 1) ? random(2,3) : random(1,3);
do {$base_2_abs_value = random(2,4)} 
  until ($base_2_abs_value != $exp_2_abs_value);

$exp_2 = $exp_2_sign*$exp_2_abs_value;
$base_2 = $base_2_sign*$base_2_abs_value;

# the second term will never have a neg # raised to a neg #
# so we make sure the first term has this since we want
# such a case to appear somewhere
$exp_1_sign = -1;
$base_1_sign = -1;

# here we choose the abs value for exp 1
# we have the do..until calls to make sure
# the abs value of exp_1 isn't the same as
# the abs value of exp 2 
# All the do..until loops are an effort to 
# make the numbers either small or not the same
# as other numbers
if ($exp_1_sign == 1) {
  do {$exp_1_abs_value = random(2,3)}
  until ($exp_1_abs_value != $exp_2_abs_value)
} else {
  do {$exp_1_abs_value = random(1,3)}
  until ($exp_1_abs_value != $exp_2_abs_value)
}
$exp_1 = $exp_1_sign*$exp_1_abs_value;

# if the abs value of exp_1 is large
# we want the abs value of base_1 to be smallish
if ($exp_1_abs_value == 3) {
  do {$base_1_abs_value = random(2,3)} 
  until (
    $base_1_abs_value != $base_2_abs_value
    # && $base_1_abs_value != $exp_1_abs_value
  )
} else {
  do {$base_1_abs_value = random(2,4)} 
  until (
    $base_1_abs_value != $base_2_abs_value
    # && $base_1_abs_value != $exp_1_abs_value
  )
}
$base_1 = $base_1_sign*$base_1_abs_value;

# If exp_1 is not negative then make sure
# we have exp_2 negative. We want at least one
# negative exponent

# this chooses whether there is a + or - sign between
# the two terms
$addsub = random(-1,1,2);
# If addsub < 0 let pm be -, otherwise let it be +
$pm = ($addsub < 0) ? "-" : "+";

Context("Fraction");
# Calculate answer. We made sure that exactly one 
# exponent was negative so now we break up the answer into
# two cases: one when the first exponent is negative
# and two when the second exponent is negative.
if ($exp_2_sign != -1) {
  # this is the case when exp_2 is positive or zero
  $numerator = 1+$addsub*( $base_2**($exp_2) )*( $base_1**(-$exp_1) );
  $denominator = ($base_1**(-$exp_1));
} else {
  # this is the case when the sign of exp_2 is negative
  $numerator = $base_2**(-$exp_2)+$addsub*( $base_1**(-$exp_1) );
  $denominator = ( $base_2**(-$exp_2) )*( $base_1**(-$exp_1) );
}
$ans = Compute("$numerator/$denominator");


###########################################################################
# state the problem
###########################################################################
Context()->texStrings;
BEGIN_TEXT
Simplify the following expressions and write your answer as a 
single fraction in reduced form.
$PAR
\[
\left($base_1\right)^{$exp_1} $pm \left($base_2\right)^{$exp_2}
\]
Answer: \{ans_rule(20)\}
END_TEXT


###########################################################################
# check the answer
###########################################################################
Context()->operators->undefine("+","-","*","^","**");
Context("Fraction");

LimitedPowers::OnlyPositiveIntegers();
ANS($ans->cmp(studentsMustReduceFractions=>1));


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} \($ans\)
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus();

COMMENT('Edited in summer of 2014. Features Periodic Rerandomization. Edited in the summer of 2014. 
  There is always at least one negative exponent. The second term can have
    any of the following: positive or negative number raised to 0 power,
    negative number raised to positive power,
    positive number raised to a negative power. 
    The following symbols are prohibited in the answer: +, -, *, ^, **.
    Students must reduce fractions.');
ENDDOCUMENT();
