# DESCRIPTION
# Find all of the info (same for each instance). Leading coefficient always +/- 1/2. No fractions in vertex. Leading coefficient always +/- 1/2. The discriminant when solving is not a perfect square so they're forced to use the quadratic formula.
# ENDDESCRIPTION

## DBsubject('Algebra')
## DBchapter('Equations and Inequalities')
## DBsection('Polynomial Inequalities')
## KEYWORDS('polynomial', 'inequality', 'inequalities')
## Author('Rick Lynch')
## Institution('University of Missouri-Columbia')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PeriodicRerandomization.pl",
  "displaySqrts.pl",
  "fracListChecker.pl",
  "parserImplicitPlane.pl",
  "parserPopUp.pl",
  "MUHelp.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
PeriodicRerandomization("3");
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Numeric");
do {
  $a = 1/2*random(-1,1,2);;
  $b = random(2,9)*random(-1,1,2);
  $c = non_zero_random(-5,5);
  $disc = ($b)**2 - 4*$a*$c;
} until ($disc > 0 && floor(sqrt($disc)) != sqrt($disc));

$popmm = ($a < 0) ? PopUp(["select","maximum","minimum"],"maximum") : PopUp(["select","maximum","minimum"],"minimum");

Context()->texStrings;
$poly = ($a < 0) ? "-\frac{x^2}{2} + $b x + $c" : "\frac{x^2}{2} + $b x + $c";


###########################################################################
# state the problem 
###########################################################################
BEGIN_TEXT
Find the following information about the function \(f(x) = $poly\).
$PAR
$SPACE $SPACE (a) The vertex is the point \{ans_rule(15)\}. $BR
$SPACE $SPACE (b) The axis of symmetry is the line \{ans_rule(15)\}. $BR
$SPACE $SPACE (c) The function is increasing on the interval \{ans_rule(15)\}. $BR
$SPACE $SPACE (d) The function is decreasing on the interval \{ans_rule(15)\}. $BR
$SPACE $SPACE (e) The function takes its \{$popmm->menu()\} value at \(y = \) \{ans_rule(5)\}. $BR
$SPACE $SPACE (f) The domain of the function is the interval \{ans_rule(15)\}. $BR
$SPACE $SPACE (g) The range of the function is the interval \{ans_rule(15)\}. $BR
$SPACE $SPACE (h) The \(x\)-intercepts of \(f\), if any exist, are \{ans_rule(25)\}. $BR
$SPACE $SPACE (i) The \(y\)-intercept of \(f\), if it exists, is \{ans_rule(15)\}.
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
setFracListPoints();
$vertx = Fraction(-$b,2*$a)->reduce;
$verty = Fraction(4*$a*$c - ($b)**2,4*$a)->reduce;
$vert = List(Point($vertx,$verty));
ANS($vert->cmp(checkFracPoint()));

Context("ImplicitPlane");
$aos = ImplicitPlane("x = $vertx");
ANS($aos->cmp());
Context()->texStrings;
$daos = "x = $vertx";
Context()->normalStrings;

setFracListIntervals();
if ($a < 0) {
  $dec = List(Interval("($vertx,inf)"));
  $inc = List(Interval("(-inf,$vertx)"));
} else {
  $inc = List(Interval("($vertx,inf)"));
  $dec = List(Interval("(-inf,$vertx)"));
}
ANS($inc->cmp(checkFracInterval()));
ANS($dec->cmp(checkFracInterval()));

ANS($popmm->cmp());
ANS($verty->cmp(studentsMustReduceFractions=>1));

$domain = List(Interval("R"));
$range = ($a < 0) ? List(Interval("(-inf,$verty]")) : List(Interval("[$verty,inf)"));
ANS($domain->cmp(checkFracInterval()));
ANS($range->cmp(checkFracInterval()));

setFracListPoints(0);
Context()->strings->add("none"=>{});
if ($disc >= 0) {
  ($dx1, $x1) = dispSqrt(-$b,1,$disc,2*$a);
  ($dx2, $x2) = dispSqrt(-$b,-1,$disc,2*$a);
  $xints = ($disc == 0) ? List(Point($x1,0)) : List(Point($x1,0), Point($x2,0));
  ANS($xints->cmp(checkFracPoint()));
  Context()->texStrings;
  $dxints = ($disc == 0) ? "\left($dx1,0\right)" : "\left($dx1, 0\right), \left($dx2, 0\right)";
  $dxints = "\(\displaystyle $dxints\)";
} else {
  $xints = List(String("none"));
  $dxints = "none";
  ANS($xints->cmp(checkFracPoint()));
}

Context()->normalStrings;
$yint = List(Point(0,$c));
ANS($yint->cmp(checkFracPoint()));


###########################################################################
# use PeriodicRerandomization to write the answer and generate a new
# version of the problem
###########################################################################
Context()->texStrings;
if ($attempts_modp == 0 && $actualAttempts != 0) {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Answer:${EBOLD} $BR (a) \($vert\), $BR (b) \($daos\), $BR (c) \($inc\), $BR (d) \($dec\), $BR (e) \{$popmm->correct_ans()\} at \(y = $c\), $BR (f) \($domain\), $BR (g) \($range\), $BR (h) $dxints, $BR (i) \($yint\).
  $PAR
  END_TEXT
} else {
  BEGIN_TEXT
  $PAR
  ${BBOLD}Help:${EBOLD} \{helpLink("points", "Click here for help entering points as answers")\} or \{ helpLink("intervals", "click here for help entering intervals as answers.") \} \{ MUHelp("sqrt") \} If no such intercept exists, type ${BBOLD}none${EBOLD}.
  $BR
  END_TEXT
}
Context()->normalStrings;
PeriodicStatus(); 

COMMENT('Features Periodic Rerandomization. Created in 2013.
$BR
Desc: Find all of the info (same for each instance).  Leading coefficient always +/- 1/2. No fractions in vertex. The discriminant when solving is not a perfect square so they are forced to use the quadratic formula.');
ENDDOCUMENT();
