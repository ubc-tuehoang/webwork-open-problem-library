# DESCRIPTION
# Problem from Calculus, multi-variable, Hughes-Hallett et al.,
# originally from 5ed (with updates)
# WeBWorK problem written by Gavin LaRose, <glarose@umich.edu>
# ENDDESCRIPTION

DOCUMENT();

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"MathObjects.pl",
# "parserNumberWithUnits.pl",
# "parserFormulaWithUnits.pl", 
# "parserFormulaUpToConstant.pl",
# "PGcourse.pl",
);

## KEYWORDS('linearization', 'differentials', 'multivariable', 'functions')
## Tagged by glr 08/10/09


## DBsubject('Calculus')
## DBchapter('Partial Derivatives')
## DBsection('Tangent Planes')
## Date('')
## Author('Gavin LaRose')
## Institution('University of Michigan')
## TitleText1('Calculus')
## EditionText1('5')
## AuthorText1('Hughes-Hallett')
## Section1('14.3')
## Problem1('11')

## Textbook tags
## HHChapter1('Differentiating Functions of Several Variables')
## HHSection1('Local Linearity and the Differential')

##  Edited a lot by Paul Seeburger

Context("Numeric");
Context()->flags->set(
  tolerance => 0.0000001,
  tolType => "relative",
);
Context()->{format}{number} = "%.6f#";
Context()->variables->add( y=>'Real', 'dx'=>'Real', 'dy'=>'Real' );
$showPartialCorrectAnswers = 1;

$v1 = list_random('x', 'y');
$v2 = ( $v1 eq 'x' ) ? 'y' : 'x';
#$f2 = list_random('ln', 'arctan');
$a = random(1, 4, 1);
$b = random(2, 5, 1);
$c = random(-15, 15, 1);
$d = random(-15, 15, 1);

$f = Compute( "{$v1}^{$b}*{$v2}^{$a} + $c*{$v1} + $d" )->reduce();

#$whichf = list_random(0,1);
#if ( $whichf ) {
#    $f = Compute( "{$v1}^$b*$f2($v2)" );
#} else {
#    $f = Compute( "e^{-$v1}*$f2($v2)" );
#}

$fx = $f->D('x');
$fy = $f->D('y');
$df = Compute( "($fx)*dx + ($fy)*dy" );

$x0 = random(-5, 5, 1);
$y0 = random(-5, 5, 1);

$dx = random(0.01, 0.2, .01);
$dy = random(0.02, 0.2, .01);
$sx = random(-1, 1, 2);
$sy = random(-1, 1, 2);

$dx = $sx*$dx;
$dy = $sy*$dy;

$x = $x0 + $dx;
$y = $y0 + $dy;

Context()->texStrings;
TEXT(beginproblem());
BEGIN_TEXT

Find the total differential of the function
\( z = $f \).

$PAR
\( dz = \) \{ ans_rule(35) \}

$PAR
Now calculate \(\Delta z \) and \(dz\) for \(x = $x0, y = $y0\), and \(f($x, $y)\). $PAR
Enter \(\Delta z \) and \( dz \) without rounding off. $BR Also show the work requested below.

$PAR
 \(\Delta z = f( \) \{ans_rule(10)\} \( ) - f( \) \{ans_rule(10)\} \( ) \approx \) \{ans_rule(10)\}

$PAR
\( dx = \) \{ans_rule(5)\} and \( dy = \) \{ans_rule(5)\}, so
$PAR
\( dz = f_{x}( \) \{ans_rule(10)\} \( ) dx + f_{y}( \) \{ans_rule(10)\} \( ) dy = \) \{ans_rule(10)\}


END_TEXT
Context()->normalStrings;

ANS($df->cmp() ); # total differential dz


$P = List($x0, $y0);
$Q = List($x, $y);
$deltaZ = $f->eval(x=>$x, y=>$y) - $f->eval(x=>$x0, y=>$y0);
$dz = $fx->eval(x=>$x0, y=>$y0)*$dx + $fy->eval(x=>$x0, y=>$y0)*$dy;

ANS($Q->cmp(ordered=>1));
ANS($P->cmp(ordered=>1));
ANS($deltaZ->cmp( # tolType => 'absolute',  tolerance => .0001
));
ANS(Compute($dx)->cmp());
ANS(Compute($dy)->cmp());
ANS($P->cmp(ordered=>1));
ANS($P->cmp(ordered=>1));
ANS($dz->cmp( # tolType => 'absolute', tolerance => .0001
));

Context()->texStrings;
SOLUTION(EV3(<<'END_SOLUTION'));
$PAR SOLUTION $PAR

Since \(  \frac{\partial z}{\partial x} = $fx \) and \(  \frac{\partial z}{\partial y} = $fy\),
we have
\[ dz = $df. \]

END_SOLUTION
Context()->normalStrings;


COMMENT('MathObject version');
ENDDOCUMENT();
