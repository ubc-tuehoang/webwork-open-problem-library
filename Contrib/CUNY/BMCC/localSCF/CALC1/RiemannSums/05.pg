## DBsubject(Algebra)
## DBchapter(Conic sections)
## DBsection(Circles)
DOCUMENT();  
loadMacros(
	"PGstandard.pl",
	"MathObjects.pl",
	"PGinfo.pl",
	"AppletObjects.pl",
    #"source.pl",
	"PGcourse.pl",
        "contextFraction.pl"
);
TEXT(beginproblem());

$showPartialCorrectAnswers = 1;

Context("Numeric");
Context()->variables->add(y=>"Real");
Context()->variables->add(z=>"Real");

$n=22;

$answer = Compute("$n");
######################################
# Create  link to applet:
###################################
# You can name your applet (anything reasonable :-) )
# Adjust the height and width as desired
# Paste the geogebra parameters in at the bottom of the page just above the 
# command end command
# so that they don't get in the way
###################################


$appletName = "ggbfoo";
$applet =  GeogebraWebApplet(
   code       => "geogebra.GeoGebraApplet",
   archive    => "geogebra.jar",
   codebase                 => findAppletCodebase("geogebra.jar"),                           
   appletName              => $appletName,
   appletId                    => $appletName,
   submitActionAlias     => 'getAppletValues',  # default actionAlias
   initializeActionAlias   => '',  # default actionAlias
   setStateAlias             => 'setXML',
   getStateAlias             => 'getXML',
   setConfigAlias           => '',
   getConfigAlias           => '',
   returnFieldName       => '',
   width                 => 400,              # may want to modify width
   height                => 500,              # may want to modify height 
  # mayscript             => "true",
   debugMode             => 0,   # set debugMode to 0 for no debug
                                              # to 1 to make xml representation visible
                                              # to 2 to add alerts detailing progression
                                              # through the applet
   onInit                => 'ggbOnInit',
   type                  => 'geogebraweb',
   submitActionScript    => qq{ getQE('answerBox').value = getAppletValues() },
   selfLoading           => 1,
   params     => GEOGEBRA_PARAMS(),# paste parameters in 
 
);


##################################
# Setup GeogebraWebApplet -- 
###################################

HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function ggbOnInit(param) {
   var applet = document.$appletName; 
		if (param == "$appletName") {
 			applet_loaded(param,1);  // report that applet is ready. 
 			ww_applet_list[param].safe_applet_initialize(2);
 			ww_applet_list[param].object = param;
 			console.log("ggbOnInit: ww_applet_list["+param+"].object = ", ww_applet_list[param].object );
 		}

}
</script>
END_SCRIPT
HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );
<script language="javascript">
function setConfig() {
  var appletState = getQE('${appletName}_state').value;
 //console.log("appletState =" + appletState);
 //console.log( "foobar " +ww_applet_list['$appletName'].object);
       if  (ww_applet_list['$appletName'].object == undefined )  {
                setTimeout("setConfig()", 5000); 
                console.log("waiting");
       } else {
        //console.log("run setConfig");
        //console.log("object is " +ww_applet_list['ggbfoo'].object);
        var applet=$appletName;
      }
   
}
</script>
END_SCRIPT



HEADER_TEXT( MODES(TeX=>'', HTML=><<END_SCRIPT ) );

<script language="javascript">
function getAppletValues() {
    console.log("getAppletValues() entered");
	// get a handle for the applet object
	var applet = $appletName;
        var n = applet.getValue("n");
       
        return( n ); 
}
 </script>
END_SCRIPT
###################################
#insert applet into body  -- this does not need to be changed
# except to adjust the insertion of the reinitialize_button or 
# a hidden AnswerBox
###################################
 TEXT($PAR,  MODES(TeX=>'geogebraweb code', 
                      HTML=>$applet->insertAll(
                                debug =>0, 
                                reinitialize_button => 1, 
                                includeAnswerBox=>1,
 )));

#######################################
# TEXT
#######################################
Context()->texStrings;
BEGIN_TEXT
Consider the applet above.
$BR
$BR
The graph in red is the graph of \(y=f(x)\) where
$BR
\(f(x)=\sqrt{4-x^2}\) on the interval [0, 2].
$BR
$BR
The applet uses mid-point Riemann sums to approximate
$BR
\( \displaystyle \int_0^2 f(x)dx = \pi\)
$BR
$BR
Use the slider at the top to change the number of sub-intervals
$BR
used to compute the Rimnann sum.
$BR
$BR
Find the the smallest number of subintervals required to compute \(\pi\)
$BR
accurately when rounding to two decimal places.
END_TEXT

#TEXT($PAR, "foostate |", $inputs_ref->{ "${appletName}_state"}, "|");

TEXT( "run SetConfig", q!<script language="javascript">setConfig()</script> !) if $inputs_ref->{ "${appletName}_state"} =~ "restart_applet";

#########################################
# ANSWER section
#########################################

NAMED_ANS( 'answerBox' => $answer->cmp( tolerance => .1 ));

sub GEOGEBRA_PARAMS {
    my $result = {
showResetIcon=>"false" ,
enableRightClick=>"false" ,
enableLabelDrags=>"false", 
showMenuBar=>"false" ,
showToolBar=>"false", 
showAlgebraInput=>"false", 
useBrowserForJS=>"true", 
ggbbase64=>"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"};
$result;
}
ENDDOCUMENT();