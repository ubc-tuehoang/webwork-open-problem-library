## DESCRIPTION
## DBsubject(Statistics)
## DBchapter(Hypothesis tests)
## DBsection(One-way ANOVA)
## Date(2018/05/08)
## Institution(British Columbia Institute of Technology)
## Author(Stefan Lukits)
## KEYWORDS('Statistical inference')
## supported by the BCcampus Open Homework Systems Project Grant

DOCUMENT();
## Initializations:
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGcourse.pl"
);

#########################################################
## Setup: this is where we use Perl and PG objects

## The degrees of freedom are
## $df1, $df2. The F value is $Fval, the p-value is $pval, the critical
## value is $crit.

### Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
# warn("seed: " . $seed);

@rest=(
"Via Tevere",
"Nicli Antica",
"Farina",
"The Parlour",
"Campagnolo Roma",
"Bufala",
"Barbarella",
"Straight Outta Brooklyn"
);

### Call R server
rserve_eval("set.seed($seed)"); 

$i1=random(0,4,1);
@siglevel=rserve_eval('
sls<-c(0.1,0.05,0.025,0.01,0.005);
## do this in pg perl instead see keac.pg
i1<-sample(x=seq(1,5),size=1,replace=F);
sl<-sls[i1];
');
$sigf=$siglevel[0];
$conf=1-$siglevel[0];
## $sigf=$siglevel[$i1];
## $conf=1-$siglevel[$i1];

@yorn=rserve_eval("
zaixooke<-c(1,2);
beingoda<-sample(zaixooke);
ryorn<-beingoda[[1]];
if (ryorn==1) ma=runif(8,11,13) else ma=rep(12,8);
");

@shuffle=rserve_eval("
aedumiem<-seq(1,8,1);
exohzohh<-sample(aedumiem);
");
$shffl[0]=$shuffle[0]-1;
$shffl[1]=$shuffle[1]-1;
$shffl[2]=$shuffle[2]-1;
$shffl[3]=$shuffle[3]-1;
$shffl[4]=$shuffle[4]-1;
$shffl[5]=$shuffle[5]-1;
$shffl[6]=$shuffle[6]-1;
$shffl[7]=$shuffle[7]-1;

@gnums=rserve_eval("
na<-round(runif(8,11.5,23.5),0);
");

@da=rserve_eval("
rda<-round(rnorm(na[[1]],ma[[1]],0.3),1);
");
$aeta=$da[0];
for ($i1=1;$i1<=$#da;++$i1)
{
$aeta=$aeta.", ".$da[$i1];
}

@db=rserve_eval("
rdb<-round(rnorm(na[[2]],ma[[2]],0.3),1);
");
$aetb=$db[0];
for ($i1=1;$i1<=$#db;++$i1)
{
$aetb=$aetb.", ".$db[$i1];
}

@dc=rserve_eval("
rdc<-round(rnorm(na[[3]],ma[[3]],0.3),1);
");
$aetc=$dc[0];
for ($i1=1;$i1<=$#dc;++$i1)
{
$aetc=$aetc.", ".$dc[$i1];
}

@dd=rserve_eval("
rdd<-round(rnorm(na[[4]],ma[[4]],0.3),1);
");
$aetd=$dd[0];
for ($i1=1;$i1<=$#dd;++$i1)
{
$aetd=$aetd.", ".$dd[$i1];
}

@de=rserve_eval("
rde<-round(rnorm(na[[5]],ma[[5]],0.3),1);
");
$aete=$de[0];
for ($i1=1;$i1<=$#de;++$i1)
{
$aete=$aete.", ".$de[$i1];
}

@df=rserve_eval("
rdf<-round(rnorm(na[[6]],ma[[6]],0.3),1);
");
$aetf=$df[0];
for ($i1=1;$i1<=$#df;++$i1)
{
$aetf=$aetf.", ".$df[$i1];
}

@dg=rserve_eval("
rdg<-round(rnorm(na[[7]],ma[[7]],0.3),1);
");
$aetg=$dg[0];
for ($i1=1;$i1<=$#dg;++$i1)
{
$aetg=$aetg.", ".$dg[$i1];
}

@dh=rserve_eval("
rdh<-round(rnorm(na[[8]],ma[[8]],0.3),1);
");
$aeth=$dh[0];
for ($i1=1;$i1<=$#dh;++$i1)
{
$aeth=$aeth.", ".$dh[$i1];
}

@t1=rserve_eval("
n<-c(length(rda),length(rdb),length(rdc),length(rdd),length(rde),length(rdf),length(rdg),length(rdh));
group<-rep(1:8,n);
y<-c(rda,rdb,rdc,rdd,rde,rdf,rdg,rdh);
data<-data.frame(y=y,group=factor(group));
fit<-lm(y~group,data);
z<-anova(fit);
results<-c(z[[1]][[1]],z[[1]][[2]],z[[4]][[1]],z[[5]][[1]],qf(1-sl,z[[1]][[1]],z[[1]][[2]]));
");
$df1=$t1[0];
$df2=$t1[1];
$Fval=$t1[2];
$pval=$t1[3];
$crit=$t1[4];

if ($pval<$sigf)
{
$incorr="not sufficient evidence to support the claim that the means of the pizza diameters for the eight pizzerias do not equal each other (fail to ";
$corr="sufficient evidence to support the claim that the means of the pizza diameters for the eight pizzerias do not equal each other (";
}
else
{
$incorr="sufficient evidence to support the claim that the means of the pizza diameters for the eight pizzerias do not equal each other (";
$corr="not sufficient evidence to support the claim that the means of the pizza diameters for the eight pizzerias do not equal each other (fail to ";
}

$reject = RadioButtons(
[
["${corr}reject \(H_{0}\))","${incorr}reject \(H_{0}\))"]
],
"${corr}reject \(H_{0}\))"
);

#########################################################
## Main Text: where all text goes
## Solution: the test statistic is $tstat and the \(p\)-value is $pvalue.
Context()->texStrings;
BEGIN_TEXT
A journalist wonders whether pizzas in Vancouver are all the same size no matter who makes them. She chooses eight pizzerias and measures the diameter of their 12 inch pizzas, resulting in the following eight lists:
$PAR
$rest[$shffl[0]]: $aeta
$BR
$rest[$shffl[1]]: $aetb
$BR
$rest[$shffl[2]]: $aetc
$BR
$rest[$shffl[3]]: $aetd
$BR
$rest[$shffl[4]]: $aete
$BR
$rest[$shffl[5]]: $aetf
$BR
$rest[$shffl[6]]: $aetg
$BR
$rest[$shffl[7]]: $aeth
$PAR
Assume that the populations are normally distributed with an
approximately equal standard deviation. Assume that the simple
random samples are independent. Conduct a one-way ANOVA at a $conf
confidence level to examine the null hypothesis that the mean of
pizza diameters is equal for all pizzerias.
$PAR
(i) the test statistic is approximately \{ ans_rule(20) \}
$BR
(ii) the \(p\)-value is approximately \{ ans_rule(20) \}
$BR
(iii) the critical value from the F-distribution is approximately \{ ans_rule(20) \}
$BR
(iv) the decision is that there is
\{ $reject->buttons() \}
END_TEXT

## Answers evaluation
$showPartialCorrectAnswers = 1;
ANS(num_cmp($Fval,
  tolType => 'absolute',
    tolerance => .001,
    ));
ANS(num_cmp($pval,
  tolType => 'absolute',
    tolerance => .001,
    ));
ANS(num_cmp($crit,
  tolType => 'absolute',
    tolerance => .001,
    ));
ANS($reject->cmp());

#########################################################
COMMENT('This problem requires WeBWorK integration of R statistical software. See the WeBWorK wiki for documentation.');

ENDDOCUMENT();

