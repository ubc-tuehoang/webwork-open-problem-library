## DESCRIPTION
## Using a comparison test
## ENDDESCRIPTION

## KEYWORDS('calculus', 'series', 'comparison', 'limit comparison')

## DBsubject(Calculus - single variable)
## DBchapter(Infinite Sequences and Series)
## DBsection(Comparison Tests)
## Date('02/01/2018')
## Author('Eric Errthum')
## Institution('Winona State University')
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('7')
## Section1('11.4')
## Problem1('15')

############################################################################
## Copyright (C) 2018 Eric Errthum, Ph.D.
##
## This work is licensed under the Creative Commons
## Attribution-NonCommercial-ShareAlike 3.0 Unported License
## <https://creativecommons.org/licenses/by-nc-sa/3.0/>
##

#######################
## Initialization

DOCUMENT();
loadMacros(
	"PGstandard.pl",
	"parserPopUp.pl",
	"scaffold.pl",
	"PGunion.pl",
	"parserMultiAnswer.pl",
	"parserOneOf.pl",
	);

TEXT(&beginproblem);

Context("Numeric");
Context( )->variables->add("n"=>"Real");

###################################
# Setup

$a = random(2,7,1);
$b = $a+random(1,3,1);
$c = (-1)**random(1,2,1)*($a+random(2,5,1));

if ($c<0)
	{
	$popupComp=PopUp(["Select","Direct or Limit","Limit Only"],"Direct or Limit");
	$popupComp2=PopUp(["Select","Direct","Limit"],"Direct");
	}
	else
	{
	$popupComp=PopUp(["Select","Direct or Limit","Limit Only"],"Limit Only");
	$popupComp2=PopUp(["Select","Direct","Limit"],"Limit");
	}
$popupIneq=PopUp(["Select","<",">"],">");
$popupReq=PopUp(["Select", "Greater than or equal to 1","Less than or equal to 1","Not 0 or Infinity"],"Not 0 or Infinity");
$popupConv1=PopUp(["Select","Converges","Diverges"],"Diverges");
$popupConv2=PopUp(["Select","Converges","Diverges"],"Diverges");

Context()->texStrings;

###########################################
#  The scaffold
Scaffold::Begin(      can_open => "when_previous_correct",
      is_open  => "correct_or_first_incorrect");  

#only the active section is open, but students can open previous sections if they want. 

###########################################
Section::Begin("Part 1: Identify the Comparable Function and Proper Test.");

BEGIN_TEXT
\{ beginproblem() \}


$PAR

Consider the series
\[ \sum_{n=1}^\infty \frac{$b^{n+1}}{$a^n+$c}.\]

$PAR
A comparable series with known behavior is \(\displaystyle \sum_{n=1}^\infty\) \{ ans_rule(15)  \}.$PAR

This known comparable series \{$popupConv1->menu\}. $PAR

The comparison test we can use is \{$popupComp->menu\}.

END_TEXT

### Section Answer evaluation

$showPartialCorrectAnswers = 0;

$compfun=OneOf("($b/$a)**n","$b*($b/$a)**n");
## Allows for two possible ways of handling the n+1 in the numerator

ANS($compfun->cmp);
ANS($popupConv1->cmp);
ANS($popupComp->cmp);

Section::End();
$studans = $inputs_ref->{ANS_NUM_TO_NAME(1)};

###########################################
## Construct 2nd Section Based on Value of c

if ($c<0)
{

### Section for Direct Comparison Case ###

Section::Begin("Part 2: Perform the Test");

BEGIN_TEXT
\{ beginproblem() \}

$PAR

We compare sequences: \(\dfrac{$b^{n+1}}{$a^n+$c}\) \{$popupIneq->menu\} \{ ans_rule(15)  \}.$PAR
Hence by \{$popupComp2->menu\} comparison, the original series \{$popupConv2->menu\}.

END_TEXT

### Section Answer evaluation

ANS($popupIneq->cmp);
ANS(Formula($studans)->cmp);
ANS($popupComp2->cmp);
ANS($popupConv2->cmp);

Section::End();
}

####

else
{

### Section for Limit Comparison Case ###

Section::Begin("Part 2: Perform the Test");

Context("Numeric");
Context( )->variables->add("n"=>"Real");
$origfun=Formula("$b**(n+1)/($a**n+$c)");
$studfun = Compute($studans);

#### Allows numerator and denominator of limit to be interchanged
if ($studfun==Formula("$b**(n+1)/($a**n)"))
    {$limans=1}
    else
    {$limans=$b};
$multians = MultiAnswer($origfun, $studfun, $limans)->with(
  singleResult => 1,
  allowBlankAnswers=>0,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $f1stu, $f2stu, $f3stu ) = @{$student};
      my ( $f1, $f2, $f3 ) = @{$correct};
      if ($f1 == $f1stu && $f2 == $f2stu && $f3stu == $f3) {
          return [1,1,1];
      } elsif ($f1 == $f2stu && $f2 == $f1stu && $f3stu == 1/$f3) {
          return [1,1,1];
      } else {
	      if ( ($f1 == $f1stu && $f2 == $f2stu) ||
	           ($f1 == $f2stu && $f2 == $f1stu) ) {
	          return [1,1,0];
	      } else {
	          if ($f1 == $f1stu || $f2 == $f1stu) {
	              return [1,0,0];
	          } elsif ($f1 == $f2stu || $f2 == $f2stu) {
	              return [0,1,0];
	          } else {
	              return [0,0,0];
	          }
	      }
	  }
       }
);
BEGIN_TEXT
\{ beginproblem() \}

$PAR

We compute:

\{BeginTable().
Row(['\(\displaystyle\lim_{n\to\infty}\)',$multians->ans_rule(15).$HR.$multians->ans_rule(15),'\(=\)',$multians->ans_rule(15),'which is ',$popupReq->menu.'.']).
EndTable()\}

$PAR
Hence by \{$popupComp2->menu\} comparison, the original series \{$popupConv2->menu\}.

END_TEXT

### Section Answer evaluation

ANS($multians->cmp() ); 
#ANS(num_cmp($limans));
ANS($popupReq->cmp);
ANS($popupComp2->cmp);
ANS($popupConv2->cmp);

Section::End();
}
#########################################


Scaffold::End();


######################################

ENDDOCUMENT();