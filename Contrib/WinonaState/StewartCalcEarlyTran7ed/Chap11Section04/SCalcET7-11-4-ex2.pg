## DESCRIPTION
## Using a comparison test
## ENDDESCRIPTION

## KEYWORDS('calculus', 'series', 'comparison', 'limit comparison')

## DBsubject(Calculus - single variable)
## DBchapter(Infinite Sequences and Series)
## DBsection(Comparison tests)
## Date('02/01/2018')
## Author('Eric Errthum')
## Institution('Winona State University')
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('7')
## Section1('11.4')

############################################################################
## Copyright (C) 2018 Eric Errthum, Ph.D.
##
## This work is licensed under the Creative Commons
## Attribution-NonCommercial-ShareAlike 3.0 Unported License
## <https://creativecommons.org/licenses/by-nc-sa/3.0/>
##

#######################
## Initialization

DOCUMENT();
loadMacros(
	"PGstandard.pl",
	"parserPopUp.pl",
	"scaffold.pl",
	"PGunion.pl",
	"parserMultiAnswer.pl",
	);

TEXT(&beginproblem);

Context("Numeric");
Context( )->variables->add("n"=>"Real");

###################################
# Setup

$a = random(2,9,1);
do { $b = random(2,9,1); } until ($b != $a);
$c = $a+$b+random(2,5,1);
do { $d = $a+$b+random(2,5,1); } until ($d != $c);

if ($b>=$a)
	{
	$popupConv1=PopUp(["Select","Converges","Diverges"],"Converges");
	$popupConv2=PopUp(["Select","Converges","Diverges"],"Converges");
	}
	else
	{
	$popupConv1=PopUp(["Select","Converges","Diverges"],"Diverges");
	$popupConv2=PopUp(["Select","Converges","Diverges"],"Diverges");
	}
$popupComp=PopUp(["Select","Direct or Limit","Limit Only"],"Limit Only");
$popupComp2=PopUp(["Select","Direct","Limit"],"Limit");
$popupReq=PopUp(["Select", "Greater than or equal to 1","Less than or equal to 1","Not 0 or Infinity"],"Not 0 or Infinity");

Context()->texStrings;

###########################################
#  The scaffold
Scaffold::Begin(      can_open => "when_previous_correct",
      is_open  => "correct_or_first_incorrect");  

#only the active section is open, but students can open previous sections if they want. 

###########################################
Section::Begin("Part 1: Identify the Comparable Function and Proper Test.");

BEGIN_TEXT
\{ beginproblem() \}


$PAR

Consider the series
\[ \sum_{n=1}^\infty \frac{n^{$c}+$a^n}{n^{$d}+$b^n}.\]

$PAR
A comparable series with known behavior is \(\displaystyle \sum_{n=1}^\infty\) \{ ans_rule(15)  \}.$PAR

This known comparable series \{$popupConv1->menu\}. $PAR

The comparison test we can use is \{$popupComp->menu\}.

END_TEXT

### Section Answer evaluation

$showPartialCorrectAnswers = 0;

$compfun=Formula("($a/$b)**n");

ANS(fun_cmp($compfun, vars=>"n", test_points=>[1,2,3,4,5]));
ANS($popupConv1->cmp);
ANS($popupComp->cmp);

Section::End();

###########################################

Section::Begin("Part 2: Perform the Test");

Context("Numeric");
Context( )->variables->add("n"=>"Real");
$compfun=Formula("($a/$b)**n");
$origfun=Formula("(n**$c+$a**n)/(n**$d+$b**n)");

#### Allows numerator and denominator of limit to be interchanged
$multians = MultiAnswer($compfun, $origfun)->with(
  singleResult => 0,
  checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $f1stu, $f2stu ) = @{$student};
      my ( $f1, $f2 ) = @{$correct};
      if ( ($f1 == $f1stu && $f2 == $f2stu) ||
           ($f1 == $f2stu && $f2 == $f1stu) ) {
          return [1,1];
      } else {
          if ($f1 == $f1stu || $f2 == $f1stu) {
              return [1,0];
          } elsif ($f1 == $f2stu || $f2 == $f2stu) {
              return [0,1];
          } else {
              return [0,0];
          }
      }
  }
);

BEGIN_TEXT
\{ beginproblem() \}

$PAR

\{BeginTable().
Row(['\(\displaystyle\lim_{n\to\infty}\)',$multians->ans_rule(15).$HR.$multians->ans_rule(15),'\(=\)',ans_rule(15),'which is ',$popupReq->menu]).
EndTable()\}

$PAR
Hence by \{$popupComp2->menu\} comparison, the original series \{$popupConv2->menu\}.

END_TEXT

### Section Answer evaluation

$limans=1;

ANS($multians->cmp() ); 
ANS(num_cmp($limans));
ANS($popupReq->cmp);
ANS($popupComp2->cmp);
ANS($popupConv2->cmp);

Section::End();

#########################################


Scaffold::End();


######################################

ENDDOCUMENT();