## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 5/6/06

## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Strategy for testing series)
## Date(6/3/2002)
## Institution(Univeristy of Utah)
## Author(Utah ww group)
## MLT(First_reason)
## MLTleader(1)
## Level(3)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Stewart')
## EditionText1('6')
## Section1('11.5')
## Problem1('15 12 16 14 11 6')
## TitleText2('Calculus')
## AuthorText2('Dale Varberg, Edwin J. Purcell, and Steve E. Rigdon')
## EditionText2('9')
## Section2('.')
## Problem2('')
## TitleText3('Calculus: Early Transcendentals')
## AuthorText3('Rogawski')
## EditionText3('1')
## Section3('10.4')
## Problem3('7')
## KEYWORDS('series','divergent','convergent','comparison test','geometric series','alternating series','Series' , 'Sequences' ,'calculus', 'Sequences', 'Convergent', 'Absolutely Convergent',  'Divergent')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "PGcourse.pl"
);

################################################################
# We need a special problem grader on this problem, since we
# want the student to get full credit for all six answers correct,
# 50% credit for five correct, and 0% for four or fewer correct.
# To change this scheme, look through the following mess of code
# for the place where the variable $numright appears, and change
# that part.
# Also change the long line beginning "msg ==>", to show what will
# appear on the screen for the student.
#
# To look at the problem itself, look for the boxed comment below
# announcing the problem itself.
################################################################

sub custom_problem_grader {
    my $evaluated_answers = shift;
    my $problem_state = shift;
    my %form_options = @_;

    # initial setup of the answer
    my $total = 0;
    my $problem_result = {
        score => 0,
        errors => '',
        type => 'custom_problem_grader',
        msg => 'To get full credit, all answers must be correct.  Having all but one correct is worth 50%.  Two or more incorrect answers gives a score of 0%.',
    };

    # Return unless answers have been submitted
    return($problem_result, $problem_state) unless ($form_options{answers_submitted} == 1);

    # Answers have been submitted -- process them.

    ########################################################
    # Here's where we compute the score.  The variable     #
    # $numright is the number of correct answers.          #
    ########################################################
    my $numright=0;

    foreach my $key (keys %$evaluated_answers) {
        # summing the scores is identical to checking each one is correct
        $numright += $evaluated_answers->{$key}{score};
    }

    if ($numright == 6) {
        $problem_result->{msg} = 'This attempt scored 100%. Nice work.';
	$total = 1;
    } elsif ($numright == 5) {
        $problem_result->{msg} = 'This attempt scored 50%. You must answer each part correctly for full credit.';
	$total = 0.5;
    } else {
        # the default message will suffice
	$total = 0;
    }

    $problem_result->{score} = $total;

    # increase recorded score if the current score is greater.
    $problem_state->{recorded_score} = $problem_result->{score}
        if $problem_result->{score} > $problem_state->{recorded_score};

    $problem_state{num_of_correct_ans}++ if $total == 1;
    $problem_state{num_of_incorrect_ans}++ if $total < 1;
    return ($problem_result, $problem_state);
}

################################################################
# Now, on with the problem itself.
################################################################


TEXT(beginproblem());
$showPartialCorrectAnswers = 0;

install_problem_grader(~~&custom_problem_grader);


$a0 = random(2,7,1);
$b0 = random(2,7,1);
$a1 = random(2,7,1);
$b1 = random(2,7,1);
$a2 = random(2,7,1);
$a3 = random(2,10,1);
$b3 = $a3**2 - 1;
$a4 = random(1,10,1);
$a5 = random(4,9,1);
$b5 = random(2,5,1);
$c5 = $a5 + $b5;

@choices = ( "Convergent geometric series", "Convergent \(p\)
series","Comparison (or Limit Comparison) with a geometric or \(p\) series",
"Alternating Series Test", "None of the above");

@questions=();  
$questions[0] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{ \cos(n \pi)}{ \ln($a0 n)}  \) " );
$questions[1] = EV2( " \( \displaystyle
	\sum_{n=1}^\infty \frac{(-1)^n}{$a1 n + $b1}
	\) " );
$questions[2] = EV2( " \( \displaystyle
	\sum_{n=1}^\infty \frac{\sin^2 ($a2 n)}{n^2}
	\)" );
$questions[3] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{(n+1)($b3)^n}{$a3^{2n}}   \)" );
$questions[4] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	(-1)^n \frac{\sqrt{n}}{n +$a4}   \)" );
$questions[5] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{$a1 ($a5)^n}{$c5^{2n}}   \)" );
$questions[6] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{n^2+\sqrt{n}}{n^4 -$a4}   \)" );
$questions[7] = EV2( " \( \displaystyle \sum_{n=1}^\infty
	\frac{(-1)^n \ln(e^n) }{n^{$a5} \cos(n \pi)}   \)" );

# Now randomize the questions:
@slice = &NchooseK(8,6);
#############################################################################

TEXT(EV2(<<EOT));
Select the FIRST correct reason why the given series converges. $BR
EOT

TEXT(
&OL(@choices),
&match_questions_list(@questions[@slice])
);

@ans=();
$ans[0] = join " ",$ALPHABET[3];
$ans[1] = join " ",$ALPHABET[3];
$ans[2] = join " ",$ALPHABET[2];
$ans[3] = join " ",$ALPHABET[2];
$ans[4] = join " ",$ALPHABET[3];
$ans[5] = join " ",$ALPHABET[0];
$ans[6] = join " ",$ALPHABET[2];
$ans[7] = join " ",$ALPHABET[1];
ANS(str_cmp([@ans[@slice]], filters=>["remove_whitespace","ignore_order","ignore_case"]));

ENDDOCUMENT();        # This should be the last executable line in the problem.

