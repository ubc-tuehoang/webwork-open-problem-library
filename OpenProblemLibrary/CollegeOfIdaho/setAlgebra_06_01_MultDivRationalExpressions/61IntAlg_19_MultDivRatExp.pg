##DESCRIPTION
##  Rational Expressions and Functions: Multipy and Divide
## 
##ENDDESCRIPTION
## DBsubject(Algebra)
## DBchapter(Rational equations and functions)
## DBsection(Simplifying)
## Institution(The College of Idaho)
## Author(RA Cruz)
## MLT(Mutiply_fractions)
## MO(1)
## Level(2)
## TitleText1('Essentials of Intermediate Algebra')
## AuthorText1('Blitzer')
## EditionText1('1')
## Section1('6.1')
## Problem1('')
## KEYWORDS('rational expressions','rational functions')
## Date: 2007/11

DOCUMENT(); # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "MathObjects.pl",
  "bizarroArithmetic.pl"
#  "CofIdaho_macros.pl"
);

TEXT(beginproblem());

######################################
#  Setup
#  Form: c(ay+d)/(y-b)(y+b) * (y+b)/y(ay+d)

Context('Numeric');

Context()->variables->are(y=>'Real');

Context()->operators->set(
   '/' => {class => 'bizarro::BOP::divide', isCommand => 1},
   '/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
   ' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
   '//' => {class => 'bizarro::BOP::divide', isCommand => 1},
   '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
   '* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
   ' *' => {class => 'bizarro::BOP::multiply', isCommand => 1});


$a = random(2,5,1);

$c = random(2,5,1);

$b = non_zero_random(-5,5,1);
do {$d = non_zero_random(-9,9,1);} until (gcd($a,$d)==1);


@expression = (Formula("($a*$c y + $c*$d)/(y^2- $b*$b)")->reduce->TeX,

             Formula("(y + $b)/($a y^2 + $d y)")->reduce->TeX);
@slice = NchooseK(2,2);

@f = @expression[@slice];


######################################
#  Main text

BEGIN_TEXT
Multiply and simplify your answer.
\[$f[0] \cdot $f[1]\]
$PAR
Answer:  \{ ans_rule(30) \} 
END_TEXT

######################################
#  Answer

$den = nicestring([1,-$b], ['y','']);
$answer = Compute("$c/(y*($den))");

ANS($answer -> cmp(
   checker=>sub{
      my ( $correct, $student, $ansHash ) = @_;
      return 0 if $ansHash->{isPreview} || $correct != $student;
      $student = $ansHash->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      $student = Formula("$student"); $correct = Formula("$correct");
      return 0 unless ($correct == $student);
      Context()->flags->set(bizarroDiv=>1);
      delete $correct->{test_values};
      delete $student->{test_values};
      $student = Formula("$student"); $correct = Formula("$correct");
      my $OK = ($correct == $student);
      Context()->flags->set(bizarroDiv=>0);
      Value::Error("Your answer needs to be simplified further") unless $OK;
      return $OK;
})); 


$showPartialCorrectAnswers = 1;

######################################

ENDDOCUMENT();

