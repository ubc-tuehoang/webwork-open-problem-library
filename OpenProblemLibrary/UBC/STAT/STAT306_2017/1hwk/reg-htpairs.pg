########################################################
## DESCRIPTION
## simple linear regression and subpopulation mean
## ENDDESCRIPTION
#########################################################

#########################################################
#########################################################

#########################################################
## DBsubject(Statistics)
## DBchapter(Simple linear regression)
## DBsection(Regression)
## Date(2017/01/05)
## Institution(UBC)
## Author(H Joe)
## Level(4)
## KEYWORDS('statistics', 'simple linear regression')
#########################################################

#########################################################
## Initializations:
DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "answerHints.pl",
  "regrfnsPG.pl",   # functions for regression 
);

Context()->texStrings;

@htfather=(
176.4,173.0,171.0,174.7,172.0,166.2,171.1,163.2,171.0,168.4,185.4,172.5,
175.6,163.5,158.2,171.6,178.9,179.0,175.0,164.4,161.8,182.0,170.6,171.4,
183.9,166.1,163.4,182.6,169.9,169.9,183.2,171.1,179.2,165.3,173.6,176.2,
160.2,171.9,171.0,171.6,168.8,179.9,169.4,172.8,180.1,167.8,171.9,185.0,
180.6,173.5,154.3,187.8,177.3,172.1,163.1,166.4,173.2,169.5,171.0,173.1,
169.0,167.7,182.0,183.4,166.2,184.3,168.9,159.1,173.9,175.1,174.5,162.6,
175.4,167.5,166.9,169.5,179.1,181.2,165.4,167.9,169.3,166.1,174.6,173.9,
183.0,179.3,184.8,187.9,170.9,161.8,170.6,172.2,181.3,178.8,173.9,175.0,
168.6,171.4,177.6,174.6,172.3,166.0,173.3,178.1,177.0,174.8,168.6,171.8,
166.4,165.8,180.0,181.2,179.5,170.0,174.9,182.2,166.2,172.8,177.5,183.6,
165.2,170.4,167.9,168.5,170.0,173.6,167.6,159.5,176.2,175.9,161.3,172.1,
171.9,177.8,174.5,179.6,174.8,181.4,169.0,165.4,159.9,166.7,176.0,171.2,
170.8,163.4,174.2,170.7,183.6,164.6,176.6,173.5,162.8,163.8,163.5,167.1,
180.0,167.8,189.3,172.9,165.1,167.6,169.1,178.1,170.2,191.3,173.6,158.4,
165.0,180.1,171.9,181.4,165.7,162.5,172.9,172.3,174.3,186.0,168.4,161.3,
184.4,178.8,175.1,173.5,182.0,168.0,170.4,179.0,166.5,174.5,158.5,182.6,
174.0,160.6,164.4,185.6,163.0,181.0,171.6,164.3,181.9,173.9,173.4,174.8,
177.3,172.6,181.9,168.4,173.2,172.6,170.4,178.5,177.1,169.6,163.1,165.1,
176.9,160.9,168.9,172.7,170.7,171.7,171.2,169.4,167.6,173.5,183.2,167.8,
165.6,185.3,173.9,170.8,183.2,175.5,185.1,177.0,161.4,178.0,168.9,175.8,
172.6,167.0,164.4,173.4,176.1,170.2,169.2,175.4,180.1,186.1,166.5,173.1,
165.2,176.5,179.3,178.5,164.6,179.3,171.6,173.5,165.7,186.3,170.5,161.1,
163.9,164.9,168.1,173.5,179.1,172.8,169.8,171.6,180.3,167.8,173.3,163.4,
182.7,175.5,170.8,166.2,170.6,173.4,169.6,174.9,184.5,172.6,171.2,176.6,
175.9,170.8,169.8,176.8,187.4,162.5,178.5,178.6,167.9,182.4,174.2,162.9,
177.6,166.6,165.2,160.7,186.2,177.0,187.7,157.2,174.7,175.5,172.2,183.5,
170.6,156.5,181.4,194.2,157.8,176.7,170.0,182.4,180.1,178.6,174.9,167.8,
170.8,174.1,165.1,168.1,168.5,182.3,177.3,163.6,158.7,164.1,184.2,179.3,
184.9,174.8,169.9,185.4,181.5,167.7,175.4,160.6,168.2,176.4,173.0,170.8,
193.4,179.2,179.7,160.5,163.3,182.7,175.1,180.2,177.0,173.8,155.3,171.9,
172.7,158.5,172.9,174.4,165.8,169.6,174.0,168.6,159.0,182.5,176.9,180.1,
180.2,168.2,188.6,180.1,170.2,177.4,182.8,175.0,177.2,174.6,167.0,183.2,
168.2,170.1,164.1,177.4,175.9,174.7,171.7,178.4,165.0,178.8,173.5,177.3,
160.0,175.2,185.1,181.0,172.1,175.6,169.3,172.5,175.1,164.2,172.3,168.2,
172.9,169.4,168.9,170.5,176.4,176.8,162.3,169.5,174.1,168.7,174.5,166.6,
163.2,166.2,172.5,170.6,177.1,179.0,187.1,175.8,169.5,182.4,194.8,162.3,
174.8,161.5,171.0,169.0,170.3,170.3,169.1,178.8,173.8,163.9,182.1,169.7,
167.3,176.9,176.5,171.6,179.7,178.0,169.9,184.0,186.5,168.6,177.7,170.3,
174.3,167.3,170.2,179.9,172.3,184.1,178.3,174.3,164.2,163.9,174.0,169.1,
169.8,165.0,168.4,159.2,171.4,157.4,164.7,194.3,171.2,167.8,167.7,155.0,
168.1,161.6,178.7,175.1,186.8,158.0,164.1,170.7,183.2,184.1,171.3,170.2,
182.2,174.3,170.2,172.8,178.3,164.1,183.1,169.4);

@htson=(
179.3,169.6,173.3,179.3,175.2,163.6,180.0,163.6,178.9,167.4,186.0,167.1,
176.0,163.6,160.4,172.9,176.9,180.0,174.3,164.9,168.7,173.5,162.4,162.9,
178.3,176.3,156.4,179.8,171.6,171.8,177.6,180.2,167.9,177.4,179.9,183.0,
164.9,169.9,173.0,186.8,179.9,186.2,174.0,181.8,173.1,182.5,169.5,177.5,
182.9,181.3,161.9,187.7,166.9,165.3,167.5,179.8,176.7,183.4,178.0,173.6,
171.4,171.9,192.0,178.7,178.2,189.3,175.2,158.2,166.2,170.8,184.4,174.2,
184.1,168.7,172.7,160.4,183.2,178.8,173.9,167.9,182.9,178.4,168.0,178.8,
182.6,184.1,182.6,184.1,170.7,168.1,182.4,171.2,185.2,174.1,176.6,177.6,
175.9,178.0,181.0,170.1,177.2,164.4,169.3,173.2,176.1,191.0,173.1,166.8,
170.0,171.0,172.2,169.3,169.8,177.7,178.8,171.1,174.1,172.6,186.1,188.8,
153.5,151.5,167.7,181.4,178.5,178.2,170.0,178.4,181.4,183.0,168.1,176.4,
168.1,176.1,177.1,174.4,183.4,184.9,183.9,166.5,172.1,168.1,182.8,171.9,
177.8,159.6,179.4,163.9,176.2,172.8,180.8,169.3,179.7,169.1,163.1,180.0,
178.8,174.4,192.5,169.2,157.0,169.6,177.4,172.2,176.7,198.0,174.6,159.9,
165.3,169.7,171.6,193.7,177.3,167.6,170.4,168.2,179.1,185.9,166.9,163.6,
175.0,171.7,186.9,173.7,175.6,181.4,170.5,183.6,166.8,168.3,179.8,181.6,
168.3,164.3,167.8,185.0,171.0,171.0,172.1,168.6,169.6,173.7,170.7,170.8,
178.2,167.4,176.1,164.2,172.6,184.4,174.7,193.0,179.4,171.2,172.4,167.6,
180.1,164.1,176.8,156.8,169.4,168.3,174.3,169.0,169.8,175.6,188.6,176.4,
172.9,188.8,167.0,173.2,177.3,173.5,188.9,167.0,163.3,175.1,177.5,181.5,
179.6,168.4,172.5,178.2,183.6,185.2,177.6,179.1,171.4,177.1,171.2,182.6,
176.3,174.0,177.6,183.5,163.5,178.3,168.9,162.8,169.3,181.7,177.5,164.9,
167.1,169.2,170.6,180.5,169.1,176.1,178.8,169.2,181.6,168.4,173.6,170.1,
176.5,165.2,165.5,166.9,178.5,177.3,165.5,174.3,179.5,169.5,170.8,174.9,
180.4,174.7,169.0,179.3,182.1,171.7,178.5,182.5,167.9,188.4,168.2,161.5,
162.4,174.6,162.0,171.8,187.7,159.2,184.1,168.5,174.7,181.5,175.2,166.8,
175.9,159.5,181.6,182.2,165.4,187.1,182.3,190.1,185.4,174.0,168.9,172.4,
174.1,174.3,171.5,164.6,169.2,184.8,176.2,171.0,157.3,165.7,181.1,178.7,
182.9,177.2,170.7,177.7,172.3,175.0,166.7,159.0,169.2,181.9,175.8,168.2,
190.3,166.9,179.7,166.9,172.0,185.4,180.5,181.8,169.0,170.6,164.7,177.0,
181.2,171.6,176.1,172.1,169.3,174.3,182.5,163.3,172.1,177.4,177.5,178.0,
171.5,183.8,182.0,183.2,181.8,175.9,175.4,180.8,171.8,174.5,170.9,175.7,
173.2,184.5,171.8,187.6,179.8,172.7,176.0,187.1,165.6,179.9,170.0,177.9,
176.0,181.0,178.4,170.3,175.7,182.7,165.5,172.1,178.4,175.4,179.9,163.7,
172.2,165.4,173.0,176.8,165.7,177.1,166.3,171.7,172.8,172.4,170.2,172.9,
165.5,176.2,172.1,176.0,173.8,186.6,169.9,181.4,178.7,176.8,185.8,163.6,
181.7,171.5,172.0,169.6,174.2,181.1,172.2,178.1,173.8,164.7,190.5,171.7,
182.6,175.2,169.9,177.7,186.2,176.6,176.6,184.3,176.4,176.7,174.3,168.3,
178.6,174.6,175.2,179.4,177.5,183.2,187.0,163.8,160.0,168.5,174.6,164.1,
169.6,169.6,181.9,174.5,171.6,171.8,176.5,192.1,172.0,171.2,170.4,162.8,
175.8,167.2,183.5,176.4,183.3,163.2,172.7,168.6,177.7,179.6,165.8,169.1,
175.3,170.1,176.5,172.4,172.3,165.0,186.7,168.1);

# random subset
#$ssize=100; $tstar=1.984467;
#$ssize=50; $tstar=2.010635;
$ssize=180; $tstar=1.973381;
@ii=isamp(500,$ssize);

# variables for answers
@x=@htfather[@ii];
@y=@htson[@ii];
@fit=lsreg(@x,@y);
# output ($n,$xbar,$ybar,$sx2,$sy2,$sxy,$b0,$b1,$sse,$mse,$x0);

$ansa1=$fit[1];
$ansa2=$fit[2];
$ansa3=sqrt($fit[3]);
$ansa4=sqrt($fit[4]);
$ansa5=$fit[5]/$ansa3/$ansa4;

$ansb1=$fit[6];
$ansb2=$fit[7];

#for($k=0;$k<10;$k++) { print $fit[$k]," "; }
#print "\n";
$xnew=random(177,182,1);
# check if subset size is 0
$sumn=0;
for($i=0;$i<$ssize;$i++)
{ if($x[$i]>=$xnew-2.5 && $x[$i]<=$xnew+2.5)
  { $sumn=$sumn+1; }
}
if($sumn<=2) { $xnew=177; }

@pred=subpopmeanint(@fit,$xnew);
#print $pred[0]," ",$pred[1],"\n";

$ansc1=$pred[0];  # mu_{y|x}
$ansc2=$pred[1];  # SE
$ansc3=$tstar;
$ansc4=$ansc1-$tstar*$ansc2;
$ansc5=$ansc1+$tstar*$ansc2;

$zstar=1.96;
$zstar=2;
$sumn=0;
$sumy=0;
$sumy2=0;
for($i=0;$i<$ssize;$i++)
{ if($x[$i]>=$xnew-2.5 && $x[$i]<=$xnew+2.5)
  { $sumn=$sumn+1;
    $sumy=$sumy+$y[$i];
    $sumy2=$sumy2+$y[$i]**2;
  }
}
$mn=$sumy/$sumn;
$sy2=($sumy2-$sumn*$mn*$mn)/($sumn-1);
$sy=sqrt($sy2);
$ansd1=$mn-$zstar*$sy/sqrt($sumn);
$ansd2=$mn+$zstar*$sy/sqrt($sumn);

$anse="information";


$n=$ssize;
$xstr="x=c(";
for($i=0;$i<$n-1;$i++) { $xstr=$xstr . $x[$i] . ", " ; }
$xstr=$xstr . $x[$n-1] . ")";
$ystr="y=c(";
for($i=0;$i<$n-1;$i++) { $ystr=$ystr . $y[$i] . ", " ; }
$ystr=$ystr . $y[$n-1] . ")";


#The summary statistics are 
#$fit[1], $fit[2], $fit[3], $fit[4], $fit[5], $fit[6], $fit[7].
#The predictions are
#$pred[0], $pred[1],
#<BR>
#For subpopn, $mn, $sy, $ansd1, $ansd2.

# Main Text
BEGIN_TEXT
The variables are x=height of father and y = height of corresponding son.
The unit is centimetre (cm).

For input into R, the 
data vectors for heights of fathers and corresponding heights of their
sons are 
$BR
$xstr 
$BR
and
$BR
$ystr
$BR

For the questions below, use 3 decimal places.

$BR
$BBOLD Part a) $EBOLD
$BR
The summary statistics (sample means of x and y, SDs of x and y,
correlation coefficient): 
$BR
\({\bar x}\) = \{ ans_rule(8) \}
$BR
\({\bar y}\) = \{ ans_rule(8) \}
$BR
\(s_x\) = \{ ans_rule(8) \}
$BR
\(s_y\) = \{ ans_rule(8) \}
$BR
\({r_{xy}}\) = \{ ans_rule(8) \}
$BR

$BR
$BBOLD Part b) $EBOLD
$BR
The coefficients of the least square regression line are
$BR
\({\hat \beta}_0\)= \{ ans_rule(8) \}
$BR
\({\hat \beta}_1\)= \{ ans_rule(8) \}
$BR

$BR
$BBOLD Part c) $EBOLD
$BR
Suppose we want to get a confidence interval for the subpopulation mean
of son's height \(\mu_{Y}(x)\) for fathers with a height of \(x=$xnew\).
$BR
The estimated subpopulation mean  is  \{ ans_rule(8) \}.
$BR
The standard error for this estimate is \{ ans_rule(8) \}.
$BR
The t critical value for the 95% confidence interval is \{ ans_rule(8) \}.
$BR
The lower endpoint of the 95% confidence interval for  \(\mu_{Y}(x)\)
is \{ ans_rule(8) \}.
$BR
The upper endpoint of the 95% confidence interval for  \(\mu_{Y}(x)\)
is \{ ans_rule(8) \}.
$BR

$BR
$BBOLD Part d) $EBOLD
$BR
For comparison, let's not use regression to get a confidence interval for
the subpopulation mean.
Consider instead the subset of fathers whose height is within 2.5 cm of 
\(x=$xnew\), including the endpoints.
Based on the corresponding sons of these fathers obtain an
approximate 95% confidence interval of the form
$BR
 \({\overline y}(x) \pm 2 \times s_y(x)/\sqrt{n(x)}\)
$BR
The lower endpoint of the 95% confidence interval 
is \{ ans_rule(8) \}.
$BR
The upper endpoint of the 95% confidence interval 
is \{ ans_rule(8) \}.
$BR

$BR
$BBOLD Part e) $EBOLD
$BR
Why is the confidence interval in (c) shorter than the confidence interval
in (d)? It is based on more
\{ ans_rule(20) \} (put in one suitable word).
$BR


END_TEXT
#########################################################

BEGIN_HINT
Check the class notes.
END_HINT

#########################################################
$showPartialCorrectAnswers = 1;

ANS( num_cmp($ansa1,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansa2,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansa3,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansa4,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansa5,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansb1,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansb2,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansc1,tol=> 0.15, tolType=>"absolute") );
ANS( num_cmp($ansc2,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansc3,tol=> 0.015, tolType=>"absolute") );
ANS( num_cmp($ansc4,tol=> 0.15, tolType=>"absolute") );
ANS( num_cmp($ansc5,tol=> 0.15, tolType=>"absolute") );
ANS( num_cmp($ansd1,tol=> 0.15, tolType=>"absolute") );
ANS( num_cmp($ansd2,tol=> 0.15, tolType=>"absolute") );

ANS( str_cmp($anse) );

$xlb=$xnew-2.5;
$xub=$xnew+2.5;
#########################################################
BEGIN_SOLUTION
Below is some R code for part (d).
$BR
isub=(x>=$xlb & x<=$xub)
$BR
ysub=y[isub]
$BR
ymn=mean(ysub)
$BR
ysd=sd(ysub)
$BR
nsub=length(ysub)
$BR
moe=2*ysd/sqrt(nsub)
$BR
ymn
$BR
ymn-moe
$BR
ymn+moe
END_SOLUTION
#########################################################

ENDDOCUMENT();

