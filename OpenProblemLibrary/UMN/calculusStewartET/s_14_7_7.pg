#DESCRIPTION
##  Calculus: Local extrema of functions of two variables
##ENDDESCRIPTION

## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Extreme values and optimization)
## Date(04/18/2014)
## Institution(Colby College)
## Author(Justin Sukiennik)
## MLT(maxMinSaddleList)
## MLTleader(1)
## Level(3)
## MO(1)
## TitleText1('Multivariable Calculus')
## AuthorText1('Stewart')
## EditionText1('7')
## Section1('14.7')
## Problem1('7')
## KEYWORDS('calculus', 'partial derivatives', 'functions of two variables', 'critical points', 'local maximum', 'local minimum', 'saddle point')

########################################################################

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGcourse.pl"
);
##############################################################

#install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

TEXT(beginproblem);

##############################################################

Context("Numeric");
Context()->strings->add(none=>{},EmptySet=>{alias=>"none"});
Context()->variables->add(y =>'Real', z =>'Real');

$a = list_random(1,4,9,16,25,36);

$sa = Compute("sqrt($a)");

Context("Point");

$P1 = Point($sa,$sa,0);
$P2 = Point(-$sa,-$sa,0);

$ans1 = List(None);
$ans2 = List(None);
$ans3 = List($P1,$P2);

##############################################################

Context()->texStrings;
BEGIN_TEXT
Suppose \(f(x,y) = (x-y)($a-xy).\) Answer the following.  $BBOLD Each answer should be a list of points \( (a,b,c)\) separated by commas, or, if there are no points, the answer should be NONE.$EBOLD
$HR
$BBOLD 1. $EBOLD Find the local maxima of \(f.\) $BR
Answer: \{ans_rule(30)\} $PAR
$BBOLD 2. $EBOLD Find the local minima of \(f.\) $BR
Answer: \{ans_rule(30)\} $PAR
$BBOLD 3. $EBOLD Find the saddle points of \(f.\) $BR
Answer: \{ans_rule(30)\} $PAR
$HR
END_TEXT
Context()->normalStrings;

##############################################################

ANS( $ans1->cmp(typeMatch => 'Value::Point') );
ANS( $ans2->cmp(typeMatch => 'Value::Point') );
ANS( $ans3->cmp() );

########################################################################

ENDDOCUMENT();        # This should be the last executable line in the problem.
