## BEGIN_DESCRIPTION
## Template for calling Sage from within a WebWork pg file
## END_DESCRIPTION


## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Extreme values and optimization)
## Date(January 2012)
## Institution(Mississippi College)
## Author(John Travis)
## MLT(GiveAllCritPts)
## MLTleader(1)
## Level(3)
## MO(1)
## KEYWORDS('sage', 'sagelet', 'derivative', 'critical values')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
#  "PGchoicemacros.pl",
  "MathObjects.pl",
  "sage.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());

# Regular WebWork setup

$a=random(5,8,1);
$b=random(7,13,2);

Context()->variables->are(x=>'Real',y=>'Real');

$fin = "((1/3)*x^3-$a*x)*($b*y-y^2)";
$funct  = Compute($fin);
$funct_diffx = $funct->D('x');
$funct_diffy = $funct->D('y');

Context()->flags->set(tolerance=>.06);

$pt1 = Point( (sqrt($a),$b/2) );
$pt2 = Point( (-sqrt($a),$b/2) );
$pt3 = Point( (0,0) );
$pt4 = Point( (sqrt(3*$a),0) );
$pt5 = Point( (-sqrt(3*$a),0) );
$pt6 = Point( (0,$b) );
$pt7 = Point( (sqrt(3*$a),$b) );
$pt8 = Point( (-sqrt(3*$a),$b) );

$solns =List( $pt1, $pt2, $pt3, $pt4, $pt5, $pt6, $pt7, $pt8 );

# Below is a placeholder for the future return value from the sagelet.  Making certain context is right.
#$fpx = $funct_diffx - $funct_diffx;
#$fpy = $funct_diffy - $funct_diffy;

$SageCode = <<SAGE_CODE;

# Example Sage Python

x = var("x")
y = var("y")

pretty_print(html("Consider \( f(x,y) = {} \)".format(str(latex($fin))) ))
pretty_print(html("This cell helps take the derivative of a function z = g(x,y).  To change the formula edit the text box, then click outside the text box."))
~~@interact
def _(g = input_box(x^2-y^2,label='\(g(x,y) = \)')):
    dgx = diff(g,x,1)
    dgy = diff(g,y,1)
    pretty_print(html("\[ g_x (x,y) = {} \]".format(dgx) ))
    pretty_print(html("\[ g_y (x,y) = {} \]".format(dgy) ))

pretty_print(html( "This cell helps with solving for points where two functions are zero (for example, two partial derivatives).  Edit the formulas, then click to re-evaluate."))
pretty_print(html("Solve:"))
~~@interact
def _(h1 = input_box(2*x^2 - x*y + 4*x,label='\(0 = h_1(x,y) =\)'),h2 = input_box(x^2 - x*y - 2*y^2 + 4*x + y + 3,label='\(0 = h_2(x,y) =\)')):
    h1_factored = h1.factor()
    h2_factored = h2.factor()
    pretty_print(html("Factored, these are"))
    pretty_print(html("\[ h_1(x,y) = {} \]".format(str(latex(h1_factored))) ))
    pretty_print(html("\[ h_2(x,y) = {} \]".format(str(latex(h2_factored))) ))
    soln = solve([h1_factored ==0, h2_factored==0],x,y)
    pretty_print(html("The solution(s) are: (each row of the table is a solution)"))
    pretty_print(table(soln))
 #   soln_fy = solve(fy_factored,x,y)
 #   html('\(f_x = 0\)')
 #   for soln in soln_fx:
 #       print soln
 #   html('\(f_y = 0\)')
 #   for soln in soln_fy:
 #       print soln

SAGE_CODE

Sage(
  SageCode=>$SageCode,
  ButtonText=>'Restart the Interactive Cell',
  AnswerReturn => 0,
);

#TEXT(MODES(TeX=>"", HTML=><<'SAGE_SCRIPT'));

#<script src="http://aleph.sagemath.org/static/jquery.min.js"></script>
#<script src="http://aleph.sagemath.org/embedded_sagecell.js"></script>

#<script type="text/javascript" >

#$(function () {
#   sagecell.makeSagecell({inputLocation:  '#sagecell1',
#                          template:       sagecell.templates.minimal,
#                          autoeval:        true, 
#                          evalButtonText: 'Restart first cell'});
#   sagecell.makeSagecell({inputLocation:  '#sagecell2',
#                          template:       sagecell.templates.minimal,
#                          autoeval:        true, 
#                          evalButtonText: 'Start/Restart second cell'});
#
#});

#</script>


#SAGE_SCRIPT


# Continue pg file as normal

BEGIN_TEXT
$PAR
Determine all critical values for \[ f(x,y) = $fin \]
The interactive cell above can be used to help with your calculations.
$PAR
All eight critical points in any order:
$BR
\{ ans_rule(70) \}

END_TEXT

Context()->normalStrings;

Context("Numeric");

$showHint = 4;
$showPartialCorrectAnswers = 1;

ANS( $solns->cmp() );

ENDDOCUMENT();       
