# DESCRIPTION
# Determine the row operation performed and fix error.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Matrices)
## DBsection(Row operations)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## MLT(row_error)
## Level(3)
## MO(1)
## TitleText1('Linear Algebra')
## AuthorText1('Holt')
## EditionText1('1e')
## Section1('1.2')
## Problem1('15')
## KEYWORDS('linear equations', 'system', 'systems', 'matrices')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "parserPopUp.pl",
  "PGmatrixmacros.pl",
  "parserMultiAnswer.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
Context("Matrix");
sub dispMat {
  my $A = shift;
  my @d = $A->dimensions;
  my @a = ();
  my $dA = "\left[\begin{array}{";
  for (my $i = 0; $i < $d[1]; $i++) {
    $dA = $dA."r";
  }
  $dA = $dA."}";
  for (my $i = 0; $i < $d[0]; $i++) {
    for (my $j = 0; $j < $d[1]; $j++) {
      $a[$i][$j] = $A->element($i+1,$j+1);
      if ($j != $d[1] - 1) {
        $dA = $dA." $a[$i][$j] & ";
      } elsif ($j == $d[1] - 1 && $i != $d[0] -1) {
        $dA = $dA." $a[$i][$j] \\";
      } else {
        $dA = $dA." $a[$i][$j]";
      }
    }
  }
  $dA = $dA."\end{array}\right]";
  return ($dA, @a);
}

$A = Matrix([non_zero_random(-8,8), non_zero_random(-8,8), non_zero_random(-8,8)], [non_zero_random(-8,8), non_zero_random(-8,8), non_zero_random(-8,8)],  [non_zero_random(-8,8), non_zero_random(-8,8), non_zero_random(-8,8)]);
($d1,$d2) = $A->dimensions;
$A = $A->wwMatrix;
$A->assign(random(1,$d1),random(1,$d2),0);
$A = Matrix($A);
($dA,@a) = dispMat($A);
$row1 = random(1,$d1);
do {$row2 = random(1,$d1)} until ($row2 != $row1);
$c = random(2,4)*random(-1,1,2);

$B = Matrix([0,0,0],[0,0,0],[0,0,0])->wwMatrix;
for ($i = 0; $i < $d1; $i++) {
  for ($j = 0; $j < $d2; $j++) {
    $B->assign($i+1,$j+1,$a[$row2-1][$j]) if ($i == $row1 -1);
    $B->assign($i+1,$j+1,$a[$row1-1][$j]) if ($i == $row2 -1);
    $B->assign($i+1,$j+1,$a[$i][$j]) if ($i != $row1 - 1 && $i != $row2 - 1);
  } 
}
$B = Matrix($B);
($dB,@b) = dispMat($B);
do {($bad1,$bad2) = (list_random($row1,$row2), random(1,$d2))} until ($B->element($bad1,$bad2) != 0);
$N = $B->wwMatrix;
do {$N->assign($bad1,$bad2,non_zero_random(-9,9))} until ($N->element($bad1,$bad2) != $B->element($bad1,$bad2));
$N = Matrix($N);
($dN,@n) = dispMat($N);

Context()->variables->add(R1 => ["Real", TeX=>"R_1"], R2 => ["Real", TeX=>"R_2"], R3 => ["Real", TeX=>"R_3"]);
if ($row1 < $row2) {
  $rd1 = "R".$row1;
  $rd2 = "R".$row2;
} else {
  $rd1 = "R".$row2;
  $rd2 = "R".$row1;
}
$lhs = Formula($rd1);
$rhs = Formula($rd2);
$pop = PopUp(["select", "-->", "<-->"], "<-->");

$multians = MultiAnswer($lhs,$pop,$rhs)->with(
  singleResult => 0,
  checker => sub {
    my ($correct, $student, $self ) = @_;
    my ($lhsStu,$popStu,$rhsStu) = @{$student};
    my ($lhsCorr,$popCorr,$rhsCorr) = @{$correct};
    my ($lhsScore,$popScore,$rhsScore) = (0,0,0);
    if ($popStu == $popCorr){ $popScore = 1;}
    if ( (($lhsStu == $lhsCorr) && ($rhsStu == $rhsCorr)) ||
	 (($lhsStu == $rhsCorr) && ($rhsStu == $lhsCorr))
    ){ ($lhsScore,$rhsScore) = (1,1); } 
    elsif ( ($lhsStu == $lhsCorr) || ($lhsStu == $rhsCorr) 
    ){ $lhsScore = 1;}
    elsif ( ($rhsStu == $rhsCorr) || ($rhsStu == $lhsCorr) 
    ){ $rhsScore = 1;}
    return [$lhsScore,$popScore,$rhsScore];
  }
);
    


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
A single row operation was performed on the matrix on the left to produce the matrix on the right. Unfortunately, an error was made when performing the row operation.
$PAR
\[ $dA  \text{ row op produces: } $dN \]
$PAR
First identify the row operation and then fix the error. Use ${BBOLD}R1${EBOLD}, ${BBOLD}R2${EBOLD}, and ${BBOLD}R3${EBOLD} to represent the rows \(R_1\), \(R_2\), and \(R_3\).  For example, if the operation were "add 2 times row 4 to row 6" then the answer would be "\(2*R4+R6 \longrightarrow R6\)".  If it were "swap row 4 with row 6" the answer would be "\(R4 \longleftrightarrow R6\)". 
$PAR
Row operation: \{$multians->ans_rule(10)\} \{$multians->ans_rule(10)\} \{$multians->ans_rule(10)\} $PAR
Fixed right hand side: $BR \{ mbox(answer_matrix($d1,$d2,5)) \}
END_TEXT
Context()->normalStrings;


###########################################################################
# check the answer  
###########################################################################
#ANS($lhs->cmp());
#ANS($pop->cmp());
#ANS($rhs->cmp());
ANS( $multians->cmp() ); 
ANS num_cmp(ra_flatten_matrix($B));

###########################################################################
# solution
###########################################################################
Context()->texStrings;
BEGIN_SOLUTION
${BBOLD}SOLUTION:${EBOLD}
\($lhs \longleftrightarrow $rhs\), \($dB\)
END_SOLUTION
Context()->normalStrings;

COMMENT('Row swap with error.');
ENDDOCUMENT();
