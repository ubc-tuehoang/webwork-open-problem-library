## DESCRIPTION
## Calculus
## ENDDESCRIPTION

## Tagged by cmd6a 4/20/06

## DBsubject(Calculus - multivariable)
## DBchapter(Differentiation of multivariable functions)
## DBsection(Partial derivatives)
## Institution(Alfred University)
## Level(3)
## MO(1)
## TitleText1('Calculus: Early Transcendentals')
## AuthorText1('Anton')
## EditionText1('8')
## Section1('14.3')
## Problem1('')

DOCUMENT();
#pilfered from the Rochester problem library, setDerivatives1/ns2_8_31.pg
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGnumericalmacros.pl",
  "PGcourse.pl"
);
 

# define function to be evaluated
$a= random(1,3,.1);
$b= random(-4,4,.1);
$c = random(-4,4,.1);
$x0=random(-2,2,0.1);
$y0=random(-2,2,.1);
$function = FEQ(" ${a}x^2+${b}x +$c ");
$f = sub {
	my $x = shift;
	$a*$x*$x + $b*$x +$c;
};

#  Calculate the cubic spline approximation to ax^2+bx+c
$llimit = -5; $rlimit = 5;
my $num_of_intervals = 500;  # number of interpolation points
my $delta =  ($rlimit-$llimit)/($num_of_intervals); 
my (@x_values, @y_values);
foreach my $i (0..$num_of_intervals) {
	my $x = $llimit + $delta*$i;
	my $y = &$f($x);
	push(@x_values, $x); push(@y_values,$y);
}

($t_ref, $a_ref, $b_ref, $c_ref, $d_ref) = create_cubic_spline (~~@x_values, ~~@y_values);

$f_approx = cubic_spline(~~@x_values, ~~@y_values);

#calculate a javaScript runtime cubic spline representation of this function.

HEADER_TEXT(javaScript_cubic_spline(~~@x_values,~~@y_values, name => 'func', llimit => $llimit, rlimit => $rlimit)  );

#HEADER_TEXT(<<ENDSCRIPT);  # this function could be read by the student by looking at the HTML source code
#<SCRIPT LANGUAGE="JavaScript">
#<!-- Begin
#function func(x) {
#	return $a*x*x + $b*x + $c
#}
#-->
#</SCRIPT>
#
#ENDSCRIPT

TEXT(beginproblem());

# A warning that we are using javaScript
TEXT(M3("",
"\begin{rawhtml}
<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT> \end{rawhtml}
",
"<NOSCRIPT> This problem requires that Java Script be enabled </NOSCRIPT>"
));

BEGIN_TEXT


$PAR
An oracle function \( f(x,y) \) is presented below.  If you enter a point \( (x,y)\) on the left then push the "--f-->" button the oracle will
tell you the value \( f(x,y) \).
$PAR
Use the oracle to compute several values \(f(x,y)\) then estimate the partial derivative \(f_x($x0,$y0)\) of the function at \(  ($x0,$y0) \), using the Newton quotient definition.
$PAR
END_TEXT





$javaScript2 = begintable(4) .
               MODES(HTML =>q{<TR>
					<TH>x</TH><TH>y</TH><TH></TH><TH>f(x,y)</TH>
					<TR>},
					TeX => "x & y &\(\rightarrow\) & f(x,y)\\"
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Inputx"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Inputy"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(y\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output.value=func(this.form.Inputx.value*this.form.Inputy.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output"   Size="30">}, TeX => 'result: \(f(x,y)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2x"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input2y"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output2.value=func(this.form.Input2x.value*this.form.Input2y.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output2"   Size="30">}, TeX => 'result: \(f(x,y)\)')
				) .
				row(MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3x"  Value = "$x0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
                                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Input3y"  Value = "$y0" Size="16">}, TeX => '\fbox{Enter \(x\)}' ),
				    MODES(HTML => qq{<INPUT TYPE="button" VALUE="---f-->"  
                        OnClick="this.form.Output3.value=func(this.form.Input3x.value*this.form.Input3y.value);">}, TeX => '\(\rightarrow\)'    ),
                    MODES(HTML => qq{<INPUT TYPE="text"   NAME="Output3"   Size="30">}, TeX => 'result: \(f(x,y)\)')
				) . endtable();



TEXT($javaScript2);      
      
BEGIN_TEXT
$PAR
\( f_x ($x0,$y0) \approx\) \{ans_rule(80) \}  

$PAR
Remember the technique for finding partial derivatives from tables? This is the same thing. For credit your answer must be within 1$PERCENT of the correct value, so use lots of decimal places. Also remember that you can cut and paste the output from the oracle function.

END_TEXT
# The answer

Context("Numeric");
Context()->{format}{number} = "%.14g";
Context()->flags->set(tolerance=>0.01, tolType=>"relative"); # accept 1% errors

$h = .000001;
$ans = Real(( &$f_approx(($x0+$h)*$y0) - &$f_approx($x0*$y0) )/$h);

ANS($ans->cmp()->withPostFilter(
  sub {
    my $ans_hash = shift;
    my $correct = $ans_hash->{correct_ans};
    my $student = $ans_hash->{student_ans};
    my $error = $correct - $student;
    my $relerror;
    if (abs($correct) > 10**(-9)){
       $relerror = 100* abs($error/$correct);
    }
    else {$relerror = 0};
    if ($relerror < 1) {
      $ans_hash->{ans_message} = "Good.  Your answer is only off by about $error";
    }
    elsif ($relerror < 10 ) {
      $ans_hash->{ans_message} = 'Your answer is within 10%. ';
    }
    elsif($relerror < 50) {
      $ans_hash->{ans_message} = 'Your answer is within 50%.  ';
    }
    else {
      $ans_hash->{ans_message} = 'Your answer is off by more than 50%.';
    }	
    return $ans_hash;
  }
));

			
ENDDOCUMENT();

