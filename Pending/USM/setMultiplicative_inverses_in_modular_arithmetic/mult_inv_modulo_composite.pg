##DESCRIPTION
##  Number theory: find the multiplicative inverse, solve a linear congruence (composite modulus)
##ENDDESCRIPTION

##KEYWORDS('number theory', 'congruence', 'multiplicative inverse', 'modular arithmetic', 'composite modulus')

## DBsubject('Number Theory')
## DBchapter('Congruences')
## DBsection('Solving linear congruence')
## Date('7/21/2018')
## Author('John Perry')
## Institution('University of Southern Mississippi')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "scaffold.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

@primes = ( 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 );
$m1 = @primes[ random(0,9) ];
$m2 = $m1;
while ( $m2 == $m1 ) {
  $m2 = @primes[ random(0,9) ];
}
$m = $m1*$m2;
$m_min = min( $m1, $m2 );
$a = random( ( $m_min - 1 ) / 2 , $m_min - 1 );
$c = random( 2, ( $m_min - 1 ) / 2 - 1 );

# here we use the Extended Euclidean Algorithm to find the inverse
$t_prev = 0;
$t_curr = 1;
$n = $m;
$b = $a;
$r = $b;
while ( $r != 0 ) {
  $r = $n % $b;
  $q = ( $n - $r ) / $b;
  $t_next = $t_prev - $t_curr * $q;
  $t_prev = $t_curr;
  $t_curr = $t_next;
  $n = $b;
  $b = $r;
}
$a_inv = $t_prev;
while ( $a_inv <  0 ) { $a_inv += $m; }
while ( $a_inv > $m ) { $a_inv -= $m; }

##############################################################
#
#  Text
#
#

Context()->texStrings;
Scaffold::Begin();

Section::Begin();

BEGIN_TEXT

Find the multiplicative inverse of $a, modulo $m.
$PAR
\($a^{-1}=\) \{ ans_rule(5) \}

END_TEXT

ANS( Compute( $a_inv ) -> cmp() );

Section::End();

Section::Begin();

BEGIN_TEXT

Use your answer to solve the linear congruence \( $a x\equiv $c\pmod{$m} \).
$PAR
\{ ans_rule(5) \}

END_TEXT

ANS( Compute( ( $a_inv * $c ) % $m ) -> cmp() );

Section::End();

Scaffold::End();


Context()->normalStrings;

ENDDOCUMENT();        

