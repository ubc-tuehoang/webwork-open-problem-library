##DESCRIPTION
##  Number theory: card trick related to Chinese Remainder Theorem
##ENDDESCRIPTION


## DBsubject(Number Theory)
## DBchapter(Congruences)
## DBsection(Chinese Remainder Theorem)
## Date(7/15/2018)
## Institution(University of Southern Mississippi)
## Author(John Perry)
## MO(1)
## KEYWORDS('number theory', 'chinese remainder theorem', 'cards')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGchoicemacros.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");

$which = random(0,4);
if ( $which == 0 ) { $a = 4; $b = 6; $c = 24; }
elsif ( $which == 1 ) { $a = 6; $b = 8; $c = 48; }
elsif ( $which == 2 ) { $a = 2; $b = 10; $c = 20; }
elsif ( $which == 3 ) { $a = 3; $b = 6; $c = 18; }
else { $a = 3; $b = 9; $c = 27; }

$x0 = random(1,$a);
$y0 = random(1,$b);

$trick_works = new_multiple_choice();
$trick_works->qa(
"Can I already determine your card?",
"no"
);
$trick_works->makeLast( "yes", "no" );

$reason = new_multiple_choice();
$reason->qa(
"Why or why not?",
"\(\gcd($a,$b) \neq 1\) and \($a\times$b=$c\)"
);
$reason->makeLast(
"\(\gcd($a,$b) \mid $c\)",
"\(\gcd($a,$b) \nmid $c\)",
"\(\gcd($a,$b) = 1\)",
"\(\gcd($a,$b) \neq 1\)",
"\(\gcd($a,$b) = 1\) and \($a\times$b=$c\)",
"\(\gcd($a,$b) \neq 1\) and \($a\times$b=$c\)",
"dude, there are too many cards!"
);

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
@pair
Consider the following card trick. I have $c distinct cards. I show you all the cards, and ask you to choose a card without pointing to it or telling me what it is.
$PAR
First I lay out the cards in rows of $a and ask you to point to the column containing your card.
$PAR
Next I lay out the cards in rows of $b, <i>otherwise in the same order</i>, and ask you to point to the column containing your card.
$PAR
\{ $trick_works->print_q() \}
\{ $trick_works->print_a() \}
$PAR
\{ $reason->print_q() \}
\{ $reason->print_a() \}
$PAR
If no unique solution is possible, indicate two cards that would end up in the same column both times. Otherwise, indicate which card would end up in column $x0 the first time, and in column $y0 the second time.
$PAR
\(x\equiv\)\{ ans_rule(10) \}
$PAR
<i>Hint:</i> For example, if the first card and the last card would end up in the same column each time, you would type <tt>1,$c</tt>. Otherwise, if the \{ max($a,$b) \}th card is the only possible card, type \{ max($a,$b) \}.

END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS( radio_cmp( $trick_works->correct_ans() ) );
ANS( radio_cmp( $reason->correct_ans() ) );
ANS( List("0,0")->cmp(
  list_checker => sub {
    my ( $correct, $student, $ansHash, $value ) = @_;
    my $x1 = $student->[0];
    my $x2 = $student->[1];
    my @errors = ();
    if (
      ( $x1 != $x2 ) &&
      ( $x1 > 0 ) && ( $x1 <= $c ) && ( $x2 > 0 ) && ( $x2 <= $c ) &&
      ( $x1 % $a == $x2 % $a ) && ( $x1 % $b == $x2 % $b )
    ) { $score = 2; }
    elsif (
      ( $x1 != $x2 ) &&
      ( $x1 % $a == $x2 % $a ) && ( $x1 % $b == $x2 % $b )
    ) {
      $score = 1;
      push( @errors, "Answers must be at least 1 and no more than $c." );
    }
    else { $score = 0; }
    return ( $score , @errors );
  }
) );

ENDDOCUMENT();
