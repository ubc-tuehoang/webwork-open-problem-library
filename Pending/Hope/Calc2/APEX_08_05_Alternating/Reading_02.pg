## DBsubject(Calculus - single variable)
## DBchapter(Infinite sequences and series)
## DBsection(Alternating series test)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)
## TitleText1('APEX Calculus')
## AuthorText1('Hartman')
## EditionText1('3.0')
## Section1('8.5')
## Problem1('')

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "parserPopUp.pl",
  "parserWordCompletion.pl",
  "scaffold.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());

Context("Numeric")->variables->are('n'=>'Real');

$wc1 = WordCompletion(['absolutely','conditionally','alternating','fully','partially','to zero'],'absolutely');
$wc2 = WordCompletion(['absolutely','conditionally','alternating','fully','partially','to zero'],'conditionally');

$popup1 = PopUp(['choose','converges','may converge or diverge','diverges'],'converges');
$popup2 = PopUp(['choose','converges','may converge or diverge','diverges'],'converges');

$popup3 = PopUp(['choose','converges','may converge or diverge','diverges'],'converges');
$popup4 = PopUp(['choose','converges','may converge or diverge','diverges'],'diverges');

BEGIN_PGML
## Reading questions on alternating series
[@ $PAR @]*
END_PGML

Scaffold::Begin();

Section::Begin("Part 1: Two types of convergent series");
BEGIN_PGML
a. A series [``\sum_{n=1}^{\infty} a_n``] converges [________________]{$wc1} if [``\sum_{n=1}^{\infty} |a_n| ``] converges.

b. A series [``\sum_{n=1}^{\infty} a_n``] converges [________________]{$wc2} if [``\sum_{n=1}^{\infty} a_n``] converges but [``\sum_{n=1}^{\infty} |a_n| ``] diverges.
END_PGML
Section::End();

Section::Begin("Part 2: Unpacking the definitions");
BEGIN_PGML
a. If a series [``\sum_{n=1}^{\infty} a_n``] converges absolutely,  

    then [``\sum_{n=1}^{\infty} a_n``] [_]{$popup1} and [``\sum_{n=1}^{\infty} |a_n|``] [_]{$popup2}.

b. If a series [``\sum_{n=1}^{\infty} a_n``] converges conditionally,  

    then [``\sum_{n=1}^{\infty} a_n``] [_]{$popup3} and [``\sum_{n=1}^{\infty} |a_n|``] [_]{$popup4}.
END_PGML
Section::End();

Scaffold::End();

ENDDOCUMENT();
