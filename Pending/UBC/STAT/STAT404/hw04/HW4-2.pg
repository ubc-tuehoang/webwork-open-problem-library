#########################################################
## DESCRIPTION
## Design matrices for randomized block design
## ENDDESCRIPTION
#########################################################

#########################################################
## DBsubject('Statistics')
## DBchapter('Experimental design')
## DBsection('Concepts')
## Date('2016/10/14')
## Author('Bo Chang')
## Institution('UBC')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
#########################################################

#########################################################
## Initializations:
DOCUMENT();

## Initializations: (Required)
loadMacros(
  "PGstandard.pl",
  "PGchoicemacros.pl",
  "parserRadioButtons.pl",
  "MathObjects.pl",
  "parserMultiAnswer.pl",
  "RserveClient.pl",
  "answerHints.pl",
  "PGML.pl",
  "PGcourse.pl"
);
# variables for answers

#########################################################
## Setup: this is where we use Perl and PG objects (Required)


###Random number generator seed based on student's login. No need to change.
Context("Numeric");
# warn("Student name: $studentName, login: $studentLogin, id: $studentID");
my $hash = crypt($studentLogin, 'a1');
# warn("crypt: $hash");
@nums = (0..9,'a'..'z','A'..'Z');
my %nums = map { $nums[$_] => $_ } 0..$#nums;
my $seed = 0;
$seed = $seed * 62 + $nums{$_} foreach split(//, substr($hash, -5, 5));
##warn("seed: " . $seed);

####Call R server
rserve_eval("set.seed($seed)"); ## can not combine with the rest

# Main Text
Context()->texStrings;

# variables for answers
@l=rserve_eval('
l <- sample(3:6, 4, replace = T)
');

$l1 = @l[0];
$l2 = @l[1];
$l3 = @l[2];
$l4 = @l[3];

@MSR=rserve_eval('
MSR <- sample(1:10, 1)
');

@dfRes=rserve_eval('
dfRes <- (l[1] - 1) * (l[2] - 1) * (l[3] - 1) + (l[1] - 1) * (l[2] - 1) * (l[4] - 1) + (l[1] - 1) * (l[3] - 1) * (l[4] - 1) + (l[2] - 1) * (l[3] - 1) * (l[4] - 1) + (l[1] - 1) * (l[2] - 1) * (l[3] - 1) * (l[4] - 1)
');

@ansa=rserve_eval('
sqrt(2 * MSR / l[2] / l[3] / l[4])
');

@ansb=rserve_eval('
sqrt(2 * MSR / l[1] / l[2] / l[3])
');

@ansc=rserve_eval('
sqrt(4 * MSR / l[3] / l[4])
');

@ansd=rserve_eval('
qt(0.975, df = dfRes)
');

$ansa=@ansa[0];
$ansb=@ansb[0];
$ansc=@ansc[0];
$ansd=@ansd[0];

BEGIN_TEXT

This question continues Problem 1.
There are four factors, \(A\), \(B\), \(C\), and \(D\),
with $l1, $l2, $l3, and $l4 levels, respectively.
The same statistical model is also assumed,
and the mean square for residuals is @MSR[0].



$BR
$BR
$BBOLD Part a) $EBOLD
Give a standard error for \(\bar{Y}_{1...} - \bar{Y}_{2...}\).
Enter you answer to 4 decimal places.
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part b) $EBOLD
Consider the contrast \(\delta_1 - \delta_2\).
Give a standard error for its least-squares estimator.
Enter you answer to 4 decimal places.
\{ ans_rule(6) \}

$BR
$BR
$BBOLD Part c) $EBOLD
Consider the contrast 
\(\kappa = (\alpha\beta)_{11} - (\alpha\beta)_{12} - (\alpha\beta)_{21} 
+ (\alpha\beta)_{22}\).
Give a standard error for its least-squares estimator.
Enter you answer to 4 decimal places.
\{ ans_rule(6) \}


$BR
$BR
$BBOLD Part d) $EBOLD
To test \(H_0: \kappa = 0\) versus \(H_a: \kappa \ne 0\),
you compute \(t = \hat{\kappa} / \mbox{se}(\hat{\kappa})\).
What value must \(|t|\) exceed to reject the null hypothesis
at significance level 0.05?  Enter you answer to 4 decimal places. 
\{ ans_rule(6) \}



END_TEXT

#########################################################
$showPartialCorrectAnswers = 1;
ANS( num_cmp($ansa, tol=> 0.005) );
ANS( num_cmp($ansb, tol=> 0.005) );
ANS( num_cmp($ansc, tol=> 0.005) );
ANS( num_cmp($ansd, tol=> 0.005) );

########################################################
BEGIN_SOLUTION

END_SOLUTION
#########################################################

ENDDOCUMENT();

