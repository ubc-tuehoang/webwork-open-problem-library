##DESCRIPTION
## Given some control points for two Bezier curves, provide others that ensure continuity
##ENDDESCRIPTION

## DBsubject('Calculus - single variable')
## DBchapter('Limits and continuity')
## DBsection('Continuity - concept of')
## Date('04/05/2018')
## Author('Nathan Carter')
## Institution('Bentley University')
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## EditionText1('1')
## AuthorText1('Nathan Carter')
## Section1('13')
## Problem1('2')
##KEYWORDS('Bezier curves','continuity','joining','scenes')

########################################################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
  "parserPopUp.pl",
);

Context("Numeric");
$showPartialCorrectAnswers = 1;

# we will store the values of all points in one array, like so:
# ( part a control point C1 x component,
#   part a control point C1 y component,
#   part a control point C1 z component,
#   ...and so on through C4 z component,
#   part a control point D1 x component,
#   ...and so on through D4 z component,
#   ...and so on through part c )
@pts = ();
for ( my $i = 0 ; $i < 72 ; $i++ ) { push( @pts, random( -9, 9 ) ); }

# now for each part, make the desired type of continuity
for ( my $i = 0 ; $i < 3 ; $i++ ) {
    # in all cases, we have to fix C4 to be D1
    $center = 24*$i + 12; # index of D1x
    $pts[$center-3] = $pts[$center+0];
    $pts[$center-2] = $pts[$center+1];
    $pts[$center-1] = $pts[$center+2];
    # in parts b and c, we have to choose D2 such that C4-C3=D2-D1,
    # so we set D2=D1+C4-C3
    if ( $i > 0 ) {
        $pts[$center+3] = $pts[$center+0] + $pts[$center-3] - $pts[$center-6];
        $pts[$center+4] = $pts[$center+1] + $pts[$center-2] - $pts[$center-5];
        $pts[$center+5] = $pts[$center+2] + $pts[$center-1] - $pts[$center-4];
    }
    # in part c, we have to choose D3 such that C3+(C3-C2)=D2+(D2-D3),
    # so we set D3=C2+2(D2-C3)
    if ( $i > 1 ) {
        $pts[$center+6] = $pts[$center-9]
                        + 2*( $pts[$center+3] - $pts[$center-6] );
        $pts[$center+7] = $pts[$center-8]
                        + 2*( $pts[$center+4] - $pts[$center-5] );
        $pts[$center+8] = $pts[$center-7]
                        + 2*( $pts[$center+5] - $pts[$center-4] );
    }
}

$e = '&eacute;';

# now create the output we'll use to show the points to the reader
@cs = ();
@ds = ();
for ( my $i = 0 ; $i < 3 ; $i++ ) {
    my $cpart = '';
    my $dpart = '';
    for ( my $j = 0 ; $j < 4 ; $j++ ) {
        if ( $j < 3 ) {
            $cpart = $cpart . 'C_' . ($j+1)
                            . '=(' . $pts[24*$i+3*$j]
                             . ',' . $pts[24*$i+3*$j+1]
                             . ',' . $pts[24*$i+3*$j+2] . ') ~ ~ ~ ~ ~';
        }
        if ( ( $i == 0 ) || ( $j == 0 ) || ( $j == 3 )
          || ( ( $j == 2 ) && ( $i == 1 ) ) ) {
            $dpart = $dpart . 'D_' . ($j+1)
                            . '=(' . $pts[24*$i+3*$j+12]
                             . ',' . $pts[24*$i+3*$j+13]
                             . ',' . $pts[24*$i+3*$j+14] . ') ~ ~ ~ ~ ~';
        }
    }
    push( @cs, '>> [`' . $cpart . '`] <<' );
    push( @ds, '>> [`' . $dpart . '`] <<' );
}

TEXT(beginproblem());
BEGIN_PGML
Assume that you want to stitch together two cubic B[$e]*ier curves, the first with control points [`C_1`] through [`C_4`] and the second with control points [`D_1`] through [`D_4`].

Given the following control points, what must be the value of [`C_4`] to ensure [`C^0`] continuity (but not necessarily any other type of continuity)?

[@ PGML($cs[0]) @]***

[@ PGML($ds[0]) @]***

Answer:

[`C_4=`]([________]{$pts[9]},[________]{$pts[10]},[________]{$pts[11]})

Given the following control points, what must be the values of [`C_4`] and [`D_2`] to ensure both [`C^0`] continuity and [`C^1`] continuity (but not necessarily any other type of continuity)?

[@ PGML($cs[1]) @]***

[@ PGML($ds[1]) @]***

Answer:

[`C_4=`]([________]{$pts[33]},[________]{$pts[34]},[________]{$pts[35]})

[`D_2=`]([________]{$pts[39]},[________]{$pts[40]},[________]{$pts[41]})

Given the following control points, what must be the values of [`C_4`], [`D_2`], and [`D_3`] to ensure [`C^0`] continuity, [`C^1`] continuity, and [`C^2`] continuity?

[@ PGML($cs[2]) @]***

[@ PGML($ds[2]) @]***

Answer:

[`C_4=`]([________]{$pts[57]},[________]{$pts[58]},[________]{$pts[59]})

[`D_2=`]([________]{$pts[63]},[________]{$pts[64]},[________]{$pts[65]})

[`D_3=`]([________]{$pts[66]},[________]{$pts[67]},[________]{$pts[68]})
END_PGML

BEGIN_PGML_SOLUTION
In part 1, to ensure [`C^0`] continuity, we must ensure [`C_4=D_1`], so we let [`C_4=([$pts[9]],[$pts[10]],[$pts[11]])`].

In part 2, to ensure [`C^0`] continuity, we must ensure [`C_4=D_1`], so we let [`C_4=([$pts[33]],[$pts[34]],[$pts[35]])`].  In that same part, to ensure [`C^1`] continuity, we must ensure [`C_4-C_3=D_2-D_1`], so we let [`D_2=D_1+C_4-C_3`].

>> [`D_2=([$pts[36]],[$pts[37]],[$pts[38]])
        +([$pts[33]],[$pts[34]],[$pts[35]])
        -([$pts[30]],[$pts[31]],[$pts[32]])
        =([$pts[39]],[$pts[40]],[$pts[41]])`] <<

In part 3, to ensure [`C^0`] continuity, we must ensure [`C_4=D_1`], so we let [`C_4=([$pts[57]],[$pts[58]],[$pts[59]])`].  In that same part, to ensure [`C^1`] continuity, we must ensure [`C_4-C_3=D_2-D_1`], so we let [`D_2=D_1+C_4-C_3`].

>> [`D_2=([$pts[60]],[$pts[61]],[$pts[62]])
        +([$pts[57]],[$pts[58]],[$pts[59]])
        -([$pts[54]],[$pts[55]],[$pts[56]])
        =([$pts[63]],[$pts[64]],[$pts[65]])`] <<

In that same part, to ensure [`C^2`] continuity, we must ensure [`C_3+(C_3-C_2)=D_2+(D_2-D_3)`], so we let [`D_3=C_2+2(D_2-C_3)`].

>> [`D_3=([$pts[51]],[$pts[52]],[$pts[53]])
        +2(([$pts[63]],[$pts[64]],[$pts[65]])
          -([$pts[54]],[$pts[55]],[$pts[56]]))
        =([$pts[66]],[$pts[67]],[$pts[68]])`] <<
END_PGML_SOLUTION

ENDDOCUMENT();
