##DESCRIPTION
## Given control points for two Bezier curves, change some to ensure continuity
##ENDDESCRIPTION

## Date(04/05/2018)
## Institution(Bentley University)
## Author(Nathan Carter)
## TitleText1('Introduction to the Mathematics of Computer Graphics')
## AuthorText1('Nathan Carter')
## EditionText1('1')
## Section1('13')
## Problem1('3')
## KEYWORDS('Bezier curves','continuity','joining','scenes')

########################################################################

DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "PGcourse.pl",
  "parserPopUp.pl",
);

Context("Numeric");
$showPartialCorrectAnswers = 1;

# we will store the values of all points in one array, like so:
# ( part a control point C1 x component,
#   part a control point C1 y component,
#   part a control point C1 z component,
#   ...and so on through C4 z component,
#   part a control point D1 x component,
#   ...and so on through D4 z component )
@pts = ();
for ( my $i = 0 ; $i < 24 ; $i++ ) { push( @pts, random( -9, 9 ) ); }

# get('C',1,'x') is the x coordinate of point C1, etc.
sub get {
    my $CorD = shift( @_ );
    my $subscript = shift( @_ );
    my $coordinate = shift( @_ );
    my $i = ( $CorD eq 'C' ) ? 0 : 1;
    my $j = $subscript - 1;
    my $k = ( $coordinate eq 'x' ) ? 0 :
            ( $coordinate eq 'y' ) ? 1 : 2;
    return $pts[$i*12+$j*3+$k];
}
# corresponding setter
sub set {
    my $CorD = shift( @_ );
    my $subscript = shift( @_ );
    my $coordinate = shift( @_ );
    my $val = shift( @_ );
    my $i = ( $CorD eq 'C' ) ? 0 : 1;
    my $j = $subscript - 1;
    my $k = ( $coordinate eq 'x' ) ? 0 :
            ( $coordinate eq 'y' ) ? 1 : 2;
    $pts[$i*12+$j*3+$k] = $val;
}

# ensure no C^0 continuity
if ( get('C',4,'x') == get('D',1,'x') ) {
    set('D',1,'x',get('D',1,'x')+1);
}
# ensure no C^1 continuity
if ( get('C',4,'x')-get('C',3,'x') == get('D',2,'x')-get('D',1,'x') ) {
    set('D',2,'x',get('D',2,'x')+1);
}
# ensure no C^2 continuity
if ( 2*get('C',3,'x')-get('C',2,'x') == 2*get('D',2,'x')-get('D',3,'x') ) {
    set('D',3,'x',get('D',3,'x')+1);
}

$e = '&eacute;';
$stupid = 0;

# now create the output we'll use to show the points to the reader
$cpart = '';
$dpart = '';
for ( my $j = 0 ; $j < 4 ; $j++ ) {
    $cpart = $cpart . 'C_' . ($j+1)
                    . '=(' . $pts[24*$i+3*$j]
                     . ',' . $pts[24*$i+3*$j+1]
                     . ',' . $pts[24*$i+3*$j+2] . ') ~ ~ ~ ~ ~';
    $dpart = $dpart . 'D_' . ($j+1)
                    . '=(' . $pts[24*$i+3*$j+12]
                     . ',' . $pts[24*$i+3*$j+13]
                     . ',' . $pts[24*$i+3*$j+14] . ') ~ ~ ~ ~ ~';
}
$cpart = '[`' . $cpart . '`]';
$dpart = '[`' . $dpart . '`]';

TEXT(beginproblem());
BEGIN_PGML
Assume that you want to stitch together two cubic B[$e]*ier curves, the first with control points [`C_1`] through [`C_4`] and the second with control points [`D_1`] through [`D_4`], given here.

[@ PGML($cpart) @]***

[@ PGML($dpart) @]***

---

Assume we would like to modify the second curve to create some continuity between the two.
Where would you put [`D_1`] to ensure [`C^0`] continuity?

Answer:

[`D_1=`]([________]{get('C',4,'x')},[________]{get('C',4,'y')},[________]{get('C',4,'z')})

---

Now instead assume we would like to modify the first curve to create some continuity between the two.
Where would you put [`C_4`] instead to ensure [`C^0`] continuity?

Answer:

[`C_4=`]([________]{get('D',1,'x')},[________]{get('D',1,'y')},[________]{get('D',1,'z')})

---

Now thinking again about modifying the second curve rather than the first, where would you put [`D_1`] and [`D_2`] to ensure [`C^1`] continuity?

Answer:

[`D_1=`]([________]{get('C',4,'x')},[________]{get('C',4,'y')},[________]{get('C',4,'z')})

[`D_2=`]([________]{get('C',4,'x')+get('C',4,'x')-get('C',3,'x')},[________]{get('C',4,'y')+get('C',4,'y')-get('C',3,'y')},[________]{get('C',4,'z')+get('C',4,'z')-get('C',3,'z')})

---

Now thinking again about modifying the first curve rather than the second, where would you put [`C_3`] and [`C_4`] instead to ensure [`C^1`] continuity?

Answer:

[`C_3=`]([________]{get('D',1,'x')+get('D',1,'x')-get('D',2,'x')},[________]{get('D',1,'y')+get('D',1,'y')-get('D',2,'y')},[________]{get('D',1,'z')+get('D',1,'z')-get('D',2,'z')})

[`C_4=`]([________]{get('D',1,'x')},[________]{get('D',1,'y')},[________]{get('D',1,'z')})

---

Now thinking again about modifying the second curve rather than the first, where would you put [`D_1`], [`D_2`], and [`D_3`] to ensure [`C^2`] continuity?

Answer:

[`D_1=`]([________]{get('C',4,'x')},[________]{get('C',4,'y')},[________]{get('C',4,'z')})

[`D_2=`]([________]{get('C',4,'x')+get('C',4,'x')-get('C',3,'x')},[________]{get('C',4,'y')+get('C',4,'y')-get('C',3,'y')},[________]{get('C',4,'z')+get('C',4,'z')-get('C',3,'z')})

[`D_3=`]([________]{get('C',2,'x')+4*(get('C',4,'x')-get('C',3,'x'))},[________]{get('C',2,'y')+4*(get('C',4,'y')-get('C',3,'y'))},[________]{get('C',2,'z')+4*(get('C',4,'z')-get('C',3,'z'))})

---

Now thinking again about modifying the first curve rather than the second, where would you put [`C_2`], [`C_3`], and [`C_4`] instead to ensure [`C^2`] continuity?

Answer:

[`C_2=`]([________]{get('D',3,'x')+4*(get('D',1,'x')-get('D',2,'x'))},[________]{get('D',3,'y')+4*(get('D',1,'y')-get('D',2,'y'))},[________]{get('D',3,'z')+4*(get('D',1,'z')-get('D',2,'z'))})

[`C_3=`]([________]{2*get('D',1,'x')-get('D',2,'x')},[________]{2*get('D',1,'y')-get('D',2,'y')},[________]{2*get('D',1,'z')-get('D',2,'z')})

[`C_4=`]([________]{get('D',1,'x')},[________]{get('D',1,'y')},[________]{get('D',1,'z')})
END_PGML

BEGIN_PGML_SOLUTION
To ensure [`C^0`] continuity by moving [`D_1`], we let [`D_1=C_4`], and [`C_4=([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])`].

To ensure [`C^0`] continuity by moving [`C_4`], we let [`C_4=D_1`], and [`D_1=([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])`].

To ensure [`C^1`] continuity by moving [`D_1`] and [`D_2`], we start the same way as before, setting [`D_1=C_4`], with [`D_1=([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])`].  Then we satisfy [`C_4-C_3=D_2-D_1`] as follows.

>> [`D_2=D_1+C_4-C_3=C_4+C_4-C_3=2C_4-C_3
=2([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])
-([$stupid+get('C',3,'x')],[$stupid+get('C',3,'y')],[$stupid+get('C',3,'z')])
=([$stupid+2*get('C',4,'x')-get('C',3,'x')],
  [$stupid+2*get('C',4,'y')-get('C',3,'y')],
  [$stupid+2*get('C',4,'z')-get('C',3,'z')])`] <<

To ensure [`C^1`] continuity by moving [`C_3`] and [`C_4`], we start the same way as before, setting [`C_4=D_1`], with [`C_4=([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])`].  Then we satisfy [`C_4-C_3=D_2-D_1`] as follows.

>> [`C_3=C_4+D_1-D_2=D_1+D_1-D_2=2D_1-D_2
=2([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])
-([$stupid+get('D',2,'x')],[$stupid+get('D',2,'y')],[$stupid+get('D',2,'z')])
=([$stupid+2*get('D',1,'x')-get('D',2,'x')],
  [$stupid+2*get('D',1,'y')-get('D',2,'y')],
  [$stupid+2*get('D',1,'z')-get('D',2,'z')])`] <<

To ensure [`C^2`] continuity by moving [`D_1`], [`D_2`], and [`D_3`], we start the same way as before, setting [`D_1=C_4`], with [`D_1=([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])`].  Then we satisfy [`C_4-C_3=D_2-D_1`] the same way as before:

>> [`D_2=D_1+C_4-C_3=C_4+C_4-C_3=2C_4-C_3
=2([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])
-([$stupid+get('C',3,'x')],[$stupid+get('C',3,'y')],[$stupid+get('C',3,'z')])
=([$stupid+2*get('C',4,'x')-get('C',3,'x')],
  [$stupid+2*get('C',4,'y')-get('C',3,'y')],
  [$stupid+2*get('C',4,'z')-get('C',3,'z')])`] <<

But now we must also satisfy [`C_3+(C_3-C_2)=D_2+(D_2-D_3)`], which we do as follows.

>> [`D_3=C_2+2(D_2-C_3)=C_2+2((D_1+C_4-C_3)-C_3)=C_2+2((C_4+C_4-C_3)-C_3)=C_2+4(C_4-C_3)`] <<

>> [`=([$stupid+get('C',2,'x')],[$stupid+get('C',2,'y')],[$stupid+get('C',2,'z')])
+4(([$stupid+get('C',4,'x')],[$stupid+get('C',4,'y')],[$stupid+get('C',4,'z')])
  -([$stupid+get('C',3,'x')],[$stupid+get('C',3,'y')],[$stupid+get('C',3,'z')]))
=([$stupid+get('C',2,'x')+4*(get('C',4,'x')-get('C',3,'x'))],
  [$stupid+get('C',2,'y')+4*(get('C',4,'y')-get('C',3,'y'))],
  [$stupid+get('C',2,'z')+4*(get('C',4,'z')-get('C',3,'z'))])`] <<

To ensure [`C^2`] continuity by moving [`C_2`], [`C_3`], and [`C_4`], we start the same way as before, setting [`C_4=D_1`], with [`C_4=([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])`].  Then we satisfy [`C_4-C_3=D_2-D_1`] as follows.

>> [`C_3=C_4+D_1-D_2=D_1+D_1-D_2=2D_1-D_2
=2([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])
-([$stupid+get('D',2,'x')],[$stupid+get('D',2,'y')],[$stupid+get('D',2,'z')])
=([$stupid+2*get('D',1,'x')-get('D',2,'x')],
  [$stupid+2*get('D',1,'y')-get('D',2,'y')],
  [$stupid+2*get('D',1,'z')-get('D',2,'z')])`] <<

But now we must also satisfy [`C_3+(C_3-C_2)=D_2+(D_2-D_3)`], which we do as follows.

>> [`C_2=D_3+2(C_3-D_2)=D_3+2((C_4+D_1-D_2)-D_2)=D_3+2((D_1+D_1-D_2)-D_2)=D_3+4(D_1-D_2)`] <<

>> [`=([$stupid+get('D',3,'x')],[$stupid+get('D',3,'y')],[$stupid+get('D',3,'z')])
+4(([$stupid+get('D',1,'x')],[$stupid+get('D',1,'y')],[$stupid+get('D',1,'z')])
  -([$stupid+get('D',2,'x')],[$stupid+get('D',2,'y')],[$stupid+get('D',2,'z')]))
=([$stupid+get('D',3,'x')+4*(get('D',1,'x')-get('D',2,'x'))],
  [$stupid+get('D',3,'y')+4*(get('D',1,'y')-get('D',2,'y'))],
  [$stupid+get('D',3,'z')+4*(get('D',1,'z')-get('D',2,'z'))])`] <<
END_PGML_SOLUTION

ENDDOCUMENT();
